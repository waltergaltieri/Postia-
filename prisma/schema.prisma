generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Agency {
  id           String @id @default(cuid())
  name         String
  slug         String @unique
  tokenBalance Int    @default(1000)
  createdAt    DateTime @default(now())
  
  users     User[]
  clients   Client[]
  campaigns Campaign[]
  jobs      ContentJob[]
}

model User {
  id                     String    @id @default(cuid())
  email                  String    @unique
  name                   String
  password               String? // Nullable for OAuth users
  role                   String? // Nullable for OAuth users until they complete registration (OWNER, MANAGER, EDITOR, VIEWER)
  emailVerified          DateTime?
  emailVerificationToken String?
  passwordResetToken     String?
  passwordResetExpires   DateTime?
  agencyId               String? // Nullable for OAuth users until they complete registration
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  
  // New fields for client access control
  assignedClients        String?  @default("[]") // JSON array of client IDs user can access
  lastSelectedClient     String?  // For session persistence
  clientPermissions      String?  // JSON string for client-specific permissions
  
  agency         Agency? @relation(fields: [agencyId], references: [id])
  jobs           ContentJob[]
  accounts       Account[]
  sessions       Session[]
  clientSessions ClientSession[]
}

model Client {
  id        String @id @default(cuid())
  name      String
  email     String?
  agencyId  String
  settings  String? // JSON string
  createdAt DateTime @default(now())
  
  // New fields for enhanced client management
  brandColors       String?  @default("[\"#3b82f6\"]") // JSON array of client brand colors
  logoUrl           String?  // Client logo URL
  themeSettings     String?  // JSON string for client-specific UI theming
  isActive          Boolean  @default(true) // Client active status
  workspaceSettings String?  // JSON string for client workspace configuration
  
  agency         Agency @relation(fields: [agencyId], references: [id])
  campaigns      Campaign[]
  jobs           ContentJob[]
  clientSessions ClientSession[]
}

model Campaign {
  id          String @id @default(cuid())
  name        String
  description String?
  clientId    String
  agencyId    String
  status      String @default("ACTIVE") // ACTIVE, PAUSED, COMPLETED
  startDate   DateTime?
  endDate     DateTime?
  settings    String? // JSON string
  createdAt   DateTime @default(now())
  
  client Client @relation(fields: [clientId], references: [id])
  agency Agency @relation(fields: [agencyId], references: [id])
  jobs   ContentJob[]
}

model ContentJob {
  id              String @id @default(cuid())
  agencyId        String
  userId          String
  clientId        String?
  campaignId      String?
  type            String // CAMPAIGN_CONTENT, DESIGN_GENERATION, etc.
  status          String @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, FAILED
  tokensConsumed  Int @default(0)
  scheduledDate   DateTime?
  result          String? // JSON string
  metadata        String? // JSON string
  createdAt       DateTime @default(now())
  completedAt     DateTime?
  
  agency   Agency @relation(fields: [agencyId], references: [id])
  user     User @relation(fields: [userId], references: [id])
  client   Client? @relation(fields: [clientId], references: [id])
  campaign Campaign? @relation(fields: [campaignId], references: [id])
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ClientSession {
  id           String   @id @default(cuid())
  userId       String
  clientId     String
  lastAccessed DateTime @default(now())
  sessionData  String?  // JSON string for client-specific session data
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  @@unique([userId, clientId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}