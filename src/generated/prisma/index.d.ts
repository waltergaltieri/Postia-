
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Agency
 * 
 */
export type Agency = $Result.DefaultSelection<Prisma.$AgencyPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserInvitation
 * 
 */
export type UserInvitation = $Result.DefaultSelection<Prisma.$UserInvitationPayload>
/**
 * Model Client
 * 
 */
export type Client = $Result.DefaultSelection<Prisma.$ClientPayload>
/**
 * Model SocialMediaLink
 * 
 */
export type SocialMediaLink = $Result.DefaultSelection<Prisma.$SocialMediaLinkPayload>
/**
 * Model BrandAsset
 * 
 */
export type BrandAsset = $Result.DefaultSelection<Prisma.$BrandAssetPayload>
/**
 * Model Campaign
 * 
 */
export type Campaign = $Result.DefaultSelection<Prisma.$CampaignPayload>
/**
 * Model Post
 * 
 */
export type Post = $Result.DefaultSelection<Prisma.$PostPayload>
/**
 * Model ContentGenerationJob
 * 
 */
export type ContentGenerationJob = $Result.DefaultSelection<Prisma.$ContentGenerationJobPayload>
/**
 * Model GenerationStepResult
 * 
 */
export type GenerationStepResult = $Result.DefaultSelection<Prisma.$GenerationStepResultPayload>
/**
 * Model ContentVersion
 * 
 */
export type ContentVersion = $Result.DefaultSelection<Prisma.$ContentVersionPayload>
/**
 * Model SocialAccount
 * 
 */
export type SocialAccount = $Result.DefaultSelection<Prisma.$SocialAccountPayload>
/**
 * Model PublicationResult
 * 
 */
export type PublicationResult = $Result.DefaultSelection<Prisma.$PublicationResultPayload>
/**
 * Model TokenTransaction
 * 
 */
export type TokenTransaction = $Result.DefaultSelection<Prisma.$TokenTransactionPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model ApiKey
 * 
 */
export type ApiKey = $Result.DefaultSelection<Prisma.$ApiKeyPayload>
/**
 * Model ApiKeyUsage
 * 
 */
export type ApiKeyUsage = $Result.DefaultSelection<Prisma.$ApiKeyUsagePayload>
/**
 * Model SystemLog
 * 
 */
export type SystemLog = $Result.DefaultSelection<Prisma.$SystemLogPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const SubscriptionPlan: {
  BASIC: 'BASIC',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED',
  CUSTOM: 'CUSTOM'
};

export type SubscriptionPlan = (typeof SubscriptionPlan)[keyof typeof SubscriptionPlan]


export const UserRole: {
  OWNER: 'OWNER',
  MANAGER: 'MANAGER',
  COLLABORATOR: 'COLLABORATOR'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const AssetType: {
  LOGO: 'LOGO',
  IMAGE: 'IMAGE',
  TEMPLATE: 'TEMPLATE',
  PALETTE: 'PALETTE'
};

export type AssetType = (typeof AssetType)[keyof typeof AssetType]


export const CampaignStatus: {
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED'
};

export type CampaignStatus = (typeof CampaignStatus)[keyof typeof CampaignStatus]


export const PostStatus: {
  DRAFT: 'DRAFT',
  APPROVED: 'APPROVED',
  PUBLISHED: 'PUBLISHED'
};

export type PostStatus = (typeof PostStatus)[keyof typeof PostStatus]


export const JobStatus: {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

export type JobStatus = (typeof JobStatus)[keyof typeof JobStatus]


export const GenerationStep: {
  IDEA: 'IDEA',
  COPY_DESIGN: 'COPY_DESIGN',
  COPY_PUBLICATION: 'COPY_PUBLICATION',
  BASE_IMAGE: 'BASE_IMAGE',
  FINAL_DESIGN: 'FINAL_DESIGN'
};

export type GenerationStep = (typeof GenerationStep)[keyof typeof GenerationStep]


export const StepStatus: {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

export type StepStatus = (typeof StepStatus)[keyof typeof StepStatus]


export const SocialPlatform: {
  FACEBOOK: 'FACEBOOK',
  INSTAGRAM: 'INSTAGRAM',
  LINKEDIN: 'LINKEDIN'
};

export type SocialPlatform = (typeof SocialPlatform)[keyof typeof SocialPlatform]


export const PublicationStatus: {
  PENDING: 'PENDING',
  PUBLISHED: 'PUBLISHED',
  FAILED: 'FAILED'
};

export type PublicationStatus = (typeof PublicationStatus)[keyof typeof PublicationStatus]


export const TokenTransactionType: {
  CONSUMPTION: 'CONSUMPTION',
  PURCHASE: 'PURCHASE',
  SUBSCRIPTION_RENEWAL: 'SUBSCRIPTION_RENEWAL',
  REFUND: 'REFUND',
  ADJUSTMENT: 'ADJUSTMENT'
};

export type TokenTransactionType = (typeof TokenTransactionType)[keyof typeof TokenTransactionType]

}

export type SubscriptionPlan = $Enums.SubscriptionPlan

export const SubscriptionPlan: typeof $Enums.SubscriptionPlan

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type AssetType = $Enums.AssetType

export const AssetType: typeof $Enums.AssetType

export type CampaignStatus = $Enums.CampaignStatus

export const CampaignStatus: typeof $Enums.CampaignStatus

export type PostStatus = $Enums.PostStatus

export const PostStatus: typeof $Enums.PostStatus

export type JobStatus = $Enums.JobStatus

export const JobStatus: typeof $Enums.JobStatus

export type GenerationStep = $Enums.GenerationStep

export const GenerationStep: typeof $Enums.GenerationStep

export type StepStatus = $Enums.StepStatus

export const StepStatus: typeof $Enums.StepStatus

export type SocialPlatform = $Enums.SocialPlatform

export const SocialPlatform: typeof $Enums.SocialPlatform

export type PublicationStatus = $Enums.PublicationStatus

export const PublicationStatus: typeof $Enums.PublicationStatus

export type TokenTransactionType = $Enums.TokenTransactionType

export const TokenTransactionType: typeof $Enums.TokenTransactionType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Agencies
 * const agencies = await prisma.agency.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Agencies
   * const agencies = await prisma.agency.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.agency`: Exposes CRUD operations for the **Agency** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Agencies
    * const agencies = await prisma.agency.findMany()
    * ```
    */
  get agency(): Prisma.AgencyDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.userInvitation`: Exposes CRUD operations for the **UserInvitation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserInvitations
    * const userInvitations = await prisma.userInvitation.findMany()
    * ```
    */
  get userInvitation(): Prisma.UserInvitationDelegate<ExtArgs>;

  /**
   * `prisma.client`: Exposes CRUD operations for the **Client** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.client.findMany()
    * ```
    */
  get client(): Prisma.ClientDelegate<ExtArgs>;

  /**
   * `prisma.socialMediaLink`: Exposes CRUD operations for the **SocialMediaLink** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SocialMediaLinks
    * const socialMediaLinks = await prisma.socialMediaLink.findMany()
    * ```
    */
  get socialMediaLink(): Prisma.SocialMediaLinkDelegate<ExtArgs>;

  /**
   * `prisma.brandAsset`: Exposes CRUD operations for the **BrandAsset** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BrandAssets
    * const brandAssets = await prisma.brandAsset.findMany()
    * ```
    */
  get brandAsset(): Prisma.BrandAssetDelegate<ExtArgs>;

  /**
   * `prisma.campaign`: Exposes CRUD operations for the **Campaign** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Campaigns
    * const campaigns = await prisma.campaign.findMany()
    * ```
    */
  get campaign(): Prisma.CampaignDelegate<ExtArgs>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<ExtArgs>;

  /**
   * `prisma.contentGenerationJob`: Exposes CRUD operations for the **ContentGenerationJob** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContentGenerationJobs
    * const contentGenerationJobs = await prisma.contentGenerationJob.findMany()
    * ```
    */
  get contentGenerationJob(): Prisma.ContentGenerationJobDelegate<ExtArgs>;

  /**
   * `prisma.generationStepResult`: Exposes CRUD operations for the **GenerationStepResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GenerationStepResults
    * const generationStepResults = await prisma.generationStepResult.findMany()
    * ```
    */
  get generationStepResult(): Prisma.GenerationStepResultDelegate<ExtArgs>;

  /**
   * `prisma.contentVersion`: Exposes CRUD operations for the **ContentVersion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContentVersions
    * const contentVersions = await prisma.contentVersion.findMany()
    * ```
    */
  get contentVersion(): Prisma.ContentVersionDelegate<ExtArgs>;

  /**
   * `prisma.socialAccount`: Exposes CRUD operations for the **SocialAccount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SocialAccounts
    * const socialAccounts = await prisma.socialAccount.findMany()
    * ```
    */
  get socialAccount(): Prisma.SocialAccountDelegate<ExtArgs>;

  /**
   * `prisma.publicationResult`: Exposes CRUD operations for the **PublicationResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PublicationResults
    * const publicationResults = await prisma.publicationResult.findMany()
    * ```
    */
  get publicationResult(): Prisma.PublicationResultDelegate<ExtArgs>;

  /**
   * `prisma.tokenTransaction`: Exposes CRUD operations for the **TokenTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TokenTransactions
    * const tokenTransactions = await prisma.tokenTransaction.findMany()
    * ```
    */
  get tokenTransaction(): Prisma.TokenTransactionDelegate<ExtArgs>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs>;

  /**
   * `prisma.apiKey`: Exposes CRUD operations for the **ApiKey** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApiKeys
    * const apiKeys = await prisma.apiKey.findMany()
    * ```
    */
  get apiKey(): Prisma.ApiKeyDelegate<ExtArgs>;

  /**
   * `prisma.apiKeyUsage`: Exposes CRUD operations for the **ApiKeyUsage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApiKeyUsages
    * const apiKeyUsages = await prisma.apiKeyUsage.findMany()
    * ```
    */
  get apiKeyUsage(): Prisma.ApiKeyUsageDelegate<ExtArgs>;

  /**
   * `prisma.systemLog`: Exposes CRUD operations for the **SystemLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemLogs
    * const systemLogs = await prisma.systemLog.findMany()
    * ```
    */
  get systemLog(): Prisma.SystemLogDelegate<ExtArgs>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Agency: 'Agency',
    User: 'User',
    UserInvitation: 'UserInvitation',
    Client: 'Client',
    SocialMediaLink: 'SocialMediaLink',
    BrandAsset: 'BrandAsset',
    Campaign: 'Campaign',
    Post: 'Post',
    ContentGenerationJob: 'ContentGenerationJob',
    GenerationStepResult: 'GenerationStepResult',
    ContentVersion: 'ContentVersion',
    SocialAccount: 'SocialAccount',
    PublicationResult: 'PublicationResult',
    TokenTransaction: 'TokenTransaction',
    AuditLog: 'AuditLog',
    ApiKey: 'ApiKey',
    ApiKeyUsage: 'ApiKeyUsage',
    SystemLog: 'SystemLog',
    Account: 'Account',
    Session: 'Session',
    VerificationToken: 'VerificationToken'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "agency" | "user" | "userInvitation" | "client" | "socialMediaLink" | "brandAsset" | "campaign" | "post" | "contentGenerationJob" | "generationStepResult" | "contentVersion" | "socialAccount" | "publicationResult" | "tokenTransaction" | "auditLog" | "apiKey" | "apiKeyUsage" | "systemLog" | "account" | "session" | "verificationToken"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Agency: {
        payload: Prisma.$AgencyPayload<ExtArgs>
        fields: Prisma.AgencyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgencyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgencyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgencyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgencyPayload>
          }
          findFirst: {
            args: Prisma.AgencyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgencyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgencyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgencyPayload>
          }
          findMany: {
            args: Prisma.AgencyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgencyPayload>[]
          }
          create: {
            args: Prisma.AgencyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgencyPayload>
          }
          createMany: {
            args: Prisma.AgencyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AgencyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgencyPayload>[]
          }
          delete: {
            args: Prisma.AgencyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgencyPayload>
          }
          update: {
            args: Prisma.AgencyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgencyPayload>
          }
          deleteMany: {
            args: Prisma.AgencyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AgencyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AgencyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgencyPayload>
          }
          aggregate: {
            args: Prisma.AgencyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgency>
          }
          groupBy: {
            args: Prisma.AgencyGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgencyGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgencyCountArgs<ExtArgs>
            result: $Utils.Optional<AgencyCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserInvitation: {
        payload: Prisma.$UserInvitationPayload<ExtArgs>
        fields: Prisma.UserInvitationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserInvitationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvitationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserInvitationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvitationPayload>
          }
          findFirst: {
            args: Prisma.UserInvitationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvitationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserInvitationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvitationPayload>
          }
          findMany: {
            args: Prisma.UserInvitationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvitationPayload>[]
          }
          create: {
            args: Prisma.UserInvitationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvitationPayload>
          }
          createMany: {
            args: Prisma.UserInvitationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserInvitationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvitationPayload>[]
          }
          delete: {
            args: Prisma.UserInvitationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvitationPayload>
          }
          update: {
            args: Prisma.UserInvitationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvitationPayload>
          }
          deleteMany: {
            args: Prisma.UserInvitationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserInvitationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserInvitationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserInvitationPayload>
          }
          aggregate: {
            args: Prisma.UserInvitationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserInvitation>
          }
          groupBy: {
            args: Prisma.UserInvitationGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserInvitationGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserInvitationCountArgs<ExtArgs>
            result: $Utils.Optional<UserInvitationCountAggregateOutputType> | number
          }
        }
      }
      Client: {
        payload: Prisma.$ClientPayload<ExtArgs>
        fields: Prisma.ClientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findFirst: {
            args: Prisma.ClientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findMany: {
            args: Prisma.ClientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          create: {
            args: Prisma.ClientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          createMany: {
            args: Prisma.ClientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          delete: {
            args: Prisma.ClientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          update: {
            args: Prisma.ClientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          deleteMany: {
            args: Prisma.ClientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          aggregate: {
            args: Prisma.ClientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClient>
          }
          groupBy: {
            args: Prisma.ClientGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClientGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClientCountArgs<ExtArgs>
            result: $Utils.Optional<ClientCountAggregateOutputType> | number
          }
        }
      }
      SocialMediaLink: {
        payload: Prisma.$SocialMediaLinkPayload<ExtArgs>
        fields: Prisma.SocialMediaLinkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SocialMediaLinkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialMediaLinkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SocialMediaLinkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialMediaLinkPayload>
          }
          findFirst: {
            args: Prisma.SocialMediaLinkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialMediaLinkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SocialMediaLinkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialMediaLinkPayload>
          }
          findMany: {
            args: Prisma.SocialMediaLinkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialMediaLinkPayload>[]
          }
          create: {
            args: Prisma.SocialMediaLinkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialMediaLinkPayload>
          }
          createMany: {
            args: Prisma.SocialMediaLinkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SocialMediaLinkCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialMediaLinkPayload>[]
          }
          delete: {
            args: Prisma.SocialMediaLinkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialMediaLinkPayload>
          }
          update: {
            args: Prisma.SocialMediaLinkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialMediaLinkPayload>
          }
          deleteMany: {
            args: Prisma.SocialMediaLinkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SocialMediaLinkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SocialMediaLinkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialMediaLinkPayload>
          }
          aggregate: {
            args: Prisma.SocialMediaLinkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSocialMediaLink>
          }
          groupBy: {
            args: Prisma.SocialMediaLinkGroupByArgs<ExtArgs>
            result: $Utils.Optional<SocialMediaLinkGroupByOutputType>[]
          }
          count: {
            args: Prisma.SocialMediaLinkCountArgs<ExtArgs>
            result: $Utils.Optional<SocialMediaLinkCountAggregateOutputType> | number
          }
        }
      }
      BrandAsset: {
        payload: Prisma.$BrandAssetPayload<ExtArgs>
        fields: Prisma.BrandAssetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BrandAssetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandAssetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BrandAssetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandAssetPayload>
          }
          findFirst: {
            args: Prisma.BrandAssetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandAssetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BrandAssetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandAssetPayload>
          }
          findMany: {
            args: Prisma.BrandAssetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandAssetPayload>[]
          }
          create: {
            args: Prisma.BrandAssetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandAssetPayload>
          }
          createMany: {
            args: Prisma.BrandAssetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BrandAssetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandAssetPayload>[]
          }
          delete: {
            args: Prisma.BrandAssetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandAssetPayload>
          }
          update: {
            args: Prisma.BrandAssetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandAssetPayload>
          }
          deleteMany: {
            args: Prisma.BrandAssetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BrandAssetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BrandAssetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandAssetPayload>
          }
          aggregate: {
            args: Prisma.BrandAssetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBrandAsset>
          }
          groupBy: {
            args: Prisma.BrandAssetGroupByArgs<ExtArgs>
            result: $Utils.Optional<BrandAssetGroupByOutputType>[]
          }
          count: {
            args: Prisma.BrandAssetCountArgs<ExtArgs>
            result: $Utils.Optional<BrandAssetCountAggregateOutputType> | number
          }
        }
      }
      Campaign: {
        payload: Prisma.$CampaignPayload<ExtArgs>
        fields: Prisma.CampaignFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CampaignFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CampaignFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          findFirst: {
            args: Prisma.CampaignFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CampaignFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          findMany: {
            args: Prisma.CampaignFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>[]
          }
          create: {
            args: Prisma.CampaignCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          createMany: {
            args: Prisma.CampaignCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CampaignCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>[]
          }
          delete: {
            args: Prisma.CampaignDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          update: {
            args: Prisma.CampaignUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          deleteMany: {
            args: Prisma.CampaignDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CampaignUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CampaignUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          aggregate: {
            args: Prisma.CampaignAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCampaign>
          }
          groupBy: {
            args: Prisma.CampaignGroupByArgs<ExtArgs>
            result: $Utils.Optional<CampaignGroupByOutputType>[]
          }
          count: {
            args: Prisma.CampaignCountArgs<ExtArgs>
            result: $Utils.Optional<CampaignCountAggregateOutputType> | number
          }
        }
      }
      Post: {
        payload: Prisma.$PostPayload<ExtArgs>
        fields: Prisma.PostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findFirst: {
            args: Prisma.PostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findMany: {
            args: Prisma.PostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          create: {
            args: Prisma.PostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          createMany: {
            args: Prisma.PostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          delete: {
            args: Prisma.PostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          update: {
            args: Prisma.PostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          deleteMany: {
            args: Prisma.PostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          aggregate: {
            args: Prisma.PostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePost>
          }
          groupBy: {
            args: Prisma.PostGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostCountArgs<ExtArgs>
            result: $Utils.Optional<PostCountAggregateOutputType> | number
          }
        }
      }
      ContentGenerationJob: {
        payload: Prisma.$ContentGenerationJobPayload<ExtArgs>
        fields: Prisma.ContentGenerationJobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContentGenerationJobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentGenerationJobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContentGenerationJobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentGenerationJobPayload>
          }
          findFirst: {
            args: Prisma.ContentGenerationJobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentGenerationJobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContentGenerationJobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentGenerationJobPayload>
          }
          findMany: {
            args: Prisma.ContentGenerationJobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentGenerationJobPayload>[]
          }
          create: {
            args: Prisma.ContentGenerationJobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentGenerationJobPayload>
          }
          createMany: {
            args: Prisma.ContentGenerationJobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContentGenerationJobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentGenerationJobPayload>[]
          }
          delete: {
            args: Prisma.ContentGenerationJobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentGenerationJobPayload>
          }
          update: {
            args: Prisma.ContentGenerationJobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentGenerationJobPayload>
          }
          deleteMany: {
            args: Prisma.ContentGenerationJobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContentGenerationJobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ContentGenerationJobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentGenerationJobPayload>
          }
          aggregate: {
            args: Prisma.ContentGenerationJobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContentGenerationJob>
          }
          groupBy: {
            args: Prisma.ContentGenerationJobGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContentGenerationJobGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContentGenerationJobCountArgs<ExtArgs>
            result: $Utils.Optional<ContentGenerationJobCountAggregateOutputType> | number
          }
        }
      }
      GenerationStepResult: {
        payload: Prisma.$GenerationStepResultPayload<ExtArgs>
        fields: Prisma.GenerationStepResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GenerationStepResultFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenerationStepResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GenerationStepResultFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenerationStepResultPayload>
          }
          findFirst: {
            args: Prisma.GenerationStepResultFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenerationStepResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GenerationStepResultFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenerationStepResultPayload>
          }
          findMany: {
            args: Prisma.GenerationStepResultFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenerationStepResultPayload>[]
          }
          create: {
            args: Prisma.GenerationStepResultCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenerationStepResultPayload>
          }
          createMany: {
            args: Prisma.GenerationStepResultCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GenerationStepResultCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenerationStepResultPayload>[]
          }
          delete: {
            args: Prisma.GenerationStepResultDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenerationStepResultPayload>
          }
          update: {
            args: Prisma.GenerationStepResultUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenerationStepResultPayload>
          }
          deleteMany: {
            args: Prisma.GenerationStepResultDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GenerationStepResultUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GenerationStepResultUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenerationStepResultPayload>
          }
          aggregate: {
            args: Prisma.GenerationStepResultAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGenerationStepResult>
          }
          groupBy: {
            args: Prisma.GenerationStepResultGroupByArgs<ExtArgs>
            result: $Utils.Optional<GenerationStepResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.GenerationStepResultCountArgs<ExtArgs>
            result: $Utils.Optional<GenerationStepResultCountAggregateOutputType> | number
          }
        }
      }
      ContentVersion: {
        payload: Prisma.$ContentVersionPayload<ExtArgs>
        fields: Prisma.ContentVersionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContentVersionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentVersionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContentVersionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentVersionPayload>
          }
          findFirst: {
            args: Prisma.ContentVersionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentVersionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContentVersionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentVersionPayload>
          }
          findMany: {
            args: Prisma.ContentVersionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentVersionPayload>[]
          }
          create: {
            args: Prisma.ContentVersionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentVersionPayload>
          }
          createMany: {
            args: Prisma.ContentVersionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContentVersionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentVersionPayload>[]
          }
          delete: {
            args: Prisma.ContentVersionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentVersionPayload>
          }
          update: {
            args: Prisma.ContentVersionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentVersionPayload>
          }
          deleteMany: {
            args: Prisma.ContentVersionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContentVersionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ContentVersionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContentVersionPayload>
          }
          aggregate: {
            args: Prisma.ContentVersionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContentVersion>
          }
          groupBy: {
            args: Prisma.ContentVersionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContentVersionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContentVersionCountArgs<ExtArgs>
            result: $Utils.Optional<ContentVersionCountAggregateOutputType> | number
          }
        }
      }
      SocialAccount: {
        payload: Prisma.$SocialAccountPayload<ExtArgs>
        fields: Prisma.SocialAccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SocialAccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SocialAccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload>
          }
          findFirst: {
            args: Prisma.SocialAccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SocialAccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload>
          }
          findMany: {
            args: Prisma.SocialAccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload>[]
          }
          create: {
            args: Prisma.SocialAccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload>
          }
          createMany: {
            args: Prisma.SocialAccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SocialAccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload>[]
          }
          delete: {
            args: Prisma.SocialAccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload>
          }
          update: {
            args: Prisma.SocialAccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload>
          }
          deleteMany: {
            args: Prisma.SocialAccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SocialAccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SocialAccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload>
          }
          aggregate: {
            args: Prisma.SocialAccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSocialAccount>
          }
          groupBy: {
            args: Prisma.SocialAccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<SocialAccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.SocialAccountCountArgs<ExtArgs>
            result: $Utils.Optional<SocialAccountCountAggregateOutputType> | number
          }
        }
      }
      PublicationResult: {
        payload: Prisma.$PublicationResultPayload<ExtArgs>
        fields: Prisma.PublicationResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PublicationResultFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicationResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PublicationResultFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicationResultPayload>
          }
          findFirst: {
            args: Prisma.PublicationResultFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicationResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PublicationResultFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicationResultPayload>
          }
          findMany: {
            args: Prisma.PublicationResultFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicationResultPayload>[]
          }
          create: {
            args: Prisma.PublicationResultCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicationResultPayload>
          }
          createMany: {
            args: Prisma.PublicationResultCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PublicationResultCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicationResultPayload>[]
          }
          delete: {
            args: Prisma.PublicationResultDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicationResultPayload>
          }
          update: {
            args: Prisma.PublicationResultUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicationResultPayload>
          }
          deleteMany: {
            args: Prisma.PublicationResultDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PublicationResultUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PublicationResultUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicationResultPayload>
          }
          aggregate: {
            args: Prisma.PublicationResultAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePublicationResult>
          }
          groupBy: {
            args: Prisma.PublicationResultGroupByArgs<ExtArgs>
            result: $Utils.Optional<PublicationResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.PublicationResultCountArgs<ExtArgs>
            result: $Utils.Optional<PublicationResultCountAggregateOutputType> | number
          }
        }
      }
      TokenTransaction: {
        payload: Prisma.$TokenTransactionPayload<ExtArgs>
        fields: Prisma.TokenTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TokenTransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TokenTransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenTransactionPayload>
          }
          findFirst: {
            args: Prisma.TokenTransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TokenTransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenTransactionPayload>
          }
          findMany: {
            args: Prisma.TokenTransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenTransactionPayload>[]
          }
          create: {
            args: Prisma.TokenTransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenTransactionPayload>
          }
          createMany: {
            args: Prisma.TokenTransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TokenTransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenTransactionPayload>[]
          }
          delete: {
            args: Prisma.TokenTransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenTransactionPayload>
          }
          update: {
            args: Prisma.TokenTransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenTransactionPayload>
          }
          deleteMany: {
            args: Prisma.TokenTransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TokenTransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TokenTransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenTransactionPayload>
          }
          aggregate: {
            args: Prisma.TokenTransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTokenTransaction>
          }
          groupBy: {
            args: Prisma.TokenTransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TokenTransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TokenTransactionCountArgs<ExtArgs>
            result: $Utils.Optional<TokenTransactionCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      ApiKey: {
        payload: Prisma.$ApiKeyPayload<ExtArgs>
        fields: Prisma.ApiKeyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApiKeyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApiKeyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          findFirst: {
            args: Prisma.ApiKeyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApiKeyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          findMany: {
            args: Prisma.ApiKeyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>[]
          }
          create: {
            args: Prisma.ApiKeyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          createMany: {
            args: Prisma.ApiKeyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ApiKeyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>[]
          }
          delete: {
            args: Prisma.ApiKeyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          update: {
            args: Prisma.ApiKeyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          deleteMany: {
            args: Prisma.ApiKeyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApiKeyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ApiKeyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          aggregate: {
            args: Prisma.ApiKeyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApiKey>
          }
          groupBy: {
            args: Prisma.ApiKeyGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApiKeyGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApiKeyCountArgs<ExtArgs>
            result: $Utils.Optional<ApiKeyCountAggregateOutputType> | number
          }
        }
      }
      ApiKeyUsage: {
        payload: Prisma.$ApiKeyUsagePayload<ExtArgs>
        fields: Prisma.ApiKeyUsageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApiKeyUsageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyUsagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApiKeyUsageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyUsagePayload>
          }
          findFirst: {
            args: Prisma.ApiKeyUsageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyUsagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApiKeyUsageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyUsagePayload>
          }
          findMany: {
            args: Prisma.ApiKeyUsageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyUsagePayload>[]
          }
          create: {
            args: Prisma.ApiKeyUsageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyUsagePayload>
          }
          createMany: {
            args: Prisma.ApiKeyUsageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ApiKeyUsageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyUsagePayload>[]
          }
          delete: {
            args: Prisma.ApiKeyUsageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyUsagePayload>
          }
          update: {
            args: Prisma.ApiKeyUsageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyUsagePayload>
          }
          deleteMany: {
            args: Prisma.ApiKeyUsageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApiKeyUsageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ApiKeyUsageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyUsagePayload>
          }
          aggregate: {
            args: Prisma.ApiKeyUsageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApiKeyUsage>
          }
          groupBy: {
            args: Prisma.ApiKeyUsageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApiKeyUsageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApiKeyUsageCountArgs<ExtArgs>
            result: $Utils.Optional<ApiKeyUsageCountAggregateOutputType> | number
          }
        }
      }
      SystemLog: {
        payload: Prisma.$SystemLogPayload<ExtArgs>
        fields: Prisma.SystemLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload>
          }
          findFirst: {
            args: Prisma.SystemLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload>
          }
          findMany: {
            args: Prisma.SystemLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload>[]
          }
          create: {
            args: Prisma.SystemLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload>
          }
          createMany: {
            args: Prisma.SystemLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SystemLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload>[]
          }
          delete: {
            args: Prisma.SystemLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload>
          }
          update: {
            args: Prisma.SystemLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload>
          }
          deleteMany: {
            args: Prisma.SystemLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SystemLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload>
          }
          aggregate: {
            args: Prisma.SystemLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystemLog>
          }
          groupBy: {
            args: Prisma.SystemLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemLogCountArgs<ExtArgs>
            result: $Utils.Optional<SystemLogCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AgencyCountOutputType
   */

  export type AgencyCountOutputType = {
    users: number
    clients: number
    userInvitations: number
    tokenTransactions: number
    auditLogs: number
  }

  export type AgencyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | AgencyCountOutputTypeCountUsersArgs
    clients?: boolean | AgencyCountOutputTypeCountClientsArgs
    userInvitations?: boolean | AgencyCountOutputTypeCountUserInvitationsArgs
    tokenTransactions?: boolean | AgencyCountOutputTypeCountTokenTransactionsArgs
    auditLogs?: boolean | AgencyCountOutputTypeCountAuditLogsArgs
  }

  // Custom InputTypes
  /**
   * AgencyCountOutputType without action
   */
  export type AgencyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgencyCountOutputType
     */
    select?: AgencyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AgencyCountOutputType without action
   */
  export type AgencyCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * AgencyCountOutputType without action
   */
  export type AgencyCountOutputTypeCountClientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientWhereInput
  }

  /**
   * AgencyCountOutputType without action
   */
  export type AgencyCountOutputTypeCountUserInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserInvitationWhereInput
  }

  /**
   * AgencyCountOutputType without action
   */
  export type AgencyCountOutputTypeCountTokenTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TokenTransactionWhereInput
  }

  /**
   * AgencyCountOutputType without action
   */
  export type AgencyCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    assignedClients: number
    invitationsSent: number
    accounts: number
    sessions: number
    auditLogs: number
    tokenTransactions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedClients?: boolean | UserCountOutputTypeCountAssignedClientsArgs
    invitationsSent?: boolean | UserCountOutputTypeCountInvitationsSentArgs
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
    tokenTransactions?: boolean | UserCountOutputTypeCountTokenTransactionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedClientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInvitationsSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserInvitationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTokenTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TokenTransactionWhereInput
  }


  /**
   * Count Type ClientCountOutputType
   */

  export type ClientCountOutputType = {
    assignedUsers: number
    campaigns: number
    brandAssets: number
    socialAccounts: number
    socialMediaLinks: number
    apiKeys: number
  }

  export type ClientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedUsers?: boolean | ClientCountOutputTypeCountAssignedUsersArgs
    campaigns?: boolean | ClientCountOutputTypeCountCampaignsArgs
    brandAssets?: boolean | ClientCountOutputTypeCountBrandAssetsArgs
    socialAccounts?: boolean | ClientCountOutputTypeCountSocialAccountsArgs
    socialMediaLinks?: boolean | ClientCountOutputTypeCountSocialMediaLinksArgs
    apiKeys?: boolean | ClientCountOutputTypeCountApiKeysArgs
  }

  // Custom InputTypes
  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientCountOutputType
     */
    select?: ClientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountAssignedUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountCampaignsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CampaignWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountBrandAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrandAssetWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountSocialAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SocialAccountWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountSocialMediaLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SocialMediaLinkWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountApiKeysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApiKeyWhereInput
  }


  /**
   * Count Type CampaignCountOutputType
   */

  export type CampaignCountOutputType = {
    posts: number
  }

  export type CampaignCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | CampaignCountOutputTypeCountPostsArgs
  }

  // Custom InputTypes
  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignCountOutputType
     */
    select?: CampaignCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }


  /**
   * Count Type PostCountOutputType
   */

  export type PostCountOutputType = {
    publicationResults: number
    contentVersions: number
  }

  export type PostCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    publicationResults?: boolean | PostCountOutputTypeCountPublicationResultsArgs
    contentVersions?: boolean | PostCountOutputTypeCountContentVersionsArgs
  }

  // Custom InputTypes
  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostCountOutputType
     */
    select?: PostCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountPublicationResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PublicationResultWhereInput
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountContentVersionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContentVersionWhereInput
  }


  /**
   * Count Type ContentGenerationJobCountOutputType
   */

  export type ContentGenerationJobCountOutputType = {
    steps: number
  }

  export type ContentGenerationJobCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    steps?: boolean | ContentGenerationJobCountOutputTypeCountStepsArgs
  }

  // Custom InputTypes
  /**
   * ContentGenerationJobCountOutputType without action
   */
  export type ContentGenerationJobCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentGenerationJobCountOutputType
     */
    select?: ContentGenerationJobCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContentGenerationJobCountOutputType without action
   */
  export type ContentGenerationJobCountOutputTypeCountStepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GenerationStepResultWhereInput
  }


  /**
   * Count Type SocialAccountCountOutputType
   */

  export type SocialAccountCountOutputType = {
    publications: number
  }

  export type SocialAccountCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    publications?: boolean | SocialAccountCountOutputTypeCountPublicationsArgs
  }

  // Custom InputTypes
  /**
   * SocialAccountCountOutputType without action
   */
  export type SocialAccountCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccountCountOutputType
     */
    select?: SocialAccountCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SocialAccountCountOutputType without action
   */
  export type SocialAccountCountOutputTypeCountPublicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PublicationResultWhereInput
  }


  /**
   * Count Type ApiKeyCountOutputType
   */

  export type ApiKeyCountOutputType = {
    usage: number
  }

  export type ApiKeyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usage?: boolean | ApiKeyCountOutputTypeCountUsageArgs
  }

  // Custom InputTypes
  /**
   * ApiKeyCountOutputType without action
   */
  export type ApiKeyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKeyCountOutputType
     */
    select?: ApiKeyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ApiKeyCountOutputType without action
   */
  export type ApiKeyCountOutputTypeCountUsageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApiKeyUsageWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Agency
   */

  export type AggregateAgency = {
    _count: AgencyCountAggregateOutputType | null
    _avg: AgencyAvgAggregateOutputType | null
    _sum: AgencySumAggregateOutputType | null
    _min: AgencyMinAggregateOutputType | null
    _max: AgencyMaxAggregateOutputType | null
  }

  export type AgencyAvgAggregateOutputType = {
    tokenBalance: number | null
  }

  export type AgencySumAggregateOutputType = {
    tokenBalance: number | null
  }

  export type AgencyMinAggregateOutputType = {
    id: string | null
    name: string | null
    subscriptionPlan: $Enums.SubscriptionPlan | null
    tokenBalance: number | null
    stripeCustomerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AgencyMaxAggregateOutputType = {
    id: string | null
    name: string | null
    subscriptionPlan: $Enums.SubscriptionPlan | null
    tokenBalance: number | null
    stripeCustomerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AgencyCountAggregateOutputType = {
    id: number
    name: number
    subscriptionPlan: number
    tokenBalance: number
    stripeCustomerId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AgencyAvgAggregateInputType = {
    tokenBalance?: true
  }

  export type AgencySumAggregateInputType = {
    tokenBalance?: true
  }

  export type AgencyMinAggregateInputType = {
    id?: true
    name?: true
    subscriptionPlan?: true
    tokenBalance?: true
    stripeCustomerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AgencyMaxAggregateInputType = {
    id?: true
    name?: true
    subscriptionPlan?: true
    tokenBalance?: true
    stripeCustomerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AgencyCountAggregateInputType = {
    id?: true
    name?: true
    subscriptionPlan?: true
    tokenBalance?: true
    stripeCustomerId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AgencyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agency to aggregate.
     */
    where?: AgencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agencies to fetch.
     */
    orderBy?: AgencyOrderByWithRelationInput | AgencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Agencies
    **/
    _count?: true | AgencyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AgencyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AgencySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgencyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgencyMaxAggregateInputType
  }

  export type GetAgencyAggregateType<T extends AgencyAggregateArgs> = {
        [P in keyof T & keyof AggregateAgency]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgency[P]>
      : GetScalarType<T[P], AggregateAgency[P]>
  }




  export type AgencyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgencyWhereInput
    orderBy?: AgencyOrderByWithAggregationInput | AgencyOrderByWithAggregationInput[]
    by: AgencyScalarFieldEnum[] | AgencyScalarFieldEnum
    having?: AgencyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgencyCountAggregateInputType | true
    _avg?: AgencyAvgAggregateInputType
    _sum?: AgencySumAggregateInputType
    _min?: AgencyMinAggregateInputType
    _max?: AgencyMaxAggregateInputType
  }

  export type AgencyGroupByOutputType = {
    id: string
    name: string
    subscriptionPlan: $Enums.SubscriptionPlan
    tokenBalance: number
    stripeCustomerId: string | null
    createdAt: Date
    updatedAt: Date
    _count: AgencyCountAggregateOutputType | null
    _avg: AgencyAvgAggregateOutputType | null
    _sum: AgencySumAggregateOutputType | null
    _min: AgencyMinAggregateOutputType | null
    _max: AgencyMaxAggregateOutputType | null
  }

  type GetAgencyGroupByPayload<T extends AgencyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgencyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgencyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgencyGroupByOutputType[P]>
            : GetScalarType<T[P], AgencyGroupByOutputType[P]>
        }
      >
    >


  export type AgencySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    subscriptionPlan?: boolean
    tokenBalance?: boolean
    stripeCustomerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | Agency$usersArgs<ExtArgs>
    clients?: boolean | Agency$clientsArgs<ExtArgs>
    userInvitations?: boolean | Agency$userInvitationsArgs<ExtArgs>
    tokenTransactions?: boolean | Agency$tokenTransactionsArgs<ExtArgs>
    auditLogs?: boolean | Agency$auditLogsArgs<ExtArgs>
    _count?: boolean | AgencyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agency"]>

  export type AgencySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    subscriptionPlan?: boolean
    tokenBalance?: boolean
    stripeCustomerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["agency"]>

  export type AgencySelectScalar = {
    id?: boolean
    name?: boolean
    subscriptionPlan?: boolean
    tokenBalance?: boolean
    stripeCustomerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AgencyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Agency$usersArgs<ExtArgs>
    clients?: boolean | Agency$clientsArgs<ExtArgs>
    userInvitations?: boolean | Agency$userInvitationsArgs<ExtArgs>
    tokenTransactions?: boolean | Agency$tokenTransactionsArgs<ExtArgs>
    auditLogs?: boolean | Agency$auditLogsArgs<ExtArgs>
    _count?: boolean | AgencyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AgencyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AgencyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Agency"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      clients: Prisma.$ClientPayload<ExtArgs>[]
      userInvitations: Prisma.$UserInvitationPayload<ExtArgs>[]
      tokenTransactions: Prisma.$TokenTransactionPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      subscriptionPlan: $Enums.SubscriptionPlan
      tokenBalance: number
      stripeCustomerId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["agency"]>
    composites: {}
  }

  type AgencyGetPayload<S extends boolean | null | undefined | AgencyDefaultArgs> = $Result.GetResult<Prisma.$AgencyPayload, S>

  type AgencyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AgencyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AgencyCountAggregateInputType | true
    }

  export interface AgencyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Agency'], meta: { name: 'Agency' } }
    /**
     * Find zero or one Agency that matches the filter.
     * @param {AgencyFindUniqueArgs} args - Arguments to find a Agency
     * @example
     * // Get one Agency
     * const agency = await prisma.agency.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AgencyFindUniqueArgs>(args: SelectSubset<T, AgencyFindUniqueArgs<ExtArgs>>): Prisma__AgencyClient<$Result.GetResult<Prisma.$AgencyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Agency that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AgencyFindUniqueOrThrowArgs} args - Arguments to find a Agency
     * @example
     * // Get one Agency
     * const agency = await prisma.agency.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AgencyFindUniqueOrThrowArgs>(args: SelectSubset<T, AgencyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AgencyClient<$Result.GetResult<Prisma.$AgencyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Agency that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyFindFirstArgs} args - Arguments to find a Agency
     * @example
     * // Get one Agency
     * const agency = await prisma.agency.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AgencyFindFirstArgs>(args?: SelectSubset<T, AgencyFindFirstArgs<ExtArgs>>): Prisma__AgencyClient<$Result.GetResult<Prisma.$AgencyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Agency that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyFindFirstOrThrowArgs} args - Arguments to find a Agency
     * @example
     * // Get one Agency
     * const agency = await prisma.agency.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AgencyFindFirstOrThrowArgs>(args?: SelectSubset<T, AgencyFindFirstOrThrowArgs<ExtArgs>>): Prisma__AgencyClient<$Result.GetResult<Prisma.$AgencyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Agencies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Agencies
     * const agencies = await prisma.agency.findMany()
     * 
     * // Get first 10 Agencies
     * const agencies = await prisma.agency.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agencyWithIdOnly = await prisma.agency.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AgencyFindManyArgs>(args?: SelectSubset<T, AgencyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgencyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Agency.
     * @param {AgencyCreateArgs} args - Arguments to create a Agency.
     * @example
     * // Create one Agency
     * const Agency = await prisma.agency.create({
     *   data: {
     *     // ... data to create a Agency
     *   }
     * })
     * 
     */
    create<T extends AgencyCreateArgs>(args: SelectSubset<T, AgencyCreateArgs<ExtArgs>>): Prisma__AgencyClient<$Result.GetResult<Prisma.$AgencyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Agencies.
     * @param {AgencyCreateManyArgs} args - Arguments to create many Agencies.
     * @example
     * // Create many Agencies
     * const agency = await prisma.agency.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AgencyCreateManyArgs>(args?: SelectSubset<T, AgencyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Agencies and returns the data saved in the database.
     * @param {AgencyCreateManyAndReturnArgs} args - Arguments to create many Agencies.
     * @example
     * // Create many Agencies
     * const agency = await prisma.agency.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Agencies and only return the `id`
     * const agencyWithIdOnly = await prisma.agency.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AgencyCreateManyAndReturnArgs>(args?: SelectSubset<T, AgencyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgencyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Agency.
     * @param {AgencyDeleteArgs} args - Arguments to delete one Agency.
     * @example
     * // Delete one Agency
     * const Agency = await prisma.agency.delete({
     *   where: {
     *     // ... filter to delete one Agency
     *   }
     * })
     * 
     */
    delete<T extends AgencyDeleteArgs>(args: SelectSubset<T, AgencyDeleteArgs<ExtArgs>>): Prisma__AgencyClient<$Result.GetResult<Prisma.$AgencyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Agency.
     * @param {AgencyUpdateArgs} args - Arguments to update one Agency.
     * @example
     * // Update one Agency
     * const agency = await prisma.agency.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AgencyUpdateArgs>(args: SelectSubset<T, AgencyUpdateArgs<ExtArgs>>): Prisma__AgencyClient<$Result.GetResult<Prisma.$AgencyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Agencies.
     * @param {AgencyDeleteManyArgs} args - Arguments to filter Agencies to delete.
     * @example
     * // Delete a few Agencies
     * const { count } = await prisma.agency.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AgencyDeleteManyArgs>(args?: SelectSubset<T, AgencyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Agencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Agencies
     * const agency = await prisma.agency.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AgencyUpdateManyArgs>(args: SelectSubset<T, AgencyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Agency.
     * @param {AgencyUpsertArgs} args - Arguments to update or create a Agency.
     * @example
     * // Update or create a Agency
     * const agency = await prisma.agency.upsert({
     *   create: {
     *     // ... data to create a Agency
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Agency we want to update
     *   }
     * })
     */
    upsert<T extends AgencyUpsertArgs>(args: SelectSubset<T, AgencyUpsertArgs<ExtArgs>>): Prisma__AgencyClient<$Result.GetResult<Prisma.$AgencyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Agencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyCountArgs} args - Arguments to filter Agencies to count.
     * @example
     * // Count the number of Agencies
     * const count = await prisma.agency.count({
     *   where: {
     *     // ... the filter for the Agencies we want to count
     *   }
     * })
    **/
    count<T extends AgencyCountArgs>(
      args?: Subset<T, AgencyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgencyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Agency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgencyAggregateArgs>(args: Subset<T, AgencyAggregateArgs>): Prisma.PrismaPromise<GetAgencyAggregateType<T>>

    /**
     * Group by Agency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgencyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgencyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgencyGroupByArgs['orderBy'] }
        : { orderBy?: AgencyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgencyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgencyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Agency model
   */
  readonly fields: AgencyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Agency.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgencyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Agency$usersArgs<ExtArgs> = {}>(args?: Subset<T, Agency$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    clients<T extends Agency$clientsArgs<ExtArgs> = {}>(args?: Subset<T, Agency$clientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findMany"> | Null>
    userInvitations<T extends Agency$userInvitationsArgs<ExtArgs> = {}>(args?: Subset<T, Agency$userInvitationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserInvitationPayload<ExtArgs>, T, "findMany"> | Null>
    tokenTransactions<T extends Agency$tokenTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, Agency$tokenTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    auditLogs<T extends Agency$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, Agency$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Agency model
   */ 
  interface AgencyFieldRefs {
    readonly id: FieldRef<"Agency", 'String'>
    readonly name: FieldRef<"Agency", 'String'>
    readonly subscriptionPlan: FieldRef<"Agency", 'SubscriptionPlan'>
    readonly tokenBalance: FieldRef<"Agency", 'Int'>
    readonly stripeCustomerId: FieldRef<"Agency", 'String'>
    readonly createdAt: FieldRef<"Agency", 'DateTime'>
    readonly updatedAt: FieldRef<"Agency", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Agency findUnique
   */
  export type AgencyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgencyInclude<ExtArgs> | null
    /**
     * Filter, which Agency to fetch.
     */
    where: AgencyWhereUniqueInput
  }

  /**
   * Agency findUniqueOrThrow
   */
  export type AgencyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgencyInclude<ExtArgs> | null
    /**
     * Filter, which Agency to fetch.
     */
    where: AgencyWhereUniqueInput
  }

  /**
   * Agency findFirst
   */
  export type AgencyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgencyInclude<ExtArgs> | null
    /**
     * Filter, which Agency to fetch.
     */
    where?: AgencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agencies to fetch.
     */
    orderBy?: AgencyOrderByWithRelationInput | AgencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agencies.
     */
    cursor?: AgencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agencies.
     */
    distinct?: AgencyScalarFieldEnum | AgencyScalarFieldEnum[]
  }

  /**
   * Agency findFirstOrThrow
   */
  export type AgencyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgencyInclude<ExtArgs> | null
    /**
     * Filter, which Agency to fetch.
     */
    where?: AgencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agencies to fetch.
     */
    orderBy?: AgencyOrderByWithRelationInput | AgencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Agencies.
     */
    cursor?: AgencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Agencies.
     */
    distinct?: AgencyScalarFieldEnum | AgencyScalarFieldEnum[]
  }

  /**
   * Agency findMany
   */
  export type AgencyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgencyInclude<ExtArgs> | null
    /**
     * Filter, which Agencies to fetch.
     */
    where?: AgencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Agencies to fetch.
     */
    orderBy?: AgencyOrderByWithRelationInput | AgencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Agencies.
     */
    cursor?: AgencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Agencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Agencies.
     */
    skip?: number
    distinct?: AgencyScalarFieldEnum | AgencyScalarFieldEnum[]
  }

  /**
   * Agency create
   */
  export type AgencyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgencyInclude<ExtArgs> | null
    /**
     * The data needed to create a Agency.
     */
    data: XOR<AgencyCreateInput, AgencyUncheckedCreateInput>
  }

  /**
   * Agency createMany
   */
  export type AgencyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Agencies.
     */
    data: AgencyCreateManyInput | AgencyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Agency createManyAndReturn
   */
  export type AgencyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Agencies.
     */
    data: AgencyCreateManyInput | AgencyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Agency update
   */
  export type AgencyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgencyInclude<ExtArgs> | null
    /**
     * The data needed to update a Agency.
     */
    data: XOR<AgencyUpdateInput, AgencyUncheckedUpdateInput>
    /**
     * Choose, which Agency to update.
     */
    where: AgencyWhereUniqueInput
  }

  /**
   * Agency updateMany
   */
  export type AgencyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Agencies.
     */
    data: XOR<AgencyUpdateManyMutationInput, AgencyUncheckedUpdateManyInput>
    /**
     * Filter which Agencies to update
     */
    where?: AgencyWhereInput
  }

  /**
   * Agency upsert
   */
  export type AgencyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgencyInclude<ExtArgs> | null
    /**
     * The filter to search for the Agency to update in case it exists.
     */
    where: AgencyWhereUniqueInput
    /**
     * In case the Agency found by the `where` argument doesn't exist, create a new Agency with this data.
     */
    create: XOR<AgencyCreateInput, AgencyUncheckedCreateInput>
    /**
     * In case the Agency was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgencyUpdateInput, AgencyUncheckedUpdateInput>
  }

  /**
   * Agency delete
   */
  export type AgencyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgencyInclude<ExtArgs> | null
    /**
     * Filter which Agency to delete.
     */
    where: AgencyWhereUniqueInput
  }

  /**
   * Agency deleteMany
   */
  export type AgencyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Agencies to delete
     */
    where?: AgencyWhereInput
  }

  /**
   * Agency.users
   */
  export type Agency$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Agency.clients
   */
  export type Agency$clientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    where?: ClientWhereInput
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    cursor?: ClientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Agency.userInvitations
   */
  export type Agency$userInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvitation
     */
    select?: UserInvitationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvitationInclude<ExtArgs> | null
    where?: UserInvitationWhereInput
    orderBy?: UserInvitationOrderByWithRelationInput | UserInvitationOrderByWithRelationInput[]
    cursor?: UserInvitationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserInvitationScalarFieldEnum | UserInvitationScalarFieldEnum[]
  }

  /**
   * Agency.tokenTransactions
   */
  export type Agency$tokenTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenTransaction
     */
    select?: TokenTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenTransactionInclude<ExtArgs> | null
    where?: TokenTransactionWhereInput
    orderBy?: TokenTransactionOrderByWithRelationInput | TokenTransactionOrderByWithRelationInput[]
    cursor?: TokenTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TokenTransactionScalarFieldEnum | TokenTransactionScalarFieldEnum[]
  }

  /**
   * Agency.auditLogs
   */
  export type Agency$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * Agency without action
   */
  export type AgencyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Agency
     */
    select?: AgencySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgencyInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    role: $Enums.UserRole | null
    emailVerified: Date | null
    emailVerificationToken: string | null
    passwordResetToken: string | null
    passwordResetExpires: Date | null
    agencyId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    role: $Enums.UserRole | null
    emailVerified: Date | null
    emailVerificationToken: string | null
    passwordResetToken: string | null
    passwordResetExpires: Date | null
    agencyId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    role: number
    emailVerified: number
    emailVerificationToken: number
    passwordResetToken: number
    passwordResetExpires: number
    agencyId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    emailVerified?: true
    emailVerificationToken?: true
    passwordResetToken?: true
    passwordResetExpires?: true
    agencyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    emailVerified?: true
    emailVerificationToken?: true
    passwordResetToken?: true
    passwordResetExpires?: true
    agencyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    emailVerified?: true
    emailVerificationToken?: true
    passwordResetToken?: true
    passwordResetExpires?: true
    agencyId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string
    password: string | null
    role: $Enums.UserRole
    emailVerified: Date | null
    emailVerificationToken: string | null
    passwordResetToken: string | null
    passwordResetExpires: Date | null
    agencyId: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    emailVerified?: boolean
    emailVerificationToken?: boolean
    passwordResetToken?: boolean
    passwordResetExpires?: boolean
    agencyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    agency?: boolean | AgencyDefaultArgs<ExtArgs>
    assignedClients?: boolean | User$assignedClientsArgs<ExtArgs>
    invitationsSent?: boolean | User$invitationsSentArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    tokenTransactions?: boolean | User$tokenTransactionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    emailVerified?: boolean
    emailVerificationToken?: boolean
    passwordResetToken?: boolean
    passwordResetExpires?: boolean
    agencyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    agency?: boolean | AgencyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    emailVerified?: boolean
    emailVerificationToken?: boolean
    passwordResetToken?: boolean
    passwordResetExpires?: boolean
    agencyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agency?: boolean | AgencyDefaultArgs<ExtArgs>
    assignedClients?: boolean | User$assignedClientsArgs<ExtArgs>
    invitationsSent?: boolean | User$invitationsSentArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    tokenTransactions?: boolean | User$tokenTransactionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agency?: boolean | AgencyDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      agency: Prisma.$AgencyPayload<ExtArgs>
      assignedClients: Prisma.$ClientPayload<ExtArgs>[]
      invitationsSent: Prisma.$UserInvitationPayload<ExtArgs>[]
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      tokenTransactions: Prisma.$TokenTransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string
      password: string | null
      role: $Enums.UserRole
      emailVerified: Date | null
      emailVerificationToken: string | null
      passwordResetToken: string | null
      passwordResetExpires: Date | null
      agencyId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agency<T extends AgencyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgencyDefaultArgs<ExtArgs>>): Prisma__AgencyClient<$Result.GetResult<Prisma.$AgencyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    assignedClients<T extends User$assignedClientsArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedClientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findMany"> | Null>
    invitationsSent<T extends User$invitationsSentArgs<ExtArgs> = {}>(args?: Subset<T, User$invitationsSentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserInvitationPayload<ExtArgs>, T, "findMany"> | Null>
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany"> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany"> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany"> | Null>
    tokenTransactions<T extends User$tokenTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$tokenTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly emailVerificationToken: FieldRef<"User", 'String'>
    readonly passwordResetToken: FieldRef<"User", 'String'>
    readonly passwordResetExpires: FieldRef<"User", 'DateTime'>
    readonly agencyId: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.assignedClients
   */
  export type User$assignedClientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    where?: ClientWhereInput
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    cursor?: ClientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * User.invitationsSent
   */
  export type User$invitationsSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvitation
     */
    select?: UserInvitationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvitationInclude<ExtArgs> | null
    where?: UserInvitationWhereInput
    orderBy?: UserInvitationOrderByWithRelationInput | UserInvitationOrderByWithRelationInput[]
    cursor?: UserInvitationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserInvitationScalarFieldEnum | UserInvitationScalarFieldEnum[]
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User.tokenTransactions
   */
  export type User$tokenTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenTransaction
     */
    select?: TokenTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenTransactionInclude<ExtArgs> | null
    where?: TokenTransactionWhereInput
    orderBy?: TokenTransactionOrderByWithRelationInput | TokenTransactionOrderByWithRelationInput[]
    cursor?: TokenTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TokenTransactionScalarFieldEnum | TokenTransactionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserInvitation
   */

  export type AggregateUserInvitation = {
    _count: UserInvitationCountAggregateOutputType | null
    _min: UserInvitationMinAggregateOutputType | null
    _max: UserInvitationMaxAggregateOutputType | null
  }

  export type UserInvitationMinAggregateOutputType = {
    id: string | null
    email: string | null
    role: $Enums.UserRole | null
    token: string | null
    expiresAt: Date | null
    usedAt: Date | null
    senderId: string | null
    agencyId: string | null
    createdAt: Date | null
  }

  export type UserInvitationMaxAggregateOutputType = {
    id: string | null
    email: string | null
    role: $Enums.UserRole | null
    token: string | null
    expiresAt: Date | null
    usedAt: Date | null
    senderId: string | null
    agencyId: string | null
    createdAt: Date | null
  }

  export type UserInvitationCountAggregateOutputType = {
    id: number
    email: number
    role: number
    token: number
    expiresAt: number
    usedAt: number
    senderId: number
    agencyId: number
    clientIds: number
    createdAt: number
    _all: number
  }


  export type UserInvitationMinAggregateInputType = {
    id?: true
    email?: true
    role?: true
    token?: true
    expiresAt?: true
    usedAt?: true
    senderId?: true
    agencyId?: true
    createdAt?: true
  }

  export type UserInvitationMaxAggregateInputType = {
    id?: true
    email?: true
    role?: true
    token?: true
    expiresAt?: true
    usedAt?: true
    senderId?: true
    agencyId?: true
    createdAt?: true
  }

  export type UserInvitationCountAggregateInputType = {
    id?: true
    email?: true
    role?: true
    token?: true
    expiresAt?: true
    usedAt?: true
    senderId?: true
    agencyId?: true
    clientIds?: true
    createdAt?: true
    _all?: true
  }

  export type UserInvitationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserInvitation to aggregate.
     */
    where?: UserInvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInvitations to fetch.
     */
    orderBy?: UserInvitationOrderByWithRelationInput | UserInvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserInvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInvitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserInvitations
    **/
    _count?: true | UserInvitationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserInvitationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserInvitationMaxAggregateInputType
  }

  export type GetUserInvitationAggregateType<T extends UserInvitationAggregateArgs> = {
        [P in keyof T & keyof AggregateUserInvitation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserInvitation[P]>
      : GetScalarType<T[P], AggregateUserInvitation[P]>
  }




  export type UserInvitationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserInvitationWhereInput
    orderBy?: UserInvitationOrderByWithAggregationInput | UserInvitationOrderByWithAggregationInput[]
    by: UserInvitationScalarFieldEnum[] | UserInvitationScalarFieldEnum
    having?: UserInvitationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserInvitationCountAggregateInputType | true
    _min?: UserInvitationMinAggregateInputType
    _max?: UserInvitationMaxAggregateInputType
  }

  export type UserInvitationGroupByOutputType = {
    id: string
    email: string
    role: $Enums.UserRole
    token: string
    expiresAt: Date
    usedAt: Date | null
    senderId: string
    agencyId: string
    clientIds: string[]
    createdAt: Date
    _count: UserInvitationCountAggregateOutputType | null
    _min: UserInvitationMinAggregateOutputType | null
    _max: UserInvitationMaxAggregateOutputType | null
  }

  type GetUserInvitationGroupByPayload<T extends UserInvitationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserInvitationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserInvitationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserInvitationGroupByOutputType[P]>
            : GetScalarType<T[P], UserInvitationGroupByOutputType[P]>
        }
      >
    >


  export type UserInvitationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    role?: boolean
    token?: boolean
    expiresAt?: boolean
    usedAt?: boolean
    senderId?: boolean
    agencyId?: boolean
    clientIds?: boolean
    createdAt?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    agency?: boolean | AgencyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userInvitation"]>

  export type UserInvitationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    role?: boolean
    token?: boolean
    expiresAt?: boolean
    usedAt?: boolean
    senderId?: boolean
    agencyId?: boolean
    clientIds?: boolean
    createdAt?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    agency?: boolean | AgencyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userInvitation"]>

  export type UserInvitationSelectScalar = {
    id?: boolean
    email?: boolean
    role?: boolean
    token?: boolean
    expiresAt?: boolean
    usedAt?: boolean
    senderId?: boolean
    agencyId?: boolean
    clientIds?: boolean
    createdAt?: boolean
  }

  export type UserInvitationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    agency?: boolean | AgencyDefaultArgs<ExtArgs>
  }
  export type UserInvitationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    agency?: boolean | AgencyDefaultArgs<ExtArgs>
  }

  export type $UserInvitationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserInvitation"
    objects: {
      sender: Prisma.$UserPayload<ExtArgs>
      agency: Prisma.$AgencyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      role: $Enums.UserRole
      token: string
      expiresAt: Date
      usedAt: Date | null
      senderId: string
      agencyId: string
      clientIds: string[]
      createdAt: Date
    }, ExtArgs["result"]["userInvitation"]>
    composites: {}
  }

  type UserInvitationGetPayload<S extends boolean | null | undefined | UserInvitationDefaultArgs> = $Result.GetResult<Prisma.$UserInvitationPayload, S>

  type UserInvitationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserInvitationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserInvitationCountAggregateInputType | true
    }

  export interface UserInvitationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserInvitation'], meta: { name: 'UserInvitation' } }
    /**
     * Find zero or one UserInvitation that matches the filter.
     * @param {UserInvitationFindUniqueArgs} args - Arguments to find a UserInvitation
     * @example
     * // Get one UserInvitation
     * const userInvitation = await prisma.userInvitation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserInvitationFindUniqueArgs>(args: SelectSubset<T, UserInvitationFindUniqueArgs<ExtArgs>>): Prisma__UserInvitationClient<$Result.GetResult<Prisma.$UserInvitationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserInvitation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserInvitationFindUniqueOrThrowArgs} args - Arguments to find a UserInvitation
     * @example
     * // Get one UserInvitation
     * const userInvitation = await prisma.userInvitation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserInvitationFindUniqueOrThrowArgs>(args: SelectSubset<T, UserInvitationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserInvitationClient<$Result.GetResult<Prisma.$UserInvitationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserInvitation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInvitationFindFirstArgs} args - Arguments to find a UserInvitation
     * @example
     * // Get one UserInvitation
     * const userInvitation = await prisma.userInvitation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserInvitationFindFirstArgs>(args?: SelectSubset<T, UserInvitationFindFirstArgs<ExtArgs>>): Prisma__UserInvitationClient<$Result.GetResult<Prisma.$UserInvitationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserInvitation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInvitationFindFirstOrThrowArgs} args - Arguments to find a UserInvitation
     * @example
     * // Get one UserInvitation
     * const userInvitation = await prisma.userInvitation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserInvitationFindFirstOrThrowArgs>(args?: SelectSubset<T, UserInvitationFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserInvitationClient<$Result.GetResult<Prisma.$UserInvitationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserInvitations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInvitationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserInvitations
     * const userInvitations = await prisma.userInvitation.findMany()
     * 
     * // Get first 10 UserInvitations
     * const userInvitations = await prisma.userInvitation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userInvitationWithIdOnly = await prisma.userInvitation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserInvitationFindManyArgs>(args?: SelectSubset<T, UserInvitationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserInvitationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserInvitation.
     * @param {UserInvitationCreateArgs} args - Arguments to create a UserInvitation.
     * @example
     * // Create one UserInvitation
     * const UserInvitation = await prisma.userInvitation.create({
     *   data: {
     *     // ... data to create a UserInvitation
     *   }
     * })
     * 
     */
    create<T extends UserInvitationCreateArgs>(args: SelectSubset<T, UserInvitationCreateArgs<ExtArgs>>): Prisma__UserInvitationClient<$Result.GetResult<Prisma.$UserInvitationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserInvitations.
     * @param {UserInvitationCreateManyArgs} args - Arguments to create many UserInvitations.
     * @example
     * // Create many UserInvitations
     * const userInvitation = await prisma.userInvitation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserInvitationCreateManyArgs>(args?: SelectSubset<T, UserInvitationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserInvitations and returns the data saved in the database.
     * @param {UserInvitationCreateManyAndReturnArgs} args - Arguments to create many UserInvitations.
     * @example
     * // Create many UserInvitations
     * const userInvitation = await prisma.userInvitation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserInvitations and only return the `id`
     * const userInvitationWithIdOnly = await prisma.userInvitation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserInvitationCreateManyAndReturnArgs>(args?: SelectSubset<T, UserInvitationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserInvitationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserInvitation.
     * @param {UserInvitationDeleteArgs} args - Arguments to delete one UserInvitation.
     * @example
     * // Delete one UserInvitation
     * const UserInvitation = await prisma.userInvitation.delete({
     *   where: {
     *     // ... filter to delete one UserInvitation
     *   }
     * })
     * 
     */
    delete<T extends UserInvitationDeleteArgs>(args: SelectSubset<T, UserInvitationDeleteArgs<ExtArgs>>): Prisma__UserInvitationClient<$Result.GetResult<Prisma.$UserInvitationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserInvitation.
     * @param {UserInvitationUpdateArgs} args - Arguments to update one UserInvitation.
     * @example
     * // Update one UserInvitation
     * const userInvitation = await prisma.userInvitation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserInvitationUpdateArgs>(args: SelectSubset<T, UserInvitationUpdateArgs<ExtArgs>>): Prisma__UserInvitationClient<$Result.GetResult<Prisma.$UserInvitationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserInvitations.
     * @param {UserInvitationDeleteManyArgs} args - Arguments to filter UserInvitations to delete.
     * @example
     * // Delete a few UserInvitations
     * const { count } = await prisma.userInvitation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserInvitationDeleteManyArgs>(args?: SelectSubset<T, UserInvitationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserInvitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInvitationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserInvitations
     * const userInvitation = await prisma.userInvitation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserInvitationUpdateManyArgs>(args: SelectSubset<T, UserInvitationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserInvitation.
     * @param {UserInvitationUpsertArgs} args - Arguments to update or create a UserInvitation.
     * @example
     * // Update or create a UserInvitation
     * const userInvitation = await prisma.userInvitation.upsert({
     *   create: {
     *     // ... data to create a UserInvitation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserInvitation we want to update
     *   }
     * })
     */
    upsert<T extends UserInvitationUpsertArgs>(args: SelectSubset<T, UserInvitationUpsertArgs<ExtArgs>>): Prisma__UserInvitationClient<$Result.GetResult<Prisma.$UserInvitationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserInvitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInvitationCountArgs} args - Arguments to filter UserInvitations to count.
     * @example
     * // Count the number of UserInvitations
     * const count = await prisma.userInvitation.count({
     *   where: {
     *     // ... the filter for the UserInvitations we want to count
     *   }
     * })
    **/
    count<T extends UserInvitationCountArgs>(
      args?: Subset<T, UserInvitationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserInvitationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserInvitation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInvitationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserInvitationAggregateArgs>(args: Subset<T, UserInvitationAggregateArgs>): Prisma.PrismaPromise<GetUserInvitationAggregateType<T>>

    /**
     * Group by UserInvitation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInvitationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserInvitationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserInvitationGroupByArgs['orderBy'] }
        : { orderBy?: UserInvitationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserInvitationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserInvitationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserInvitation model
   */
  readonly fields: UserInvitationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserInvitation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserInvitationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    agency<T extends AgencyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgencyDefaultArgs<ExtArgs>>): Prisma__AgencyClient<$Result.GetResult<Prisma.$AgencyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserInvitation model
   */ 
  interface UserInvitationFieldRefs {
    readonly id: FieldRef<"UserInvitation", 'String'>
    readonly email: FieldRef<"UserInvitation", 'String'>
    readonly role: FieldRef<"UserInvitation", 'UserRole'>
    readonly token: FieldRef<"UserInvitation", 'String'>
    readonly expiresAt: FieldRef<"UserInvitation", 'DateTime'>
    readonly usedAt: FieldRef<"UserInvitation", 'DateTime'>
    readonly senderId: FieldRef<"UserInvitation", 'String'>
    readonly agencyId: FieldRef<"UserInvitation", 'String'>
    readonly clientIds: FieldRef<"UserInvitation", 'String[]'>
    readonly createdAt: FieldRef<"UserInvitation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserInvitation findUnique
   */
  export type UserInvitationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvitation
     */
    select?: UserInvitationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvitationInclude<ExtArgs> | null
    /**
     * Filter, which UserInvitation to fetch.
     */
    where: UserInvitationWhereUniqueInput
  }

  /**
   * UserInvitation findUniqueOrThrow
   */
  export type UserInvitationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvitation
     */
    select?: UserInvitationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvitationInclude<ExtArgs> | null
    /**
     * Filter, which UserInvitation to fetch.
     */
    where: UserInvitationWhereUniqueInput
  }

  /**
   * UserInvitation findFirst
   */
  export type UserInvitationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvitation
     */
    select?: UserInvitationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvitationInclude<ExtArgs> | null
    /**
     * Filter, which UserInvitation to fetch.
     */
    where?: UserInvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInvitations to fetch.
     */
    orderBy?: UserInvitationOrderByWithRelationInput | UserInvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserInvitations.
     */
    cursor?: UserInvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInvitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserInvitations.
     */
    distinct?: UserInvitationScalarFieldEnum | UserInvitationScalarFieldEnum[]
  }

  /**
   * UserInvitation findFirstOrThrow
   */
  export type UserInvitationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvitation
     */
    select?: UserInvitationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvitationInclude<ExtArgs> | null
    /**
     * Filter, which UserInvitation to fetch.
     */
    where?: UserInvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInvitations to fetch.
     */
    orderBy?: UserInvitationOrderByWithRelationInput | UserInvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserInvitations.
     */
    cursor?: UserInvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInvitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserInvitations.
     */
    distinct?: UserInvitationScalarFieldEnum | UserInvitationScalarFieldEnum[]
  }

  /**
   * UserInvitation findMany
   */
  export type UserInvitationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvitation
     */
    select?: UserInvitationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvitationInclude<ExtArgs> | null
    /**
     * Filter, which UserInvitations to fetch.
     */
    where?: UserInvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInvitations to fetch.
     */
    orderBy?: UserInvitationOrderByWithRelationInput | UserInvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserInvitations.
     */
    cursor?: UserInvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInvitations.
     */
    skip?: number
    distinct?: UserInvitationScalarFieldEnum | UserInvitationScalarFieldEnum[]
  }

  /**
   * UserInvitation create
   */
  export type UserInvitationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvitation
     */
    select?: UserInvitationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvitationInclude<ExtArgs> | null
    /**
     * The data needed to create a UserInvitation.
     */
    data: XOR<UserInvitationCreateInput, UserInvitationUncheckedCreateInput>
  }

  /**
   * UserInvitation createMany
   */
  export type UserInvitationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserInvitations.
     */
    data: UserInvitationCreateManyInput | UserInvitationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserInvitation createManyAndReturn
   */
  export type UserInvitationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvitation
     */
    select?: UserInvitationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserInvitations.
     */
    data: UserInvitationCreateManyInput | UserInvitationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvitationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserInvitation update
   */
  export type UserInvitationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvitation
     */
    select?: UserInvitationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvitationInclude<ExtArgs> | null
    /**
     * The data needed to update a UserInvitation.
     */
    data: XOR<UserInvitationUpdateInput, UserInvitationUncheckedUpdateInput>
    /**
     * Choose, which UserInvitation to update.
     */
    where: UserInvitationWhereUniqueInput
  }

  /**
   * UserInvitation updateMany
   */
  export type UserInvitationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserInvitations.
     */
    data: XOR<UserInvitationUpdateManyMutationInput, UserInvitationUncheckedUpdateManyInput>
    /**
     * Filter which UserInvitations to update
     */
    where?: UserInvitationWhereInput
  }

  /**
   * UserInvitation upsert
   */
  export type UserInvitationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvitation
     */
    select?: UserInvitationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvitationInclude<ExtArgs> | null
    /**
     * The filter to search for the UserInvitation to update in case it exists.
     */
    where: UserInvitationWhereUniqueInput
    /**
     * In case the UserInvitation found by the `where` argument doesn't exist, create a new UserInvitation with this data.
     */
    create: XOR<UserInvitationCreateInput, UserInvitationUncheckedCreateInput>
    /**
     * In case the UserInvitation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserInvitationUpdateInput, UserInvitationUncheckedUpdateInput>
  }

  /**
   * UserInvitation delete
   */
  export type UserInvitationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvitation
     */
    select?: UserInvitationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvitationInclude<ExtArgs> | null
    /**
     * Filter which UserInvitation to delete.
     */
    where: UserInvitationWhereUniqueInput
  }

  /**
   * UserInvitation deleteMany
   */
  export type UserInvitationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserInvitations to delete
     */
    where?: UserInvitationWhereInput
  }

  /**
   * UserInvitation without action
   */
  export type UserInvitationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvitation
     */
    select?: UserInvitationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInvitationInclude<ExtArgs> | null
  }


  /**
   * Model Client
   */

  export type AggregateClient = {
    _count: ClientCountAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  export type ClientMinAggregateOutputType = {
    id: string | null
    agencyId: string | null
    brandName: string | null
    description: string | null
    logoUrl: string | null
    whatsappNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClientMaxAggregateOutputType = {
    id: string | null
    agencyId: string | null
    brandName: string | null
    description: string | null
    logoUrl: string | null
    whatsappNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClientCountAggregateOutputType = {
    id: number
    agencyId: number
    brandName: number
    brandColors: number
    typography: number
    description: number
    logoUrl: number
    whatsappNumber: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ClientMinAggregateInputType = {
    id?: true
    agencyId?: true
    brandName?: true
    description?: true
    logoUrl?: true
    whatsappNumber?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClientMaxAggregateInputType = {
    id?: true
    agencyId?: true
    brandName?: true
    description?: true
    logoUrl?: true
    whatsappNumber?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClientCountAggregateInputType = {
    id?: true
    agencyId?: true
    brandName?: true
    brandColors?: true
    typography?: true
    description?: true
    logoUrl?: true
    whatsappNumber?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ClientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Client to aggregate.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clients
    **/
    _count?: true | ClientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientMaxAggregateInputType
  }

  export type GetClientAggregateType<T extends ClientAggregateArgs> = {
        [P in keyof T & keyof AggregateClient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClient[P]>
      : GetScalarType<T[P], AggregateClient[P]>
  }




  export type ClientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientWhereInput
    orderBy?: ClientOrderByWithAggregationInput | ClientOrderByWithAggregationInput[]
    by: ClientScalarFieldEnum[] | ClientScalarFieldEnum
    having?: ClientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientCountAggregateInputType | true
    _min?: ClientMinAggregateInputType
    _max?: ClientMaxAggregateInputType
  }

  export type ClientGroupByOutputType = {
    id: string
    agencyId: string
    brandName: string
    brandColors: string[]
    typography: JsonValue | null
    description: string | null
    logoUrl: string | null
    whatsappNumber: string | null
    createdAt: Date
    updatedAt: Date
    _count: ClientCountAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  type GetClientGroupByPayload<T extends ClientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientGroupByOutputType[P]>
            : GetScalarType<T[P], ClientGroupByOutputType[P]>
        }
      >
    >


  export type ClientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agencyId?: boolean
    brandName?: boolean
    brandColors?: boolean
    typography?: boolean
    description?: boolean
    logoUrl?: boolean
    whatsappNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    agency?: boolean | AgencyDefaultArgs<ExtArgs>
    assignedUsers?: boolean | Client$assignedUsersArgs<ExtArgs>
    campaigns?: boolean | Client$campaignsArgs<ExtArgs>
    brandAssets?: boolean | Client$brandAssetsArgs<ExtArgs>
    socialAccounts?: boolean | Client$socialAccountsArgs<ExtArgs>
    socialMediaLinks?: boolean | Client$socialMediaLinksArgs<ExtArgs>
    apiKeys?: boolean | Client$apiKeysArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["client"]>

  export type ClientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agencyId?: boolean
    brandName?: boolean
    brandColors?: boolean
    typography?: boolean
    description?: boolean
    logoUrl?: boolean
    whatsappNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    agency?: boolean | AgencyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["client"]>

  export type ClientSelectScalar = {
    id?: boolean
    agencyId?: boolean
    brandName?: boolean
    brandColors?: boolean
    typography?: boolean
    description?: boolean
    logoUrl?: boolean
    whatsappNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ClientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agency?: boolean | AgencyDefaultArgs<ExtArgs>
    assignedUsers?: boolean | Client$assignedUsersArgs<ExtArgs>
    campaigns?: boolean | Client$campaignsArgs<ExtArgs>
    brandAssets?: boolean | Client$brandAssetsArgs<ExtArgs>
    socialAccounts?: boolean | Client$socialAccountsArgs<ExtArgs>
    socialMediaLinks?: boolean | Client$socialMediaLinksArgs<ExtArgs>
    apiKeys?: boolean | Client$apiKeysArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agency?: boolean | AgencyDefaultArgs<ExtArgs>
  }

  export type $ClientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Client"
    objects: {
      agency: Prisma.$AgencyPayload<ExtArgs>
      assignedUsers: Prisma.$UserPayload<ExtArgs>[]
      campaigns: Prisma.$CampaignPayload<ExtArgs>[]
      brandAssets: Prisma.$BrandAssetPayload<ExtArgs>[]
      socialAccounts: Prisma.$SocialAccountPayload<ExtArgs>[]
      socialMediaLinks: Prisma.$SocialMediaLinkPayload<ExtArgs>[]
      apiKeys: Prisma.$ApiKeyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      agencyId: string
      brandName: string
      brandColors: string[]
      typography: Prisma.JsonValue | null
      description: string | null
      logoUrl: string | null
      whatsappNumber: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["client"]>
    composites: {}
  }

  type ClientGetPayload<S extends boolean | null | undefined | ClientDefaultArgs> = $Result.GetResult<Prisma.$ClientPayload, S>

  type ClientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClientFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClientCountAggregateInputType | true
    }

  export interface ClientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Client'], meta: { name: 'Client' } }
    /**
     * Find zero or one Client that matches the filter.
     * @param {ClientFindUniqueArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClientFindUniqueArgs>(args: SelectSubset<T, ClientFindUniqueArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Client that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClientFindUniqueOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClientFindUniqueOrThrowArgs>(args: SelectSubset<T, ClientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Client that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClientFindFirstArgs>(args?: SelectSubset<T, ClientFindFirstArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Client that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClientFindFirstOrThrowArgs>(args?: SelectSubset<T, ClientFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.client.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.client.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientWithIdOnly = await prisma.client.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClientFindManyArgs>(args?: SelectSubset<T, ClientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Client.
     * @param {ClientCreateArgs} args - Arguments to create a Client.
     * @example
     * // Create one Client
     * const Client = await prisma.client.create({
     *   data: {
     *     // ... data to create a Client
     *   }
     * })
     * 
     */
    create<T extends ClientCreateArgs>(args: SelectSubset<T, ClientCreateArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Clients.
     * @param {ClientCreateManyArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const client = await prisma.client.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClientCreateManyArgs>(args?: SelectSubset<T, ClientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Clients and returns the data saved in the database.
     * @param {ClientCreateManyAndReturnArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const client = await prisma.client.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Clients and only return the `id`
     * const clientWithIdOnly = await prisma.client.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClientCreateManyAndReturnArgs>(args?: SelectSubset<T, ClientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Client.
     * @param {ClientDeleteArgs} args - Arguments to delete one Client.
     * @example
     * // Delete one Client
     * const Client = await prisma.client.delete({
     *   where: {
     *     // ... filter to delete one Client
     *   }
     * })
     * 
     */
    delete<T extends ClientDeleteArgs>(args: SelectSubset<T, ClientDeleteArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Client.
     * @param {ClientUpdateArgs} args - Arguments to update one Client.
     * @example
     * // Update one Client
     * const client = await prisma.client.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClientUpdateArgs>(args: SelectSubset<T, ClientUpdateArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Clients.
     * @param {ClientDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.client.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClientDeleteManyArgs>(args?: SelectSubset<T, ClientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClientUpdateManyArgs>(args: SelectSubset<T, ClientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Client.
     * @param {ClientUpsertArgs} args - Arguments to update or create a Client.
     * @example
     * // Update or create a Client
     * const client = await prisma.client.upsert({
     *   create: {
     *     // ... data to create a Client
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Client we want to update
     *   }
     * })
     */
    upsert<T extends ClientUpsertArgs>(args: SelectSubset<T, ClientUpsertArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.client.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends ClientCountArgs>(
      args?: Subset<T, ClientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientAggregateArgs>(args: Subset<T, ClientAggregateArgs>): Prisma.PrismaPromise<GetClientAggregateType<T>>

    /**
     * Group by Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientGroupByArgs['orderBy'] }
        : { orderBy?: ClientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Client model
   */
  readonly fields: ClientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Client.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agency<T extends AgencyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgencyDefaultArgs<ExtArgs>>): Prisma__AgencyClient<$Result.GetResult<Prisma.$AgencyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    assignedUsers<T extends Client$assignedUsersArgs<ExtArgs> = {}>(args?: Subset<T, Client$assignedUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    campaigns<T extends Client$campaignsArgs<ExtArgs> = {}>(args?: Subset<T, Client$campaignsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findMany"> | Null>
    brandAssets<T extends Client$brandAssetsArgs<ExtArgs> = {}>(args?: Subset<T, Client$brandAssetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandAssetPayload<ExtArgs>, T, "findMany"> | Null>
    socialAccounts<T extends Client$socialAccountsArgs<ExtArgs> = {}>(args?: Subset<T, Client$socialAccountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "findMany"> | Null>
    socialMediaLinks<T extends Client$socialMediaLinksArgs<ExtArgs> = {}>(args?: Subset<T, Client$socialMediaLinksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SocialMediaLinkPayload<ExtArgs>, T, "findMany"> | Null>
    apiKeys<T extends Client$apiKeysArgs<ExtArgs> = {}>(args?: Subset<T, Client$apiKeysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Client model
   */ 
  interface ClientFieldRefs {
    readonly id: FieldRef<"Client", 'String'>
    readonly agencyId: FieldRef<"Client", 'String'>
    readonly brandName: FieldRef<"Client", 'String'>
    readonly brandColors: FieldRef<"Client", 'String[]'>
    readonly typography: FieldRef<"Client", 'Json'>
    readonly description: FieldRef<"Client", 'String'>
    readonly logoUrl: FieldRef<"Client", 'String'>
    readonly whatsappNumber: FieldRef<"Client", 'String'>
    readonly createdAt: FieldRef<"Client", 'DateTime'>
    readonly updatedAt: FieldRef<"Client", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Client findUnique
   */
  export type ClientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client findUniqueOrThrow
   */
  export type ClientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client findFirst
   */
  export type ClientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client findFirstOrThrow
   */
  export type ClientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client findMany
   */
  export type ClientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Clients to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client create
   */
  export type ClientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to create a Client.
     */
    data: XOR<ClientCreateInput, ClientUncheckedCreateInput>
  }

  /**
   * Client createMany
   */
  export type ClientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clients.
     */
    data: ClientCreateManyInput | ClientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Client createManyAndReturn
   */
  export type ClientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Clients.
     */
    data: ClientCreateManyInput | ClientCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Client update
   */
  export type ClientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to update a Client.
     */
    data: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
    /**
     * Choose, which Client to update.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client updateMany
   */
  export type ClientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clients.
     */
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     */
    where?: ClientWhereInput
  }

  /**
   * Client upsert
   */
  export type ClientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The filter to search for the Client to update in case it exists.
     */
    where: ClientWhereUniqueInput
    /**
     * In case the Client found by the `where` argument doesn't exist, create a new Client with this data.
     */
    create: XOR<ClientCreateInput, ClientUncheckedCreateInput>
    /**
     * In case the Client was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
  }

  /**
   * Client delete
   */
  export type ClientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter which Client to delete.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client deleteMany
   */
  export type ClientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clients to delete
     */
    where?: ClientWhereInput
  }

  /**
   * Client.assignedUsers
   */
  export type Client$assignedUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Client.campaigns
   */
  export type Client$campaignsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    where?: CampaignWhereInput
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    cursor?: CampaignWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * Client.brandAssets
   */
  export type Client$brandAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandAsset
     */
    select?: BrandAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandAssetInclude<ExtArgs> | null
    where?: BrandAssetWhereInput
    orderBy?: BrandAssetOrderByWithRelationInput | BrandAssetOrderByWithRelationInput[]
    cursor?: BrandAssetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BrandAssetScalarFieldEnum | BrandAssetScalarFieldEnum[]
  }

  /**
   * Client.socialAccounts
   */
  export type Client$socialAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialAccountInclude<ExtArgs> | null
    where?: SocialAccountWhereInput
    orderBy?: SocialAccountOrderByWithRelationInput | SocialAccountOrderByWithRelationInput[]
    cursor?: SocialAccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SocialAccountScalarFieldEnum | SocialAccountScalarFieldEnum[]
  }

  /**
   * Client.socialMediaLinks
   */
  export type Client$socialMediaLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMediaLink
     */
    select?: SocialMediaLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialMediaLinkInclude<ExtArgs> | null
    where?: SocialMediaLinkWhereInput
    orderBy?: SocialMediaLinkOrderByWithRelationInput | SocialMediaLinkOrderByWithRelationInput[]
    cursor?: SocialMediaLinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SocialMediaLinkScalarFieldEnum | SocialMediaLinkScalarFieldEnum[]
  }

  /**
   * Client.apiKeys
   */
  export type Client$apiKeysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    where?: ApiKeyWhereInput
    orderBy?: ApiKeyOrderByWithRelationInput | ApiKeyOrderByWithRelationInput[]
    cursor?: ApiKeyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApiKeyScalarFieldEnum | ApiKeyScalarFieldEnum[]
  }

  /**
   * Client without action
   */
  export type ClientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
  }


  /**
   * Model SocialMediaLink
   */

  export type AggregateSocialMediaLink = {
    _count: SocialMediaLinkCountAggregateOutputType | null
    _min: SocialMediaLinkMinAggregateOutputType | null
    _max: SocialMediaLinkMaxAggregateOutputType | null
  }

  export type SocialMediaLinkMinAggregateOutputType = {
    id: string | null
    clientId: string | null
    platform: string | null
    url: string | null
    username: string | null
  }

  export type SocialMediaLinkMaxAggregateOutputType = {
    id: string | null
    clientId: string | null
    platform: string | null
    url: string | null
    username: string | null
  }

  export type SocialMediaLinkCountAggregateOutputType = {
    id: number
    clientId: number
    platform: number
    url: number
    username: number
    _all: number
  }


  export type SocialMediaLinkMinAggregateInputType = {
    id?: true
    clientId?: true
    platform?: true
    url?: true
    username?: true
  }

  export type SocialMediaLinkMaxAggregateInputType = {
    id?: true
    clientId?: true
    platform?: true
    url?: true
    username?: true
  }

  export type SocialMediaLinkCountAggregateInputType = {
    id?: true
    clientId?: true
    platform?: true
    url?: true
    username?: true
    _all?: true
  }

  export type SocialMediaLinkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SocialMediaLink to aggregate.
     */
    where?: SocialMediaLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialMediaLinks to fetch.
     */
    orderBy?: SocialMediaLinkOrderByWithRelationInput | SocialMediaLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SocialMediaLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialMediaLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialMediaLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SocialMediaLinks
    **/
    _count?: true | SocialMediaLinkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SocialMediaLinkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SocialMediaLinkMaxAggregateInputType
  }

  export type GetSocialMediaLinkAggregateType<T extends SocialMediaLinkAggregateArgs> = {
        [P in keyof T & keyof AggregateSocialMediaLink]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSocialMediaLink[P]>
      : GetScalarType<T[P], AggregateSocialMediaLink[P]>
  }




  export type SocialMediaLinkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SocialMediaLinkWhereInput
    orderBy?: SocialMediaLinkOrderByWithAggregationInput | SocialMediaLinkOrderByWithAggregationInput[]
    by: SocialMediaLinkScalarFieldEnum[] | SocialMediaLinkScalarFieldEnum
    having?: SocialMediaLinkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SocialMediaLinkCountAggregateInputType | true
    _min?: SocialMediaLinkMinAggregateInputType
    _max?: SocialMediaLinkMaxAggregateInputType
  }

  export type SocialMediaLinkGroupByOutputType = {
    id: string
    clientId: string
    platform: string
    url: string
    username: string | null
    _count: SocialMediaLinkCountAggregateOutputType | null
    _min: SocialMediaLinkMinAggregateOutputType | null
    _max: SocialMediaLinkMaxAggregateOutputType | null
  }

  type GetSocialMediaLinkGroupByPayload<T extends SocialMediaLinkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SocialMediaLinkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SocialMediaLinkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SocialMediaLinkGroupByOutputType[P]>
            : GetScalarType<T[P], SocialMediaLinkGroupByOutputType[P]>
        }
      >
    >


  export type SocialMediaLinkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    platform?: boolean
    url?: boolean
    username?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["socialMediaLink"]>

  export type SocialMediaLinkSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    platform?: boolean
    url?: boolean
    username?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["socialMediaLink"]>

  export type SocialMediaLinkSelectScalar = {
    id?: boolean
    clientId?: boolean
    platform?: boolean
    url?: boolean
    username?: boolean
  }

  export type SocialMediaLinkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type SocialMediaLinkIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }

  export type $SocialMediaLinkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SocialMediaLink"
    objects: {
      client: Prisma.$ClientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clientId: string
      platform: string
      url: string
      username: string | null
    }, ExtArgs["result"]["socialMediaLink"]>
    composites: {}
  }

  type SocialMediaLinkGetPayload<S extends boolean | null | undefined | SocialMediaLinkDefaultArgs> = $Result.GetResult<Prisma.$SocialMediaLinkPayload, S>

  type SocialMediaLinkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SocialMediaLinkFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SocialMediaLinkCountAggregateInputType | true
    }

  export interface SocialMediaLinkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SocialMediaLink'], meta: { name: 'SocialMediaLink' } }
    /**
     * Find zero or one SocialMediaLink that matches the filter.
     * @param {SocialMediaLinkFindUniqueArgs} args - Arguments to find a SocialMediaLink
     * @example
     * // Get one SocialMediaLink
     * const socialMediaLink = await prisma.socialMediaLink.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SocialMediaLinkFindUniqueArgs>(args: SelectSubset<T, SocialMediaLinkFindUniqueArgs<ExtArgs>>): Prisma__SocialMediaLinkClient<$Result.GetResult<Prisma.$SocialMediaLinkPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SocialMediaLink that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SocialMediaLinkFindUniqueOrThrowArgs} args - Arguments to find a SocialMediaLink
     * @example
     * // Get one SocialMediaLink
     * const socialMediaLink = await prisma.socialMediaLink.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SocialMediaLinkFindUniqueOrThrowArgs>(args: SelectSubset<T, SocialMediaLinkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SocialMediaLinkClient<$Result.GetResult<Prisma.$SocialMediaLinkPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SocialMediaLink that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialMediaLinkFindFirstArgs} args - Arguments to find a SocialMediaLink
     * @example
     * // Get one SocialMediaLink
     * const socialMediaLink = await prisma.socialMediaLink.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SocialMediaLinkFindFirstArgs>(args?: SelectSubset<T, SocialMediaLinkFindFirstArgs<ExtArgs>>): Prisma__SocialMediaLinkClient<$Result.GetResult<Prisma.$SocialMediaLinkPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SocialMediaLink that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialMediaLinkFindFirstOrThrowArgs} args - Arguments to find a SocialMediaLink
     * @example
     * // Get one SocialMediaLink
     * const socialMediaLink = await prisma.socialMediaLink.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SocialMediaLinkFindFirstOrThrowArgs>(args?: SelectSubset<T, SocialMediaLinkFindFirstOrThrowArgs<ExtArgs>>): Prisma__SocialMediaLinkClient<$Result.GetResult<Prisma.$SocialMediaLinkPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SocialMediaLinks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialMediaLinkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SocialMediaLinks
     * const socialMediaLinks = await prisma.socialMediaLink.findMany()
     * 
     * // Get first 10 SocialMediaLinks
     * const socialMediaLinks = await prisma.socialMediaLink.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const socialMediaLinkWithIdOnly = await prisma.socialMediaLink.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SocialMediaLinkFindManyArgs>(args?: SelectSubset<T, SocialMediaLinkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SocialMediaLinkPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SocialMediaLink.
     * @param {SocialMediaLinkCreateArgs} args - Arguments to create a SocialMediaLink.
     * @example
     * // Create one SocialMediaLink
     * const SocialMediaLink = await prisma.socialMediaLink.create({
     *   data: {
     *     // ... data to create a SocialMediaLink
     *   }
     * })
     * 
     */
    create<T extends SocialMediaLinkCreateArgs>(args: SelectSubset<T, SocialMediaLinkCreateArgs<ExtArgs>>): Prisma__SocialMediaLinkClient<$Result.GetResult<Prisma.$SocialMediaLinkPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SocialMediaLinks.
     * @param {SocialMediaLinkCreateManyArgs} args - Arguments to create many SocialMediaLinks.
     * @example
     * // Create many SocialMediaLinks
     * const socialMediaLink = await prisma.socialMediaLink.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SocialMediaLinkCreateManyArgs>(args?: SelectSubset<T, SocialMediaLinkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SocialMediaLinks and returns the data saved in the database.
     * @param {SocialMediaLinkCreateManyAndReturnArgs} args - Arguments to create many SocialMediaLinks.
     * @example
     * // Create many SocialMediaLinks
     * const socialMediaLink = await prisma.socialMediaLink.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SocialMediaLinks and only return the `id`
     * const socialMediaLinkWithIdOnly = await prisma.socialMediaLink.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SocialMediaLinkCreateManyAndReturnArgs>(args?: SelectSubset<T, SocialMediaLinkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SocialMediaLinkPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SocialMediaLink.
     * @param {SocialMediaLinkDeleteArgs} args - Arguments to delete one SocialMediaLink.
     * @example
     * // Delete one SocialMediaLink
     * const SocialMediaLink = await prisma.socialMediaLink.delete({
     *   where: {
     *     // ... filter to delete one SocialMediaLink
     *   }
     * })
     * 
     */
    delete<T extends SocialMediaLinkDeleteArgs>(args: SelectSubset<T, SocialMediaLinkDeleteArgs<ExtArgs>>): Prisma__SocialMediaLinkClient<$Result.GetResult<Prisma.$SocialMediaLinkPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SocialMediaLink.
     * @param {SocialMediaLinkUpdateArgs} args - Arguments to update one SocialMediaLink.
     * @example
     * // Update one SocialMediaLink
     * const socialMediaLink = await prisma.socialMediaLink.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SocialMediaLinkUpdateArgs>(args: SelectSubset<T, SocialMediaLinkUpdateArgs<ExtArgs>>): Prisma__SocialMediaLinkClient<$Result.GetResult<Prisma.$SocialMediaLinkPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SocialMediaLinks.
     * @param {SocialMediaLinkDeleteManyArgs} args - Arguments to filter SocialMediaLinks to delete.
     * @example
     * // Delete a few SocialMediaLinks
     * const { count } = await prisma.socialMediaLink.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SocialMediaLinkDeleteManyArgs>(args?: SelectSubset<T, SocialMediaLinkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SocialMediaLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialMediaLinkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SocialMediaLinks
     * const socialMediaLink = await prisma.socialMediaLink.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SocialMediaLinkUpdateManyArgs>(args: SelectSubset<T, SocialMediaLinkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SocialMediaLink.
     * @param {SocialMediaLinkUpsertArgs} args - Arguments to update or create a SocialMediaLink.
     * @example
     * // Update or create a SocialMediaLink
     * const socialMediaLink = await prisma.socialMediaLink.upsert({
     *   create: {
     *     // ... data to create a SocialMediaLink
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SocialMediaLink we want to update
     *   }
     * })
     */
    upsert<T extends SocialMediaLinkUpsertArgs>(args: SelectSubset<T, SocialMediaLinkUpsertArgs<ExtArgs>>): Prisma__SocialMediaLinkClient<$Result.GetResult<Prisma.$SocialMediaLinkPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SocialMediaLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialMediaLinkCountArgs} args - Arguments to filter SocialMediaLinks to count.
     * @example
     * // Count the number of SocialMediaLinks
     * const count = await prisma.socialMediaLink.count({
     *   where: {
     *     // ... the filter for the SocialMediaLinks we want to count
     *   }
     * })
    **/
    count<T extends SocialMediaLinkCountArgs>(
      args?: Subset<T, SocialMediaLinkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SocialMediaLinkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SocialMediaLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialMediaLinkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SocialMediaLinkAggregateArgs>(args: Subset<T, SocialMediaLinkAggregateArgs>): Prisma.PrismaPromise<GetSocialMediaLinkAggregateType<T>>

    /**
     * Group by SocialMediaLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialMediaLinkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SocialMediaLinkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SocialMediaLinkGroupByArgs['orderBy'] }
        : { orderBy?: SocialMediaLinkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SocialMediaLinkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSocialMediaLinkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SocialMediaLink model
   */
  readonly fields: SocialMediaLinkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SocialMediaLink.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SocialMediaLinkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SocialMediaLink model
   */ 
  interface SocialMediaLinkFieldRefs {
    readonly id: FieldRef<"SocialMediaLink", 'String'>
    readonly clientId: FieldRef<"SocialMediaLink", 'String'>
    readonly platform: FieldRef<"SocialMediaLink", 'String'>
    readonly url: FieldRef<"SocialMediaLink", 'String'>
    readonly username: FieldRef<"SocialMediaLink", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SocialMediaLink findUnique
   */
  export type SocialMediaLinkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMediaLink
     */
    select?: SocialMediaLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialMediaLinkInclude<ExtArgs> | null
    /**
     * Filter, which SocialMediaLink to fetch.
     */
    where: SocialMediaLinkWhereUniqueInput
  }

  /**
   * SocialMediaLink findUniqueOrThrow
   */
  export type SocialMediaLinkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMediaLink
     */
    select?: SocialMediaLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialMediaLinkInclude<ExtArgs> | null
    /**
     * Filter, which SocialMediaLink to fetch.
     */
    where: SocialMediaLinkWhereUniqueInput
  }

  /**
   * SocialMediaLink findFirst
   */
  export type SocialMediaLinkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMediaLink
     */
    select?: SocialMediaLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialMediaLinkInclude<ExtArgs> | null
    /**
     * Filter, which SocialMediaLink to fetch.
     */
    where?: SocialMediaLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialMediaLinks to fetch.
     */
    orderBy?: SocialMediaLinkOrderByWithRelationInput | SocialMediaLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SocialMediaLinks.
     */
    cursor?: SocialMediaLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialMediaLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialMediaLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SocialMediaLinks.
     */
    distinct?: SocialMediaLinkScalarFieldEnum | SocialMediaLinkScalarFieldEnum[]
  }

  /**
   * SocialMediaLink findFirstOrThrow
   */
  export type SocialMediaLinkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMediaLink
     */
    select?: SocialMediaLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialMediaLinkInclude<ExtArgs> | null
    /**
     * Filter, which SocialMediaLink to fetch.
     */
    where?: SocialMediaLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialMediaLinks to fetch.
     */
    orderBy?: SocialMediaLinkOrderByWithRelationInput | SocialMediaLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SocialMediaLinks.
     */
    cursor?: SocialMediaLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialMediaLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialMediaLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SocialMediaLinks.
     */
    distinct?: SocialMediaLinkScalarFieldEnum | SocialMediaLinkScalarFieldEnum[]
  }

  /**
   * SocialMediaLink findMany
   */
  export type SocialMediaLinkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMediaLink
     */
    select?: SocialMediaLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialMediaLinkInclude<ExtArgs> | null
    /**
     * Filter, which SocialMediaLinks to fetch.
     */
    where?: SocialMediaLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialMediaLinks to fetch.
     */
    orderBy?: SocialMediaLinkOrderByWithRelationInput | SocialMediaLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SocialMediaLinks.
     */
    cursor?: SocialMediaLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialMediaLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialMediaLinks.
     */
    skip?: number
    distinct?: SocialMediaLinkScalarFieldEnum | SocialMediaLinkScalarFieldEnum[]
  }

  /**
   * SocialMediaLink create
   */
  export type SocialMediaLinkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMediaLink
     */
    select?: SocialMediaLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialMediaLinkInclude<ExtArgs> | null
    /**
     * The data needed to create a SocialMediaLink.
     */
    data: XOR<SocialMediaLinkCreateInput, SocialMediaLinkUncheckedCreateInput>
  }

  /**
   * SocialMediaLink createMany
   */
  export type SocialMediaLinkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SocialMediaLinks.
     */
    data: SocialMediaLinkCreateManyInput | SocialMediaLinkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SocialMediaLink createManyAndReturn
   */
  export type SocialMediaLinkCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMediaLink
     */
    select?: SocialMediaLinkSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SocialMediaLinks.
     */
    data: SocialMediaLinkCreateManyInput | SocialMediaLinkCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialMediaLinkIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SocialMediaLink update
   */
  export type SocialMediaLinkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMediaLink
     */
    select?: SocialMediaLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialMediaLinkInclude<ExtArgs> | null
    /**
     * The data needed to update a SocialMediaLink.
     */
    data: XOR<SocialMediaLinkUpdateInput, SocialMediaLinkUncheckedUpdateInput>
    /**
     * Choose, which SocialMediaLink to update.
     */
    where: SocialMediaLinkWhereUniqueInput
  }

  /**
   * SocialMediaLink updateMany
   */
  export type SocialMediaLinkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SocialMediaLinks.
     */
    data: XOR<SocialMediaLinkUpdateManyMutationInput, SocialMediaLinkUncheckedUpdateManyInput>
    /**
     * Filter which SocialMediaLinks to update
     */
    where?: SocialMediaLinkWhereInput
  }

  /**
   * SocialMediaLink upsert
   */
  export type SocialMediaLinkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMediaLink
     */
    select?: SocialMediaLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialMediaLinkInclude<ExtArgs> | null
    /**
     * The filter to search for the SocialMediaLink to update in case it exists.
     */
    where: SocialMediaLinkWhereUniqueInput
    /**
     * In case the SocialMediaLink found by the `where` argument doesn't exist, create a new SocialMediaLink with this data.
     */
    create: XOR<SocialMediaLinkCreateInput, SocialMediaLinkUncheckedCreateInput>
    /**
     * In case the SocialMediaLink was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SocialMediaLinkUpdateInput, SocialMediaLinkUncheckedUpdateInput>
  }

  /**
   * SocialMediaLink delete
   */
  export type SocialMediaLinkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMediaLink
     */
    select?: SocialMediaLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialMediaLinkInclude<ExtArgs> | null
    /**
     * Filter which SocialMediaLink to delete.
     */
    where: SocialMediaLinkWhereUniqueInput
  }

  /**
   * SocialMediaLink deleteMany
   */
  export type SocialMediaLinkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SocialMediaLinks to delete
     */
    where?: SocialMediaLinkWhereInput
  }

  /**
   * SocialMediaLink without action
   */
  export type SocialMediaLinkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialMediaLink
     */
    select?: SocialMediaLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialMediaLinkInclude<ExtArgs> | null
  }


  /**
   * Model BrandAsset
   */

  export type AggregateBrandAsset = {
    _count: BrandAssetCountAggregateOutputType | null
    _min: BrandAssetMinAggregateOutputType | null
    _max: BrandAssetMaxAggregateOutputType | null
  }

  export type BrandAssetMinAggregateOutputType = {
    id: string | null
    clientId: string | null
    type: $Enums.AssetType | null
    name: string | null
    url: string | null
    createdAt: Date | null
  }

  export type BrandAssetMaxAggregateOutputType = {
    id: string | null
    clientId: string | null
    type: $Enums.AssetType | null
    name: string | null
    url: string | null
    createdAt: Date | null
  }

  export type BrandAssetCountAggregateOutputType = {
    id: number
    clientId: number
    type: number
    name: number
    url: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type BrandAssetMinAggregateInputType = {
    id?: true
    clientId?: true
    type?: true
    name?: true
    url?: true
    createdAt?: true
  }

  export type BrandAssetMaxAggregateInputType = {
    id?: true
    clientId?: true
    type?: true
    name?: true
    url?: true
    createdAt?: true
  }

  export type BrandAssetCountAggregateInputType = {
    id?: true
    clientId?: true
    type?: true
    name?: true
    url?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type BrandAssetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BrandAsset to aggregate.
     */
    where?: BrandAssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BrandAssets to fetch.
     */
    orderBy?: BrandAssetOrderByWithRelationInput | BrandAssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BrandAssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BrandAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BrandAssets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BrandAssets
    **/
    _count?: true | BrandAssetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BrandAssetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BrandAssetMaxAggregateInputType
  }

  export type GetBrandAssetAggregateType<T extends BrandAssetAggregateArgs> = {
        [P in keyof T & keyof AggregateBrandAsset]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBrandAsset[P]>
      : GetScalarType<T[P], AggregateBrandAsset[P]>
  }




  export type BrandAssetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrandAssetWhereInput
    orderBy?: BrandAssetOrderByWithAggregationInput | BrandAssetOrderByWithAggregationInput[]
    by: BrandAssetScalarFieldEnum[] | BrandAssetScalarFieldEnum
    having?: BrandAssetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BrandAssetCountAggregateInputType | true
    _min?: BrandAssetMinAggregateInputType
    _max?: BrandAssetMaxAggregateInputType
  }

  export type BrandAssetGroupByOutputType = {
    id: string
    clientId: string
    type: $Enums.AssetType
    name: string
    url: string
    metadata: JsonValue | null
    createdAt: Date
    _count: BrandAssetCountAggregateOutputType | null
    _min: BrandAssetMinAggregateOutputType | null
    _max: BrandAssetMaxAggregateOutputType | null
  }

  type GetBrandAssetGroupByPayload<T extends BrandAssetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BrandAssetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BrandAssetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BrandAssetGroupByOutputType[P]>
            : GetScalarType<T[P], BrandAssetGroupByOutputType[P]>
        }
      >
    >


  export type BrandAssetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    type?: boolean
    name?: boolean
    url?: boolean
    metadata?: boolean
    createdAt?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["brandAsset"]>

  export type BrandAssetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    type?: boolean
    name?: boolean
    url?: boolean
    metadata?: boolean
    createdAt?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["brandAsset"]>

  export type BrandAssetSelectScalar = {
    id?: boolean
    clientId?: boolean
    type?: boolean
    name?: boolean
    url?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type BrandAssetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type BrandAssetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }

  export type $BrandAssetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BrandAsset"
    objects: {
      client: Prisma.$ClientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clientId: string
      type: $Enums.AssetType
      name: string
      url: string
      metadata: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["brandAsset"]>
    composites: {}
  }

  type BrandAssetGetPayload<S extends boolean | null | undefined | BrandAssetDefaultArgs> = $Result.GetResult<Prisma.$BrandAssetPayload, S>

  type BrandAssetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BrandAssetFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BrandAssetCountAggregateInputType | true
    }

  export interface BrandAssetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BrandAsset'], meta: { name: 'BrandAsset' } }
    /**
     * Find zero or one BrandAsset that matches the filter.
     * @param {BrandAssetFindUniqueArgs} args - Arguments to find a BrandAsset
     * @example
     * // Get one BrandAsset
     * const brandAsset = await prisma.brandAsset.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BrandAssetFindUniqueArgs>(args: SelectSubset<T, BrandAssetFindUniqueArgs<ExtArgs>>): Prisma__BrandAssetClient<$Result.GetResult<Prisma.$BrandAssetPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BrandAsset that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BrandAssetFindUniqueOrThrowArgs} args - Arguments to find a BrandAsset
     * @example
     * // Get one BrandAsset
     * const brandAsset = await prisma.brandAsset.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BrandAssetFindUniqueOrThrowArgs>(args: SelectSubset<T, BrandAssetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BrandAssetClient<$Result.GetResult<Prisma.$BrandAssetPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BrandAsset that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandAssetFindFirstArgs} args - Arguments to find a BrandAsset
     * @example
     * // Get one BrandAsset
     * const brandAsset = await prisma.brandAsset.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BrandAssetFindFirstArgs>(args?: SelectSubset<T, BrandAssetFindFirstArgs<ExtArgs>>): Prisma__BrandAssetClient<$Result.GetResult<Prisma.$BrandAssetPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BrandAsset that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandAssetFindFirstOrThrowArgs} args - Arguments to find a BrandAsset
     * @example
     * // Get one BrandAsset
     * const brandAsset = await prisma.brandAsset.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BrandAssetFindFirstOrThrowArgs>(args?: SelectSubset<T, BrandAssetFindFirstOrThrowArgs<ExtArgs>>): Prisma__BrandAssetClient<$Result.GetResult<Prisma.$BrandAssetPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BrandAssets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandAssetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BrandAssets
     * const brandAssets = await prisma.brandAsset.findMany()
     * 
     * // Get first 10 BrandAssets
     * const brandAssets = await prisma.brandAsset.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const brandAssetWithIdOnly = await prisma.brandAsset.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BrandAssetFindManyArgs>(args?: SelectSubset<T, BrandAssetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandAssetPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BrandAsset.
     * @param {BrandAssetCreateArgs} args - Arguments to create a BrandAsset.
     * @example
     * // Create one BrandAsset
     * const BrandAsset = await prisma.brandAsset.create({
     *   data: {
     *     // ... data to create a BrandAsset
     *   }
     * })
     * 
     */
    create<T extends BrandAssetCreateArgs>(args: SelectSubset<T, BrandAssetCreateArgs<ExtArgs>>): Prisma__BrandAssetClient<$Result.GetResult<Prisma.$BrandAssetPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BrandAssets.
     * @param {BrandAssetCreateManyArgs} args - Arguments to create many BrandAssets.
     * @example
     * // Create many BrandAssets
     * const brandAsset = await prisma.brandAsset.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BrandAssetCreateManyArgs>(args?: SelectSubset<T, BrandAssetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BrandAssets and returns the data saved in the database.
     * @param {BrandAssetCreateManyAndReturnArgs} args - Arguments to create many BrandAssets.
     * @example
     * // Create many BrandAssets
     * const brandAsset = await prisma.brandAsset.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BrandAssets and only return the `id`
     * const brandAssetWithIdOnly = await prisma.brandAsset.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BrandAssetCreateManyAndReturnArgs>(args?: SelectSubset<T, BrandAssetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandAssetPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BrandAsset.
     * @param {BrandAssetDeleteArgs} args - Arguments to delete one BrandAsset.
     * @example
     * // Delete one BrandAsset
     * const BrandAsset = await prisma.brandAsset.delete({
     *   where: {
     *     // ... filter to delete one BrandAsset
     *   }
     * })
     * 
     */
    delete<T extends BrandAssetDeleteArgs>(args: SelectSubset<T, BrandAssetDeleteArgs<ExtArgs>>): Prisma__BrandAssetClient<$Result.GetResult<Prisma.$BrandAssetPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BrandAsset.
     * @param {BrandAssetUpdateArgs} args - Arguments to update one BrandAsset.
     * @example
     * // Update one BrandAsset
     * const brandAsset = await prisma.brandAsset.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BrandAssetUpdateArgs>(args: SelectSubset<T, BrandAssetUpdateArgs<ExtArgs>>): Prisma__BrandAssetClient<$Result.GetResult<Prisma.$BrandAssetPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BrandAssets.
     * @param {BrandAssetDeleteManyArgs} args - Arguments to filter BrandAssets to delete.
     * @example
     * // Delete a few BrandAssets
     * const { count } = await prisma.brandAsset.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BrandAssetDeleteManyArgs>(args?: SelectSubset<T, BrandAssetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BrandAssets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandAssetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BrandAssets
     * const brandAsset = await prisma.brandAsset.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BrandAssetUpdateManyArgs>(args: SelectSubset<T, BrandAssetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BrandAsset.
     * @param {BrandAssetUpsertArgs} args - Arguments to update or create a BrandAsset.
     * @example
     * // Update or create a BrandAsset
     * const brandAsset = await prisma.brandAsset.upsert({
     *   create: {
     *     // ... data to create a BrandAsset
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BrandAsset we want to update
     *   }
     * })
     */
    upsert<T extends BrandAssetUpsertArgs>(args: SelectSubset<T, BrandAssetUpsertArgs<ExtArgs>>): Prisma__BrandAssetClient<$Result.GetResult<Prisma.$BrandAssetPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BrandAssets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandAssetCountArgs} args - Arguments to filter BrandAssets to count.
     * @example
     * // Count the number of BrandAssets
     * const count = await prisma.brandAsset.count({
     *   where: {
     *     // ... the filter for the BrandAssets we want to count
     *   }
     * })
    **/
    count<T extends BrandAssetCountArgs>(
      args?: Subset<T, BrandAssetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BrandAssetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BrandAsset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandAssetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BrandAssetAggregateArgs>(args: Subset<T, BrandAssetAggregateArgs>): Prisma.PrismaPromise<GetBrandAssetAggregateType<T>>

    /**
     * Group by BrandAsset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandAssetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BrandAssetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BrandAssetGroupByArgs['orderBy'] }
        : { orderBy?: BrandAssetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BrandAssetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrandAssetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BrandAsset model
   */
  readonly fields: BrandAssetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BrandAsset.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BrandAssetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BrandAsset model
   */ 
  interface BrandAssetFieldRefs {
    readonly id: FieldRef<"BrandAsset", 'String'>
    readonly clientId: FieldRef<"BrandAsset", 'String'>
    readonly type: FieldRef<"BrandAsset", 'AssetType'>
    readonly name: FieldRef<"BrandAsset", 'String'>
    readonly url: FieldRef<"BrandAsset", 'String'>
    readonly metadata: FieldRef<"BrandAsset", 'Json'>
    readonly createdAt: FieldRef<"BrandAsset", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BrandAsset findUnique
   */
  export type BrandAssetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandAsset
     */
    select?: BrandAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandAssetInclude<ExtArgs> | null
    /**
     * Filter, which BrandAsset to fetch.
     */
    where: BrandAssetWhereUniqueInput
  }

  /**
   * BrandAsset findUniqueOrThrow
   */
  export type BrandAssetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandAsset
     */
    select?: BrandAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandAssetInclude<ExtArgs> | null
    /**
     * Filter, which BrandAsset to fetch.
     */
    where: BrandAssetWhereUniqueInput
  }

  /**
   * BrandAsset findFirst
   */
  export type BrandAssetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandAsset
     */
    select?: BrandAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandAssetInclude<ExtArgs> | null
    /**
     * Filter, which BrandAsset to fetch.
     */
    where?: BrandAssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BrandAssets to fetch.
     */
    orderBy?: BrandAssetOrderByWithRelationInput | BrandAssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BrandAssets.
     */
    cursor?: BrandAssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BrandAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BrandAssets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BrandAssets.
     */
    distinct?: BrandAssetScalarFieldEnum | BrandAssetScalarFieldEnum[]
  }

  /**
   * BrandAsset findFirstOrThrow
   */
  export type BrandAssetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandAsset
     */
    select?: BrandAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandAssetInclude<ExtArgs> | null
    /**
     * Filter, which BrandAsset to fetch.
     */
    where?: BrandAssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BrandAssets to fetch.
     */
    orderBy?: BrandAssetOrderByWithRelationInput | BrandAssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BrandAssets.
     */
    cursor?: BrandAssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BrandAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BrandAssets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BrandAssets.
     */
    distinct?: BrandAssetScalarFieldEnum | BrandAssetScalarFieldEnum[]
  }

  /**
   * BrandAsset findMany
   */
  export type BrandAssetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandAsset
     */
    select?: BrandAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandAssetInclude<ExtArgs> | null
    /**
     * Filter, which BrandAssets to fetch.
     */
    where?: BrandAssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BrandAssets to fetch.
     */
    orderBy?: BrandAssetOrderByWithRelationInput | BrandAssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BrandAssets.
     */
    cursor?: BrandAssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BrandAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BrandAssets.
     */
    skip?: number
    distinct?: BrandAssetScalarFieldEnum | BrandAssetScalarFieldEnum[]
  }

  /**
   * BrandAsset create
   */
  export type BrandAssetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandAsset
     */
    select?: BrandAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandAssetInclude<ExtArgs> | null
    /**
     * The data needed to create a BrandAsset.
     */
    data: XOR<BrandAssetCreateInput, BrandAssetUncheckedCreateInput>
  }

  /**
   * BrandAsset createMany
   */
  export type BrandAssetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BrandAssets.
     */
    data: BrandAssetCreateManyInput | BrandAssetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BrandAsset createManyAndReturn
   */
  export type BrandAssetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandAsset
     */
    select?: BrandAssetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BrandAssets.
     */
    data: BrandAssetCreateManyInput | BrandAssetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandAssetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BrandAsset update
   */
  export type BrandAssetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandAsset
     */
    select?: BrandAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandAssetInclude<ExtArgs> | null
    /**
     * The data needed to update a BrandAsset.
     */
    data: XOR<BrandAssetUpdateInput, BrandAssetUncheckedUpdateInput>
    /**
     * Choose, which BrandAsset to update.
     */
    where: BrandAssetWhereUniqueInput
  }

  /**
   * BrandAsset updateMany
   */
  export type BrandAssetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BrandAssets.
     */
    data: XOR<BrandAssetUpdateManyMutationInput, BrandAssetUncheckedUpdateManyInput>
    /**
     * Filter which BrandAssets to update
     */
    where?: BrandAssetWhereInput
  }

  /**
   * BrandAsset upsert
   */
  export type BrandAssetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandAsset
     */
    select?: BrandAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandAssetInclude<ExtArgs> | null
    /**
     * The filter to search for the BrandAsset to update in case it exists.
     */
    where: BrandAssetWhereUniqueInput
    /**
     * In case the BrandAsset found by the `where` argument doesn't exist, create a new BrandAsset with this data.
     */
    create: XOR<BrandAssetCreateInput, BrandAssetUncheckedCreateInput>
    /**
     * In case the BrandAsset was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BrandAssetUpdateInput, BrandAssetUncheckedUpdateInput>
  }

  /**
   * BrandAsset delete
   */
  export type BrandAssetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandAsset
     */
    select?: BrandAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandAssetInclude<ExtArgs> | null
    /**
     * Filter which BrandAsset to delete.
     */
    where: BrandAssetWhereUniqueInput
  }

  /**
   * BrandAsset deleteMany
   */
  export type BrandAssetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BrandAssets to delete
     */
    where?: BrandAssetWhereInput
  }

  /**
   * BrandAsset without action
   */
  export type BrandAssetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandAsset
     */
    select?: BrandAssetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandAssetInclude<ExtArgs> | null
  }


  /**
   * Model Campaign
   */

  export type AggregateCampaign = {
    _count: CampaignCountAggregateOutputType | null
    _min: CampaignMinAggregateOutputType | null
    _max: CampaignMaxAggregateOutputType | null
  }

  export type CampaignMinAggregateOutputType = {
    id: string | null
    clientId: string | null
    name: string | null
    objective: string | null
    startDate: Date | null
    endDate: Date | null
    brandTone: string | null
    status: $Enums.CampaignStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CampaignMaxAggregateOutputType = {
    id: string | null
    clientId: string | null
    name: string | null
    objective: string | null
    startDate: Date | null
    endDate: Date | null
    brandTone: string | null
    status: $Enums.CampaignStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CampaignCountAggregateOutputType = {
    id: number
    clientId: number
    name: number
    objective: number
    startDate: number
    endDate: number
    brandTone: number
    publicationFrequency: number
    templateIds: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CampaignMinAggregateInputType = {
    id?: true
    clientId?: true
    name?: true
    objective?: true
    startDate?: true
    endDate?: true
    brandTone?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CampaignMaxAggregateInputType = {
    id?: true
    clientId?: true
    name?: true
    objective?: true
    startDate?: true
    endDate?: true
    brandTone?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CampaignCountAggregateInputType = {
    id?: true
    clientId?: true
    name?: true
    objective?: true
    startDate?: true
    endDate?: true
    brandTone?: true
    publicationFrequency?: true
    templateIds?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CampaignAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Campaign to aggregate.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Campaigns
    **/
    _count?: true | CampaignCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CampaignMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CampaignMaxAggregateInputType
  }

  export type GetCampaignAggregateType<T extends CampaignAggregateArgs> = {
        [P in keyof T & keyof AggregateCampaign]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCampaign[P]>
      : GetScalarType<T[P], AggregateCampaign[P]>
  }




  export type CampaignGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CampaignWhereInput
    orderBy?: CampaignOrderByWithAggregationInput | CampaignOrderByWithAggregationInput[]
    by: CampaignScalarFieldEnum[] | CampaignScalarFieldEnum
    having?: CampaignScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CampaignCountAggregateInputType | true
    _min?: CampaignMinAggregateInputType
    _max?: CampaignMaxAggregateInputType
  }

  export type CampaignGroupByOutputType = {
    id: string
    clientId: string
    name: string
    objective: string
    startDate: Date
    endDate: Date
    brandTone: string
    publicationFrequency: JsonValue
    templateIds: string[]
    status: $Enums.CampaignStatus
    createdAt: Date
    updatedAt: Date
    _count: CampaignCountAggregateOutputType | null
    _min: CampaignMinAggregateOutputType | null
    _max: CampaignMaxAggregateOutputType | null
  }

  type GetCampaignGroupByPayload<T extends CampaignGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CampaignGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CampaignGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CampaignGroupByOutputType[P]>
            : GetScalarType<T[P], CampaignGroupByOutputType[P]>
        }
      >
    >


  export type CampaignSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    name?: boolean
    objective?: boolean
    startDate?: boolean
    endDate?: boolean
    brandTone?: boolean
    publicationFrequency?: boolean
    templateIds?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
    posts?: boolean | Campaign$postsArgs<ExtArgs>
    _count?: boolean | CampaignCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["campaign"]>

  export type CampaignSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    name?: boolean
    objective?: boolean
    startDate?: boolean
    endDate?: boolean
    brandTone?: boolean
    publicationFrequency?: boolean
    templateIds?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["campaign"]>

  export type CampaignSelectScalar = {
    id?: boolean
    clientId?: boolean
    name?: boolean
    objective?: boolean
    startDate?: boolean
    endDate?: boolean
    brandTone?: boolean
    publicationFrequency?: boolean
    templateIds?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CampaignInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
    posts?: boolean | Campaign$postsArgs<ExtArgs>
    _count?: boolean | CampaignCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CampaignIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }

  export type $CampaignPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Campaign"
    objects: {
      client: Prisma.$ClientPayload<ExtArgs>
      posts: Prisma.$PostPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clientId: string
      name: string
      objective: string
      startDate: Date
      endDate: Date
      brandTone: string
      publicationFrequency: Prisma.JsonValue
      templateIds: string[]
      status: $Enums.CampaignStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["campaign"]>
    composites: {}
  }

  type CampaignGetPayload<S extends boolean | null | undefined | CampaignDefaultArgs> = $Result.GetResult<Prisma.$CampaignPayload, S>

  type CampaignCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CampaignFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CampaignCountAggregateInputType | true
    }

  export interface CampaignDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Campaign'], meta: { name: 'Campaign' } }
    /**
     * Find zero or one Campaign that matches the filter.
     * @param {CampaignFindUniqueArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CampaignFindUniqueArgs>(args: SelectSubset<T, CampaignFindUniqueArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Campaign that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CampaignFindUniqueOrThrowArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CampaignFindUniqueOrThrowArgs>(args: SelectSubset<T, CampaignFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Campaign that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignFindFirstArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CampaignFindFirstArgs>(args?: SelectSubset<T, CampaignFindFirstArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Campaign that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignFindFirstOrThrowArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CampaignFindFirstOrThrowArgs>(args?: SelectSubset<T, CampaignFindFirstOrThrowArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Campaigns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Campaigns
     * const campaigns = await prisma.campaign.findMany()
     * 
     * // Get first 10 Campaigns
     * const campaigns = await prisma.campaign.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const campaignWithIdOnly = await prisma.campaign.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CampaignFindManyArgs>(args?: SelectSubset<T, CampaignFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Campaign.
     * @param {CampaignCreateArgs} args - Arguments to create a Campaign.
     * @example
     * // Create one Campaign
     * const Campaign = await prisma.campaign.create({
     *   data: {
     *     // ... data to create a Campaign
     *   }
     * })
     * 
     */
    create<T extends CampaignCreateArgs>(args: SelectSubset<T, CampaignCreateArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Campaigns.
     * @param {CampaignCreateManyArgs} args - Arguments to create many Campaigns.
     * @example
     * // Create many Campaigns
     * const campaign = await prisma.campaign.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CampaignCreateManyArgs>(args?: SelectSubset<T, CampaignCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Campaigns and returns the data saved in the database.
     * @param {CampaignCreateManyAndReturnArgs} args - Arguments to create many Campaigns.
     * @example
     * // Create many Campaigns
     * const campaign = await prisma.campaign.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Campaigns and only return the `id`
     * const campaignWithIdOnly = await prisma.campaign.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CampaignCreateManyAndReturnArgs>(args?: SelectSubset<T, CampaignCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Campaign.
     * @param {CampaignDeleteArgs} args - Arguments to delete one Campaign.
     * @example
     * // Delete one Campaign
     * const Campaign = await prisma.campaign.delete({
     *   where: {
     *     // ... filter to delete one Campaign
     *   }
     * })
     * 
     */
    delete<T extends CampaignDeleteArgs>(args: SelectSubset<T, CampaignDeleteArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Campaign.
     * @param {CampaignUpdateArgs} args - Arguments to update one Campaign.
     * @example
     * // Update one Campaign
     * const campaign = await prisma.campaign.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CampaignUpdateArgs>(args: SelectSubset<T, CampaignUpdateArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Campaigns.
     * @param {CampaignDeleteManyArgs} args - Arguments to filter Campaigns to delete.
     * @example
     * // Delete a few Campaigns
     * const { count } = await prisma.campaign.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CampaignDeleteManyArgs>(args?: SelectSubset<T, CampaignDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Campaigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Campaigns
     * const campaign = await prisma.campaign.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CampaignUpdateManyArgs>(args: SelectSubset<T, CampaignUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Campaign.
     * @param {CampaignUpsertArgs} args - Arguments to update or create a Campaign.
     * @example
     * // Update or create a Campaign
     * const campaign = await prisma.campaign.upsert({
     *   create: {
     *     // ... data to create a Campaign
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Campaign we want to update
     *   }
     * })
     */
    upsert<T extends CampaignUpsertArgs>(args: SelectSubset<T, CampaignUpsertArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Campaigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignCountArgs} args - Arguments to filter Campaigns to count.
     * @example
     * // Count the number of Campaigns
     * const count = await prisma.campaign.count({
     *   where: {
     *     // ... the filter for the Campaigns we want to count
     *   }
     * })
    **/
    count<T extends CampaignCountArgs>(
      args?: Subset<T, CampaignCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CampaignCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Campaign.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CampaignAggregateArgs>(args: Subset<T, CampaignAggregateArgs>): Prisma.PrismaPromise<GetCampaignAggregateType<T>>

    /**
     * Group by Campaign.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CampaignGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CampaignGroupByArgs['orderBy'] }
        : { orderBy?: CampaignGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CampaignGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCampaignGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Campaign model
   */
  readonly fields: CampaignFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Campaign.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CampaignClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    posts<T extends Campaign$postsArgs<ExtArgs> = {}>(args?: Subset<T, Campaign$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Campaign model
   */ 
  interface CampaignFieldRefs {
    readonly id: FieldRef<"Campaign", 'String'>
    readonly clientId: FieldRef<"Campaign", 'String'>
    readonly name: FieldRef<"Campaign", 'String'>
    readonly objective: FieldRef<"Campaign", 'String'>
    readonly startDate: FieldRef<"Campaign", 'DateTime'>
    readonly endDate: FieldRef<"Campaign", 'DateTime'>
    readonly brandTone: FieldRef<"Campaign", 'String'>
    readonly publicationFrequency: FieldRef<"Campaign", 'Json'>
    readonly templateIds: FieldRef<"Campaign", 'String[]'>
    readonly status: FieldRef<"Campaign", 'CampaignStatus'>
    readonly createdAt: FieldRef<"Campaign", 'DateTime'>
    readonly updatedAt: FieldRef<"Campaign", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Campaign findUnique
   */
  export type CampaignFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign findUniqueOrThrow
   */
  export type CampaignFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign findFirst
   */
  export type CampaignFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Campaigns.
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Campaigns.
     */
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * Campaign findFirstOrThrow
   */
  export type CampaignFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Campaigns.
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Campaigns.
     */
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * Campaign findMany
   */
  export type CampaignFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaigns to fetch.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Campaigns.
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * Campaign create
   */
  export type CampaignCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * The data needed to create a Campaign.
     */
    data: XOR<CampaignCreateInput, CampaignUncheckedCreateInput>
  }

  /**
   * Campaign createMany
   */
  export type CampaignCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Campaigns.
     */
    data: CampaignCreateManyInput | CampaignCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Campaign createManyAndReturn
   */
  export type CampaignCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Campaigns.
     */
    data: CampaignCreateManyInput | CampaignCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Campaign update
   */
  export type CampaignUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * The data needed to update a Campaign.
     */
    data: XOR<CampaignUpdateInput, CampaignUncheckedUpdateInput>
    /**
     * Choose, which Campaign to update.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign updateMany
   */
  export type CampaignUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Campaigns.
     */
    data: XOR<CampaignUpdateManyMutationInput, CampaignUncheckedUpdateManyInput>
    /**
     * Filter which Campaigns to update
     */
    where?: CampaignWhereInput
  }

  /**
   * Campaign upsert
   */
  export type CampaignUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * The filter to search for the Campaign to update in case it exists.
     */
    where: CampaignWhereUniqueInput
    /**
     * In case the Campaign found by the `where` argument doesn't exist, create a new Campaign with this data.
     */
    create: XOR<CampaignCreateInput, CampaignUncheckedCreateInput>
    /**
     * In case the Campaign was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CampaignUpdateInput, CampaignUncheckedUpdateInput>
  }

  /**
   * Campaign delete
   */
  export type CampaignDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter which Campaign to delete.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign deleteMany
   */
  export type CampaignDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Campaigns to delete
     */
    where?: CampaignWhereInput
  }

  /**
   * Campaign.posts
   */
  export type Campaign$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Campaign without action
   */
  export type CampaignDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
  }


  /**
   * Model Post
   */

  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostMinAggregateOutputType = {
    id: string | null
    campaignId: string | null
    scheduledDate: Date | null
    status: $Enums.PostStatus | null
    finalImageUrl: string | null
    embeddedText: string | null
    publicationText: string | null
    cta: string | null
    generationJobId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PostMaxAggregateOutputType = {
    id: string | null
    campaignId: string | null
    scheduledDate: Date | null
    status: $Enums.PostStatus | null
    finalImageUrl: string | null
    embeddedText: string | null
    publicationText: string | null
    cta: string | null
    generationJobId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    campaignId: number
    scheduledDate: number
    status: number
    finalImageUrl: number
    embeddedText: number
    publicationText: number
    hashtags: number
    cta: number
    generationJobId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PostMinAggregateInputType = {
    id?: true
    campaignId?: true
    scheduledDate?: true
    status?: true
    finalImageUrl?: true
    embeddedText?: true
    publicationText?: true
    cta?: true
    generationJobId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    campaignId?: true
    scheduledDate?: true
    status?: true
    finalImageUrl?: true
    embeddedText?: true
    publicationText?: true
    cta?: true
    generationJobId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    campaignId?: true
    scheduledDate?: true
    status?: true
    finalImageUrl?: true
    embeddedText?: true
    publicationText?: true
    hashtags?: true
    cta?: true
    generationJobId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Post to aggregate.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
    orderBy?: PostOrderByWithAggregationInput | PostOrderByWithAggregationInput[]
    by: PostScalarFieldEnum[] | PostScalarFieldEnum
    having?: PostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }

  export type PostGroupByOutputType = {
    id: string
    campaignId: string
    scheduledDate: Date
    status: $Enums.PostStatus
    finalImageUrl: string | null
    embeddedText: string | null
    publicationText: string | null
    hashtags: string[]
    cta: string | null
    generationJobId: string | null
    createdAt: Date
    updatedAt: Date
    _count: PostCountAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    campaignId?: boolean
    scheduledDate?: boolean
    status?: boolean
    finalImageUrl?: boolean
    embeddedText?: boolean
    publicationText?: boolean
    hashtags?: boolean
    cta?: boolean
    generationJobId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
    generationJob?: boolean | Post$generationJobArgs<ExtArgs>
    publicationResults?: boolean | Post$publicationResultsArgs<ExtArgs>
    contentVersions?: boolean | Post$contentVersionsArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    campaignId?: boolean
    scheduledDate?: boolean
    status?: boolean
    finalImageUrl?: boolean
    embeddedText?: boolean
    publicationText?: boolean
    hashtags?: boolean
    cta?: boolean
    generationJobId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
    generationJob?: boolean | Post$generationJobArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectScalar = {
    id?: boolean
    campaignId?: boolean
    scheduledDate?: boolean
    status?: boolean
    finalImageUrl?: boolean
    embeddedText?: boolean
    publicationText?: boolean
    hashtags?: boolean
    cta?: boolean
    generationJobId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
    generationJob?: boolean | Post$generationJobArgs<ExtArgs>
    publicationResults?: boolean | Post$publicationResultsArgs<ExtArgs>
    contentVersions?: boolean | Post$contentVersionsArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PostIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | CampaignDefaultArgs<ExtArgs>
    generationJob?: boolean | Post$generationJobArgs<ExtArgs>
  }

  export type $PostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Post"
    objects: {
      campaign: Prisma.$CampaignPayload<ExtArgs>
      generationJob: Prisma.$ContentGenerationJobPayload<ExtArgs> | null
      publicationResults: Prisma.$PublicationResultPayload<ExtArgs>[]
      contentVersions: Prisma.$ContentVersionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      campaignId: string
      scheduledDate: Date
      status: $Enums.PostStatus
      finalImageUrl: string | null
      embeddedText: string | null
      publicationText: string | null
      hashtags: string[]
      cta: string | null
      generationJobId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["post"]>
    composites: {}
  }

  type PostGetPayload<S extends boolean | null | undefined | PostDefaultArgs> = $Result.GetResult<Prisma.$PostPayload, S>

  type PostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PostFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PostCountAggregateInputType | true
    }

  export interface PostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Post'], meta: { name: 'Post' } }
    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostFindUniqueArgs>(args: SelectSubset<T, PostFindUniqueArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Post that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs>(args: SelectSubset<T, PostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostFindFirstArgs>(args?: SelectSubset<T, PostFindFirstArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Post that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs>(args?: SelectSubset<T, PostFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostFindManyArgs>(args?: SelectSubset<T, PostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
     */
    create<T extends PostCreateArgs>(args: SelectSubset<T, PostCreateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Posts.
     * @param {PostCreateManyArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostCreateManyArgs>(args?: SelectSubset<T, PostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Posts and returns the data saved in the database.
     * @param {PostCreateManyAndReturnArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Posts and only return the `id`
     * const postWithIdOnly = await prisma.post.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostCreateManyAndReturnArgs>(args?: SelectSubset<T, PostCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
     */
    delete<T extends PostDeleteArgs>(args: SelectSubset<T, PostDeleteArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostUpdateArgs>(args: SelectSubset<T, PostUpdateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostDeleteManyArgs>(args?: SelectSubset<T, PostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostUpdateManyArgs>(args: SelectSubset<T, PostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
     */
    upsert<T extends PostUpsertArgs>(args: SelectSubset<T, PostUpsertArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): Prisma.PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Post model
   */
  readonly fields: PostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    campaign<T extends CampaignDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CampaignDefaultArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    generationJob<T extends Post$generationJobArgs<ExtArgs> = {}>(args?: Subset<T, Post$generationJobArgs<ExtArgs>>): Prisma__ContentGenerationJobClient<$Result.GetResult<Prisma.$ContentGenerationJobPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    publicationResults<T extends Post$publicationResultsArgs<ExtArgs> = {}>(args?: Subset<T, Post$publicationResultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublicationResultPayload<ExtArgs>, T, "findMany"> | Null>
    contentVersions<T extends Post$contentVersionsArgs<ExtArgs> = {}>(args?: Subset<T, Post$contentVersionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentVersionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Post model
   */ 
  interface PostFieldRefs {
    readonly id: FieldRef<"Post", 'String'>
    readonly campaignId: FieldRef<"Post", 'String'>
    readonly scheduledDate: FieldRef<"Post", 'DateTime'>
    readonly status: FieldRef<"Post", 'PostStatus'>
    readonly finalImageUrl: FieldRef<"Post", 'String'>
    readonly embeddedText: FieldRef<"Post", 'String'>
    readonly publicationText: FieldRef<"Post", 'String'>
    readonly hashtags: FieldRef<"Post", 'String[]'>
    readonly cta: FieldRef<"Post", 'String'>
    readonly generationJobId: FieldRef<"Post", 'String'>
    readonly createdAt: FieldRef<"Post", 'DateTime'>
    readonly updatedAt: FieldRef<"Post", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Post findUnique
   */
  export type PostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findFirst
   */
  export type PostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findMany
   */
  export type PostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post create
   */
  export type PostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to create a Post.
     */
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }

  /**
   * Post createMany
   */
  export type PostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Post createManyAndReturn
   */
  export type PostCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Post update
   */
  export type PostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to update a Post.
     */
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
  }

  /**
   * Post upsert
   */
  export type PostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The filter to search for the Post to update in case it exists.
     */
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     */
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }

  /**
   * Post delete
   */
  export type PostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter which Post to delete.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Posts to delete
     */
    where?: PostWhereInput
  }

  /**
   * Post.generationJob
   */
  export type Post$generationJobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentGenerationJob
     */
    select?: ContentGenerationJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentGenerationJobInclude<ExtArgs> | null
    where?: ContentGenerationJobWhereInput
  }

  /**
   * Post.publicationResults
   */
  export type Post$publicationResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicationResult
     */
    select?: PublicationResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicationResultInclude<ExtArgs> | null
    where?: PublicationResultWhereInput
    orderBy?: PublicationResultOrderByWithRelationInput | PublicationResultOrderByWithRelationInput[]
    cursor?: PublicationResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PublicationResultScalarFieldEnum | PublicationResultScalarFieldEnum[]
  }

  /**
   * Post.contentVersions
   */
  export type Post$contentVersionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentVersion
     */
    select?: ContentVersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentVersionInclude<ExtArgs> | null
    where?: ContentVersionWhereInput
    orderBy?: ContentVersionOrderByWithRelationInput | ContentVersionOrderByWithRelationInput[]
    cursor?: ContentVersionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContentVersionScalarFieldEnum | ContentVersionScalarFieldEnum[]
  }

  /**
   * Post without action
   */
  export type PostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
  }


  /**
   * Model ContentGenerationJob
   */

  export type AggregateContentGenerationJob = {
    _count: ContentGenerationJobCountAggregateOutputType | null
    _avg: ContentGenerationJobAvgAggregateOutputType | null
    _sum: ContentGenerationJobSumAggregateOutputType | null
    _min: ContentGenerationJobMinAggregateOutputType | null
    _max: ContentGenerationJobMaxAggregateOutputType | null
  }

  export type ContentGenerationJobAvgAggregateOutputType = {
    tokensConsumed: number | null
  }

  export type ContentGenerationJobSumAggregateOutputType = {
    tokensConsumed: number | null
  }

  export type ContentGenerationJobMinAggregateOutputType = {
    id: string | null
    postId: string | null
    status: $Enums.JobStatus | null
    tokensConsumed: number | null
    createdAt: Date | null
    completedAt: Date | null
  }

  export type ContentGenerationJobMaxAggregateOutputType = {
    id: string | null
    postId: string | null
    status: $Enums.JobStatus | null
    tokensConsumed: number | null
    createdAt: Date | null
    completedAt: Date | null
  }

  export type ContentGenerationJobCountAggregateOutputType = {
    id: number
    postId: number
    status: number
    tokensConsumed: number
    brandContext: number
    createdAt: number
    completedAt: number
    _all: number
  }


  export type ContentGenerationJobAvgAggregateInputType = {
    tokensConsumed?: true
  }

  export type ContentGenerationJobSumAggregateInputType = {
    tokensConsumed?: true
  }

  export type ContentGenerationJobMinAggregateInputType = {
    id?: true
    postId?: true
    status?: true
    tokensConsumed?: true
    createdAt?: true
    completedAt?: true
  }

  export type ContentGenerationJobMaxAggregateInputType = {
    id?: true
    postId?: true
    status?: true
    tokensConsumed?: true
    createdAt?: true
    completedAt?: true
  }

  export type ContentGenerationJobCountAggregateInputType = {
    id?: true
    postId?: true
    status?: true
    tokensConsumed?: true
    brandContext?: true
    createdAt?: true
    completedAt?: true
    _all?: true
  }

  export type ContentGenerationJobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContentGenerationJob to aggregate.
     */
    where?: ContentGenerationJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentGenerationJobs to fetch.
     */
    orderBy?: ContentGenerationJobOrderByWithRelationInput | ContentGenerationJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContentGenerationJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentGenerationJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentGenerationJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContentGenerationJobs
    **/
    _count?: true | ContentGenerationJobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContentGenerationJobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContentGenerationJobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContentGenerationJobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContentGenerationJobMaxAggregateInputType
  }

  export type GetContentGenerationJobAggregateType<T extends ContentGenerationJobAggregateArgs> = {
        [P in keyof T & keyof AggregateContentGenerationJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContentGenerationJob[P]>
      : GetScalarType<T[P], AggregateContentGenerationJob[P]>
  }




  export type ContentGenerationJobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContentGenerationJobWhereInput
    orderBy?: ContentGenerationJobOrderByWithAggregationInput | ContentGenerationJobOrderByWithAggregationInput[]
    by: ContentGenerationJobScalarFieldEnum[] | ContentGenerationJobScalarFieldEnum
    having?: ContentGenerationJobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContentGenerationJobCountAggregateInputType | true
    _avg?: ContentGenerationJobAvgAggregateInputType
    _sum?: ContentGenerationJobSumAggregateInputType
    _min?: ContentGenerationJobMinAggregateInputType
    _max?: ContentGenerationJobMaxAggregateInputType
  }

  export type ContentGenerationJobGroupByOutputType = {
    id: string
    postId: string | null
    status: $Enums.JobStatus
    tokensConsumed: number
    brandContext: JsonValue
    createdAt: Date
    completedAt: Date | null
    _count: ContentGenerationJobCountAggregateOutputType | null
    _avg: ContentGenerationJobAvgAggregateOutputType | null
    _sum: ContentGenerationJobSumAggregateOutputType | null
    _min: ContentGenerationJobMinAggregateOutputType | null
    _max: ContentGenerationJobMaxAggregateOutputType | null
  }

  type GetContentGenerationJobGroupByPayload<T extends ContentGenerationJobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContentGenerationJobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContentGenerationJobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContentGenerationJobGroupByOutputType[P]>
            : GetScalarType<T[P], ContentGenerationJobGroupByOutputType[P]>
        }
      >
    >


  export type ContentGenerationJobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    status?: boolean
    tokensConsumed?: boolean
    brandContext?: boolean
    createdAt?: boolean
    completedAt?: boolean
    post?: boolean | ContentGenerationJob$postArgs<ExtArgs>
    steps?: boolean | ContentGenerationJob$stepsArgs<ExtArgs>
    _count?: boolean | ContentGenerationJobCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contentGenerationJob"]>

  export type ContentGenerationJobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    status?: boolean
    tokensConsumed?: boolean
    brandContext?: boolean
    createdAt?: boolean
    completedAt?: boolean
  }, ExtArgs["result"]["contentGenerationJob"]>

  export type ContentGenerationJobSelectScalar = {
    id?: boolean
    postId?: boolean
    status?: boolean
    tokensConsumed?: boolean
    brandContext?: boolean
    createdAt?: boolean
    completedAt?: boolean
  }

  export type ContentGenerationJobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | ContentGenerationJob$postArgs<ExtArgs>
    steps?: boolean | ContentGenerationJob$stepsArgs<ExtArgs>
    _count?: boolean | ContentGenerationJobCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ContentGenerationJobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ContentGenerationJobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContentGenerationJob"
    objects: {
      post: Prisma.$PostPayload<ExtArgs> | null
      steps: Prisma.$GenerationStepResultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      postId: string | null
      status: $Enums.JobStatus
      tokensConsumed: number
      brandContext: Prisma.JsonValue
      createdAt: Date
      completedAt: Date | null
    }, ExtArgs["result"]["contentGenerationJob"]>
    composites: {}
  }

  type ContentGenerationJobGetPayload<S extends boolean | null | undefined | ContentGenerationJobDefaultArgs> = $Result.GetResult<Prisma.$ContentGenerationJobPayload, S>

  type ContentGenerationJobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContentGenerationJobFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContentGenerationJobCountAggregateInputType | true
    }

  export interface ContentGenerationJobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContentGenerationJob'], meta: { name: 'ContentGenerationJob' } }
    /**
     * Find zero or one ContentGenerationJob that matches the filter.
     * @param {ContentGenerationJobFindUniqueArgs} args - Arguments to find a ContentGenerationJob
     * @example
     * // Get one ContentGenerationJob
     * const contentGenerationJob = await prisma.contentGenerationJob.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContentGenerationJobFindUniqueArgs>(args: SelectSubset<T, ContentGenerationJobFindUniqueArgs<ExtArgs>>): Prisma__ContentGenerationJobClient<$Result.GetResult<Prisma.$ContentGenerationJobPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ContentGenerationJob that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ContentGenerationJobFindUniqueOrThrowArgs} args - Arguments to find a ContentGenerationJob
     * @example
     * // Get one ContentGenerationJob
     * const contentGenerationJob = await prisma.contentGenerationJob.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContentGenerationJobFindUniqueOrThrowArgs>(args: SelectSubset<T, ContentGenerationJobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContentGenerationJobClient<$Result.GetResult<Prisma.$ContentGenerationJobPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ContentGenerationJob that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentGenerationJobFindFirstArgs} args - Arguments to find a ContentGenerationJob
     * @example
     * // Get one ContentGenerationJob
     * const contentGenerationJob = await prisma.contentGenerationJob.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContentGenerationJobFindFirstArgs>(args?: SelectSubset<T, ContentGenerationJobFindFirstArgs<ExtArgs>>): Prisma__ContentGenerationJobClient<$Result.GetResult<Prisma.$ContentGenerationJobPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ContentGenerationJob that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentGenerationJobFindFirstOrThrowArgs} args - Arguments to find a ContentGenerationJob
     * @example
     * // Get one ContentGenerationJob
     * const contentGenerationJob = await prisma.contentGenerationJob.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContentGenerationJobFindFirstOrThrowArgs>(args?: SelectSubset<T, ContentGenerationJobFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContentGenerationJobClient<$Result.GetResult<Prisma.$ContentGenerationJobPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ContentGenerationJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentGenerationJobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContentGenerationJobs
     * const contentGenerationJobs = await prisma.contentGenerationJob.findMany()
     * 
     * // Get first 10 ContentGenerationJobs
     * const contentGenerationJobs = await prisma.contentGenerationJob.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contentGenerationJobWithIdOnly = await prisma.contentGenerationJob.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContentGenerationJobFindManyArgs>(args?: SelectSubset<T, ContentGenerationJobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentGenerationJobPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ContentGenerationJob.
     * @param {ContentGenerationJobCreateArgs} args - Arguments to create a ContentGenerationJob.
     * @example
     * // Create one ContentGenerationJob
     * const ContentGenerationJob = await prisma.contentGenerationJob.create({
     *   data: {
     *     // ... data to create a ContentGenerationJob
     *   }
     * })
     * 
     */
    create<T extends ContentGenerationJobCreateArgs>(args: SelectSubset<T, ContentGenerationJobCreateArgs<ExtArgs>>): Prisma__ContentGenerationJobClient<$Result.GetResult<Prisma.$ContentGenerationJobPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ContentGenerationJobs.
     * @param {ContentGenerationJobCreateManyArgs} args - Arguments to create many ContentGenerationJobs.
     * @example
     * // Create many ContentGenerationJobs
     * const contentGenerationJob = await prisma.contentGenerationJob.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContentGenerationJobCreateManyArgs>(args?: SelectSubset<T, ContentGenerationJobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContentGenerationJobs and returns the data saved in the database.
     * @param {ContentGenerationJobCreateManyAndReturnArgs} args - Arguments to create many ContentGenerationJobs.
     * @example
     * // Create many ContentGenerationJobs
     * const contentGenerationJob = await prisma.contentGenerationJob.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContentGenerationJobs and only return the `id`
     * const contentGenerationJobWithIdOnly = await prisma.contentGenerationJob.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContentGenerationJobCreateManyAndReturnArgs>(args?: SelectSubset<T, ContentGenerationJobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentGenerationJobPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ContentGenerationJob.
     * @param {ContentGenerationJobDeleteArgs} args - Arguments to delete one ContentGenerationJob.
     * @example
     * // Delete one ContentGenerationJob
     * const ContentGenerationJob = await prisma.contentGenerationJob.delete({
     *   where: {
     *     // ... filter to delete one ContentGenerationJob
     *   }
     * })
     * 
     */
    delete<T extends ContentGenerationJobDeleteArgs>(args: SelectSubset<T, ContentGenerationJobDeleteArgs<ExtArgs>>): Prisma__ContentGenerationJobClient<$Result.GetResult<Prisma.$ContentGenerationJobPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ContentGenerationJob.
     * @param {ContentGenerationJobUpdateArgs} args - Arguments to update one ContentGenerationJob.
     * @example
     * // Update one ContentGenerationJob
     * const contentGenerationJob = await prisma.contentGenerationJob.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContentGenerationJobUpdateArgs>(args: SelectSubset<T, ContentGenerationJobUpdateArgs<ExtArgs>>): Prisma__ContentGenerationJobClient<$Result.GetResult<Prisma.$ContentGenerationJobPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ContentGenerationJobs.
     * @param {ContentGenerationJobDeleteManyArgs} args - Arguments to filter ContentGenerationJobs to delete.
     * @example
     * // Delete a few ContentGenerationJobs
     * const { count } = await prisma.contentGenerationJob.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContentGenerationJobDeleteManyArgs>(args?: SelectSubset<T, ContentGenerationJobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContentGenerationJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentGenerationJobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContentGenerationJobs
     * const contentGenerationJob = await prisma.contentGenerationJob.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContentGenerationJobUpdateManyArgs>(args: SelectSubset<T, ContentGenerationJobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ContentGenerationJob.
     * @param {ContentGenerationJobUpsertArgs} args - Arguments to update or create a ContentGenerationJob.
     * @example
     * // Update or create a ContentGenerationJob
     * const contentGenerationJob = await prisma.contentGenerationJob.upsert({
     *   create: {
     *     // ... data to create a ContentGenerationJob
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContentGenerationJob we want to update
     *   }
     * })
     */
    upsert<T extends ContentGenerationJobUpsertArgs>(args: SelectSubset<T, ContentGenerationJobUpsertArgs<ExtArgs>>): Prisma__ContentGenerationJobClient<$Result.GetResult<Prisma.$ContentGenerationJobPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ContentGenerationJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentGenerationJobCountArgs} args - Arguments to filter ContentGenerationJobs to count.
     * @example
     * // Count the number of ContentGenerationJobs
     * const count = await prisma.contentGenerationJob.count({
     *   where: {
     *     // ... the filter for the ContentGenerationJobs we want to count
     *   }
     * })
    **/
    count<T extends ContentGenerationJobCountArgs>(
      args?: Subset<T, ContentGenerationJobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContentGenerationJobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContentGenerationJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentGenerationJobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContentGenerationJobAggregateArgs>(args: Subset<T, ContentGenerationJobAggregateArgs>): Prisma.PrismaPromise<GetContentGenerationJobAggregateType<T>>

    /**
     * Group by ContentGenerationJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentGenerationJobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContentGenerationJobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContentGenerationJobGroupByArgs['orderBy'] }
        : { orderBy?: ContentGenerationJobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContentGenerationJobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContentGenerationJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContentGenerationJob model
   */
  readonly fields: ContentGenerationJobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContentGenerationJob.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContentGenerationJobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends ContentGenerationJob$postArgs<ExtArgs> = {}>(args?: Subset<T, ContentGenerationJob$postArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    steps<T extends ContentGenerationJob$stepsArgs<ExtArgs> = {}>(args?: Subset<T, ContentGenerationJob$stepsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GenerationStepResultPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContentGenerationJob model
   */ 
  interface ContentGenerationJobFieldRefs {
    readonly id: FieldRef<"ContentGenerationJob", 'String'>
    readonly postId: FieldRef<"ContentGenerationJob", 'String'>
    readonly status: FieldRef<"ContentGenerationJob", 'JobStatus'>
    readonly tokensConsumed: FieldRef<"ContentGenerationJob", 'Int'>
    readonly brandContext: FieldRef<"ContentGenerationJob", 'Json'>
    readonly createdAt: FieldRef<"ContentGenerationJob", 'DateTime'>
    readonly completedAt: FieldRef<"ContentGenerationJob", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ContentGenerationJob findUnique
   */
  export type ContentGenerationJobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentGenerationJob
     */
    select?: ContentGenerationJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentGenerationJobInclude<ExtArgs> | null
    /**
     * Filter, which ContentGenerationJob to fetch.
     */
    where: ContentGenerationJobWhereUniqueInput
  }

  /**
   * ContentGenerationJob findUniqueOrThrow
   */
  export type ContentGenerationJobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentGenerationJob
     */
    select?: ContentGenerationJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentGenerationJobInclude<ExtArgs> | null
    /**
     * Filter, which ContentGenerationJob to fetch.
     */
    where: ContentGenerationJobWhereUniqueInput
  }

  /**
   * ContentGenerationJob findFirst
   */
  export type ContentGenerationJobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentGenerationJob
     */
    select?: ContentGenerationJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentGenerationJobInclude<ExtArgs> | null
    /**
     * Filter, which ContentGenerationJob to fetch.
     */
    where?: ContentGenerationJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentGenerationJobs to fetch.
     */
    orderBy?: ContentGenerationJobOrderByWithRelationInput | ContentGenerationJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContentGenerationJobs.
     */
    cursor?: ContentGenerationJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentGenerationJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentGenerationJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContentGenerationJobs.
     */
    distinct?: ContentGenerationJobScalarFieldEnum | ContentGenerationJobScalarFieldEnum[]
  }

  /**
   * ContentGenerationJob findFirstOrThrow
   */
  export type ContentGenerationJobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentGenerationJob
     */
    select?: ContentGenerationJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentGenerationJobInclude<ExtArgs> | null
    /**
     * Filter, which ContentGenerationJob to fetch.
     */
    where?: ContentGenerationJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentGenerationJobs to fetch.
     */
    orderBy?: ContentGenerationJobOrderByWithRelationInput | ContentGenerationJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContentGenerationJobs.
     */
    cursor?: ContentGenerationJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentGenerationJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentGenerationJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContentGenerationJobs.
     */
    distinct?: ContentGenerationJobScalarFieldEnum | ContentGenerationJobScalarFieldEnum[]
  }

  /**
   * ContentGenerationJob findMany
   */
  export type ContentGenerationJobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentGenerationJob
     */
    select?: ContentGenerationJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentGenerationJobInclude<ExtArgs> | null
    /**
     * Filter, which ContentGenerationJobs to fetch.
     */
    where?: ContentGenerationJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentGenerationJobs to fetch.
     */
    orderBy?: ContentGenerationJobOrderByWithRelationInput | ContentGenerationJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContentGenerationJobs.
     */
    cursor?: ContentGenerationJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentGenerationJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentGenerationJobs.
     */
    skip?: number
    distinct?: ContentGenerationJobScalarFieldEnum | ContentGenerationJobScalarFieldEnum[]
  }

  /**
   * ContentGenerationJob create
   */
  export type ContentGenerationJobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentGenerationJob
     */
    select?: ContentGenerationJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentGenerationJobInclude<ExtArgs> | null
    /**
     * The data needed to create a ContentGenerationJob.
     */
    data: XOR<ContentGenerationJobCreateInput, ContentGenerationJobUncheckedCreateInput>
  }

  /**
   * ContentGenerationJob createMany
   */
  export type ContentGenerationJobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContentGenerationJobs.
     */
    data: ContentGenerationJobCreateManyInput | ContentGenerationJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContentGenerationJob createManyAndReturn
   */
  export type ContentGenerationJobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentGenerationJob
     */
    select?: ContentGenerationJobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ContentGenerationJobs.
     */
    data: ContentGenerationJobCreateManyInput | ContentGenerationJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContentGenerationJob update
   */
  export type ContentGenerationJobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentGenerationJob
     */
    select?: ContentGenerationJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentGenerationJobInclude<ExtArgs> | null
    /**
     * The data needed to update a ContentGenerationJob.
     */
    data: XOR<ContentGenerationJobUpdateInput, ContentGenerationJobUncheckedUpdateInput>
    /**
     * Choose, which ContentGenerationJob to update.
     */
    where: ContentGenerationJobWhereUniqueInput
  }

  /**
   * ContentGenerationJob updateMany
   */
  export type ContentGenerationJobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContentGenerationJobs.
     */
    data: XOR<ContentGenerationJobUpdateManyMutationInput, ContentGenerationJobUncheckedUpdateManyInput>
    /**
     * Filter which ContentGenerationJobs to update
     */
    where?: ContentGenerationJobWhereInput
  }

  /**
   * ContentGenerationJob upsert
   */
  export type ContentGenerationJobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentGenerationJob
     */
    select?: ContentGenerationJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentGenerationJobInclude<ExtArgs> | null
    /**
     * The filter to search for the ContentGenerationJob to update in case it exists.
     */
    where: ContentGenerationJobWhereUniqueInput
    /**
     * In case the ContentGenerationJob found by the `where` argument doesn't exist, create a new ContentGenerationJob with this data.
     */
    create: XOR<ContentGenerationJobCreateInput, ContentGenerationJobUncheckedCreateInput>
    /**
     * In case the ContentGenerationJob was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContentGenerationJobUpdateInput, ContentGenerationJobUncheckedUpdateInput>
  }

  /**
   * ContentGenerationJob delete
   */
  export type ContentGenerationJobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentGenerationJob
     */
    select?: ContentGenerationJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentGenerationJobInclude<ExtArgs> | null
    /**
     * Filter which ContentGenerationJob to delete.
     */
    where: ContentGenerationJobWhereUniqueInput
  }

  /**
   * ContentGenerationJob deleteMany
   */
  export type ContentGenerationJobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContentGenerationJobs to delete
     */
    where?: ContentGenerationJobWhereInput
  }

  /**
   * ContentGenerationJob.post
   */
  export type ContentGenerationJob$postArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
  }

  /**
   * ContentGenerationJob.steps
   */
  export type ContentGenerationJob$stepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenerationStepResult
     */
    select?: GenerationStepResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenerationStepResultInclude<ExtArgs> | null
    where?: GenerationStepResultWhereInput
    orderBy?: GenerationStepResultOrderByWithRelationInput | GenerationStepResultOrderByWithRelationInput[]
    cursor?: GenerationStepResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GenerationStepResultScalarFieldEnum | GenerationStepResultScalarFieldEnum[]
  }

  /**
   * ContentGenerationJob without action
   */
  export type ContentGenerationJobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentGenerationJob
     */
    select?: ContentGenerationJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentGenerationJobInclude<ExtArgs> | null
  }


  /**
   * Model GenerationStepResult
   */

  export type AggregateGenerationStepResult = {
    _count: GenerationStepResultCountAggregateOutputType | null
    _avg: GenerationStepResultAvgAggregateOutputType | null
    _sum: GenerationStepResultSumAggregateOutputType | null
    _min: GenerationStepResultMinAggregateOutputType | null
    _max: GenerationStepResultMaxAggregateOutputType | null
  }

  export type GenerationStepResultAvgAggregateOutputType = {
    tokensUsed: number | null
  }

  export type GenerationStepResultSumAggregateOutputType = {
    tokensUsed: number | null
  }

  export type GenerationStepResultMinAggregateOutputType = {
    id: string | null
    jobId: string | null
    step: $Enums.GenerationStep | null
    status: $Enums.StepStatus | null
    tokensUsed: number | null
    executedAt: Date | null
    error: string | null
  }

  export type GenerationStepResultMaxAggregateOutputType = {
    id: string | null
    jobId: string | null
    step: $Enums.GenerationStep | null
    status: $Enums.StepStatus | null
    tokensUsed: number | null
    executedAt: Date | null
    error: string | null
  }

  export type GenerationStepResultCountAggregateOutputType = {
    id: number
    jobId: number
    step: number
    status: number
    input: number
    output: number
    tokensUsed: number
    executedAt: number
    error: number
    _all: number
  }


  export type GenerationStepResultAvgAggregateInputType = {
    tokensUsed?: true
  }

  export type GenerationStepResultSumAggregateInputType = {
    tokensUsed?: true
  }

  export type GenerationStepResultMinAggregateInputType = {
    id?: true
    jobId?: true
    step?: true
    status?: true
    tokensUsed?: true
    executedAt?: true
    error?: true
  }

  export type GenerationStepResultMaxAggregateInputType = {
    id?: true
    jobId?: true
    step?: true
    status?: true
    tokensUsed?: true
    executedAt?: true
    error?: true
  }

  export type GenerationStepResultCountAggregateInputType = {
    id?: true
    jobId?: true
    step?: true
    status?: true
    input?: true
    output?: true
    tokensUsed?: true
    executedAt?: true
    error?: true
    _all?: true
  }

  export type GenerationStepResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GenerationStepResult to aggregate.
     */
    where?: GenerationStepResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GenerationStepResults to fetch.
     */
    orderBy?: GenerationStepResultOrderByWithRelationInput | GenerationStepResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GenerationStepResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GenerationStepResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GenerationStepResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GenerationStepResults
    **/
    _count?: true | GenerationStepResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GenerationStepResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GenerationStepResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GenerationStepResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GenerationStepResultMaxAggregateInputType
  }

  export type GetGenerationStepResultAggregateType<T extends GenerationStepResultAggregateArgs> = {
        [P in keyof T & keyof AggregateGenerationStepResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGenerationStepResult[P]>
      : GetScalarType<T[P], AggregateGenerationStepResult[P]>
  }




  export type GenerationStepResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GenerationStepResultWhereInput
    orderBy?: GenerationStepResultOrderByWithAggregationInput | GenerationStepResultOrderByWithAggregationInput[]
    by: GenerationStepResultScalarFieldEnum[] | GenerationStepResultScalarFieldEnum
    having?: GenerationStepResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GenerationStepResultCountAggregateInputType | true
    _avg?: GenerationStepResultAvgAggregateInputType
    _sum?: GenerationStepResultSumAggregateInputType
    _min?: GenerationStepResultMinAggregateInputType
    _max?: GenerationStepResultMaxAggregateInputType
  }

  export type GenerationStepResultGroupByOutputType = {
    id: string
    jobId: string
    step: $Enums.GenerationStep
    status: $Enums.StepStatus
    input: JsonValue | null
    output: JsonValue | null
    tokensUsed: number
    executedAt: Date
    error: string | null
    _count: GenerationStepResultCountAggregateOutputType | null
    _avg: GenerationStepResultAvgAggregateOutputType | null
    _sum: GenerationStepResultSumAggregateOutputType | null
    _min: GenerationStepResultMinAggregateOutputType | null
    _max: GenerationStepResultMaxAggregateOutputType | null
  }

  type GetGenerationStepResultGroupByPayload<T extends GenerationStepResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GenerationStepResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GenerationStepResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GenerationStepResultGroupByOutputType[P]>
            : GetScalarType<T[P], GenerationStepResultGroupByOutputType[P]>
        }
      >
    >


  export type GenerationStepResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    step?: boolean
    status?: boolean
    input?: boolean
    output?: boolean
    tokensUsed?: boolean
    executedAt?: boolean
    error?: boolean
    job?: boolean | ContentGenerationJobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["generationStepResult"]>

  export type GenerationStepResultSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    step?: boolean
    status?: boolean
    input?: boolean
    output?: boolean
    tokensUsed?: boolean
    executedAt?: boolean
    error?: boolean
    job?: boolean | ContentGenerationJobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["generationStepResult"]>

  export type GenerationStepResultSelectScalar = {
    id?: boolean
    jobId?: boolean
    step?: boolean
    status?: boolean
    input?: boolean
    output?: boolean
    tokensUsed?: boolean
    executedAt?: boolean
    error?: boolean
  }

  export type GenerationStepResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | ContentGenerationJobDefaultArgs<ExtArgs>
  }
  export type GenerationStepResultIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | ContentGenerationJobDefaultArgs<ExtArgs>
  }

  export type $GenerationStepResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GenerationStepResult"
    objects: {
      job: Prisma.$ContentGenerationJobPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      jobId: string
      step: $Enums.GenerationStep
      status: $Enums.StepStatus
      input: Prisma.JsonValue | null
      output: Prisma.JsonValue | null
      tokensUsed: number
      executedAt: Date
      error: string | null
    }, ExtArgs["result"]["generationStepResult"]>
    composites: {}
  }

  type GenerationStepResultGetPayload<S extends boolean | null | undefined | GenerationStepResultDefaultArgs> = $Result.GetResult<Prisma.$GenerationStepResultPayload, S>

  type GenerationStepResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GenerationStepResultFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GenerationStepResultCountAggregateInputType | true
    }

  export interface GenerationStepResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GenerationStepResult'], meta: { name: 'GenerationStepResult' } }
    /**
     * Find zero or one GenerationStepResult that matches the filter.
     * @param {GenerationStepResultFindUniqueArgs} args - Arguments to find a GenerationStepResult
     * @example
     * // Get one GenerationStepResult
     * const generationStepResult = await prisma.generationStepResult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GenerationStepResultFindUniqueArgs>(args: SelectSubset<T, GenerationStepResultFindUniqueArgs<ExtArgs>>): Prisma__GenerationStepResultClient<$Result.GetResult<Prisma.$GenerationStepResultPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GenerationStepResult that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GenerationStepResultFindUniqueOrThrowArgs} args - Arguments to find a GenerationStepResult
     * @example
     * // Get one GenerationStepResult
     * const generationStepResult = await prisma.generationStepResult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GenerationStepResultFindUniqueOrThrowArgs>(args: SelectSubset<T, GenerationStepResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GenerationStepResultClient<$Result.GetResult<Prisma.$GenerationStepResultPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GenerationStepResult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenerationStepResultFindFirstArgs} args - Arguments to find a GenerationStepResult
     * @example
     * // Get one GenerationStepResult
     * const generationStepResult = await prisma.generationStepResult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GenerationStepResultFindFirstArgs>(args?: SelectSubset<T, GenerationStepResultFindFirstArgs<ExtArgs>>): Prisma__GenerationStepResultClient<$Result.GetResult<Prisma.$GenerationStepResultPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GenerationStepResult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenerationStepResultFindFirstOrThrowArgs} args - Arguments to find a GenerationStepResult
     * @example
     * // Get one GenerationStepResult
     * const generationStepResult = await prisma.generationStepResult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GenerationStepResultFindFirstOrThrowArgs>(args?: SelectSubset<T, GenerationStepResultFindFirstOrThrowArgs<ExtArgs>>): Prisma__GenerationStepResultClient<$Result.GetResult<Prisma.$GenerationStepResultPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GenerationStepResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenerationStepResultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GenerationStepResults
     * const generationStepResults = await prisma.generationStepResult.findMany()
     * 
     * // Get first 10 GenerationStepResults
     * const generationStepResults = await prisma.generationStepResult.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const generationStepResultWithIdOnly = await prisma.generationStepResult.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GenerationStepResultFindManyArgs>(args?: SelectSubset<T, GenerationStepResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GenerationStepResultPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GenerationStepResult.
     * @param {GenerationStepResultCreateArgs} args - Arguments to create a GenerationStepResult.
     * @example
     * // Create one GenerationStepResult
     * const GenerationStepResult = await prisma.generationStepResult.create({
     *   data: {
     *     // ... data to create a GenerationStepResult
     *   }
     * })
     * 
     */
    create<T extends GenerationStepResultCreateArgs>(args: SelectSubset<T, GenerationStepResultCreateArgs<ExtArgs>>): Prisma__GenerationStepResultClient<$Result.GetResult<Prisma.$GenerationStepResultPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GenerationStepResults.
     * @param {GenerationStepResultCreateManyArgs} args - Arguments to create many GenerationStepResults.
     * @example
     * // Create many GenerationStepResults
     * const generationStepResult = await prisma.generationStepResult.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GenerationStepResultCreateManyArgs>(args?: SelectSubset<T, GenerationStepResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GenerationStepResults and returns the data saved in the database.
     * @param {GenerationStepResultCreateManyAndReturnArgs} args - Arguments to create many GenerationStepResults.
     * @example
     * // Create many GenerationStepResults
     * const generationStepResult = await prisma.generationStepResult.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GenerationStepResults and only return the `id`
     * const generationStepResultWithIdOnly = await prisma.generationStepResult.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GenerationStepResultCreateManyAndReturnArgs>(args?: SelectSubset<T, GenerationStepResultCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GenerationStepResultPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a GenerationStepResult.
     * @param {GenerationStepResultDeleteArgs} args - Arguments to delete one GenerationStepResult.
     * @example
     * // Delete one GenerationStepResult
     * const GenerationStepResult = await prisma.generationStepResult.delete({
     *   where: {
     *     // ... filter to delete one GenerationStepResult
     *   }
     * })
     * 
     */
    delete<T extends GenerationStepResultDeleteArgs>(args: SelectSubset<T, GenerationStepResultDeleteArgs<ExtArgs>>): Prisma__GenerationStepResultClient<$Result.GetResult<Prisma.$GenerationStepResultPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GenerationStepResult.
     * @param {GenerationStepResultUpdateArgs} args - Arguments to update one GenerationStepResult.
     * @example
     * // Update one GenerationStepResult
     * const generationStepResult = await prisma.generationStepResult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GenerationStepResultUpdateArgs>(args: SelectSubset<T, GenerationStepResultUpdateArgs<ExtArgs>>): Prisma__GenerationStepResultClient<$Result.GetResult<Prisma.$GenerationStepResultPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GenerationStepResults.
     * @param {GenerationStepResultDeleteManyArgs} args - Arguments to filter GenerationStepResults to delete.
     * @example
     * // Delete a few GenerationStepResults
     * const { count } = await prisma.generationStepResult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GenerationStepResultDeleteManyArgs>(args?: SelectSubset<T, GenerationStepResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GenerationStepResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenerationStepResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GenerationStepResults
     * const generationStepResult = await prisma.generationStepResult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GenerationStepResultUpdateManyArgs>(args: SelectSubset<T, GenerationStepResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GenerationStepResult.
     * @param {GenerationStepResultUpsertArgs} args - Arguments to update or create a GenerationStepResult.
     * @example
     * // Update or create a GenerationStepResult
     * const generationStepResult = await prisma.generationStepResult.upsert({
     *   create: {
     *     // ... data to create a GenerationStepResult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GenerationStepResult we want to update
     *   }
     * })
     */
    upsert<T extends GenerationStepResultUpsertArgs>(args: SelectSubset<T, GenerationStepResultUpsertArgs<ExtArgs>>): Prisma__GenerationStepResultClient<$Result.GetResult<Prisma.$GenerationStepResultPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GenerationStepResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenerationStepResultCountArgs} args - Arguments to filter GenerationStepResults to count.
     * @example
     * // Count the number of GenerationStepResults
     * const count = await prisma.generationStepResult.count({
     *   where: {
     *     // ... the filter for the GenerationStepResults we want to count
     *   }
     * })
    **/
    count<T extends GenerationStepResultCountArgs>(
      args?: Subset<T, GenerationStepResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GenerationStepResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GenerationStepResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenerationStepResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GenerationStepResultAggregateArgs>(args: Subset<T, GenerationStepResultAggregateArgs>): Prisma.PrismaPromise<GetGenerationStepResultAggregateType<T>>

    /**
     * Group by GenerationStepResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenerationStepResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GenerationStepResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GenerationStepResultGroupByArgs['orderBy'] }
        : { orderBy?: GenerationStepResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GenerationStepResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGenerationStepResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GenerationStepResult model
   */
  readonly fields: GenerationStepResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GenerationStepResult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GenerationStepResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends ContentGenerationJobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContentGenerationJobDefaultArgs<ExtArgs>>): Prisma__ContentGenerationJobClient<$Result.GetResult<Prisma.$ContentGenerationJobPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GenerationStepResult model
   */ 
  interface GenerationStepResultFieldRefs {
    readonly id: FieldRef<"GenerationStepResult", 'String'>
    readonly jobId: FieldRef<"GenerationStepResult", 'String'>
    readonly step: FieldRef<"GenerationStepResult", 'GenerationStep'>
    readonly status: FieldRef<"GenerationStepResult", 'StepStatus'>
    readonly input: FieldRef<"GenerationStepResult", 'Json'>
    readonly output: FieldRef<"GenerationStepResult", 'Json'>
    readonly tokensUsed: FieldRef<"GenerationStepResult", 'Int'>
    readonly executedAt: FieldRef<"GenerationStepResult", 'DateTime'>
    readonly error: FieldRef<"GenerationStepResult", 'String'>
  }
    

  // Custom InputTypes
  /**
   * GenerationStepResult findUnique
   */
  export type GenerationStepResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenerationStepResult
     */
    select?: GenerationStepResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenerationStepResultInclude<ExtArgs> | null
    /**
     * Filter, which GenerationStepResult to fetch.
     */
    where: GenerationStepResultWhereUniqueInput
  }

  /**
   * GenerationStepResult findUniqueOrThrow
   */
  export type GenerationStepResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenerationStepResult
     */
    select?: GenerationStepResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenerationStepResultInclude<ExtArgs> | null
    /**
     * Filter, which GenerationStepResult to fetch.
     */
    where: GenerationStepResultWhereUniqueInput
  }

  /**
   * GenerationStepResult findFirst
   */
  export type GenerationStepResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenerationStepResult
     */
    select?: GenerationStepResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenerationStepResultInclude<ExtArgs> | null
    /**
     * Filter, which GenerationStepResult to fetch.
     */
    where?: GenerationStepResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GenerationStepResults to fetch.
     */
    orderBy?: GenerationStepResultOrderByWithRelationInput | GenerationStepResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GenerationStepResults.
     */
    cursor?: GenerationStepResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GenerationStepResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GenerationStepResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GenerationStepResults.
     */
    distinct?: GenerationStepResultScalarFieldEnum | GenerationStepResultScalarFieldEnum[]
  }

  /**
   * GenerationStepResult findFirstOrThrow
   */
  export type GenerationStepResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenerationStepResult
     */
    select?: GenerationStepResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenerationStepResultInclude<ExtArgs> | null
    /**
     * Filter, which GenerationStepResult to fetch.
     */
    where?: GenerationStepResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GenerationStepResults to fetch.
     */
    orderBy?: GenerationStepResultOrderByWithRelationInput | GenerationStepResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GenerationStepResults.
     */
    cursor?: GenerationStepResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GenerationStepResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GenerationStepResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GenerationStepResults.
     */
    distinct?: GenerationStepResultScalarFieldEnum | GenerationStepResultScalarFieldEnum[]
  }

  /**
   * GenerationStepResult findMany
   */
  export type GenerationStepResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenerationStepResult
     */
    select?: GenerationStepResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenerationStepResultInclude<ExtArgs> | null
    /**
     * Filter, which GenerationStepResults to fetch.
     */
    where?: GenerationStepResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GenerationStepResults to fetch.
     */
    orderBy?: GenerationStepResultOrderByWithRelationInput | GenerationStepResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GenerationStepResults.
     */
    cursor?: GenerationStepResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GenerationStepResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GenerationStepResults.
     */
    skip?: number
    distinct?: GenerationStepResultScalarFieldEnum | GenerationStepResultScalarFieldEnum[]
  }

  /**
   * GenerationStepResult create
   */
  export type GenerationStepResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenerationStepResult
     */
    select?: GenerationStepResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenerationStepResultInclude<ExtArgs> | null
    /**
     * The data needed to create a GenerationStepResult.
     */
    data: XOR<GenerationStepResultCreateInput, GenerationStepResultUncheckedCreateInput>
  }

  /**
   * GenerationStepResult createMany
   */
  export type GenerationStepResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GenerationStepResults.
     */
    data: GenerationStepResultCreateManyInput | GenerationStepResultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GenerationStepResult createManyAndReturn
   */
  export type GenerationStepResultCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenerationStepResult
     */
    select?: GenerationStepResultSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many GenerationStepResults.
     */
    data: GenerationStepResultCreateManyInput | GenerationStepResultCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenerationStepResultIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GenerationStepResult update
   */
  export type GenerationStepResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenerationStepResult
     */
    select?: GenerationStepResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenerationStepResultInclude<ExtArgs> | null
    /**
     * The data needed to update a GenerationStepResult.
     */
    data: XOR<GenerationStepResultUpdateInput, GenerationStepResultUncheckedUpdateInput>
    /**
     * Choose, which GenerationStepResult to update.
     */
    where: GenerationStepResultWhereUniqueInput
  }

  /**
   * GenerationStepResult updateMany
   */
  export type GenerationStepResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GenerationStepResults.
     */
    data: XOR<GenerationStepResultUpdateManyMutationInput, GenerationStepResultUncheckedUpdateManyInput>
    /**
     * Filter which GenerationStepResults to update
     */
    where?: GenerationStepResultWhereInput
  }

  /**
   * GenerationStepResult upsert
   */
  export type GenerationStepResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenerationStepResult
     */
    select?: GenerationStepResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenerationStepResultInclude<ExtArgs> | null
    /**
     * The filter to search for the GenerationStepResult to update in case it exists.
     */
    where: GenerationStepResultWhereUniqueInput
    /**
     * In case the GenerationStepResult found by the `where` argument doesn't exist, create a new GenerationStepResult with this data.
     */
    create: XOR<GenerationStepResultCreateInput, GenerationStepResultUncheckedCreateInput>
    /**
     * In case the GenerationStepResult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GenerationStepResultUpdateInput, GenerationStepResultUncheckedUpdateInput>
  }

  /**
   * GenerationStepResult delete
   */
  export type GenerationStepResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenerationStepResult
     */
    select?: GenerationStepResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenerationStepResultInclude<ExtArgs> | null
    /**
     * Filter which GenerationStepResult to delete.
     */
    where: GenerationStepResultWhereUniqueInput
  }

  /**
   * GenerationStepResult deleteMany
   */
  export type GenerationStepResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GenerationStepResults to delete
     */
    where?: GenerationStepResultWhereInput
  }

  /**
   * GenerationStepResult without action
   */
  export type GenerationStepResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenerationStepResult
     */
    select?: GenerationStepResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenerationStepResultInclude<ExtArgs> | null
  }


  /**
   * Model ContentVersion
   */

  export type AggregateContentVersion = {
    _count: ContentVersionCountAggregateOutputType | null
    _avg: ContentVersionAvgAggregateOutputType | null
    _sum: ContentVersionSumAggregateOutputType | null
    _min: ContentVersionMinAggregateOutputType | null
    _max: ContentVersionMaxAggregateOutputType | null
  }

  export type ContentVersionAvgAggregateOutputType = {
    versionNumber: number | null
  }

  export type ContentVersionSumAggregateOutputType = {
    versionNumber: number | null
  }

  export type ContentVersionMinAggregateOutputType = {
    id: string | null
    postId: string | null
    versionNumber: number | null
    finalImageUrl: string | null
    embeddedText: string | null
    publicationText: string | null
    cta: string | null
    createdAt: Date | null
  }

  export type ContentVersionMaxAggregateOutputType = {
    id: string | null
    postId: string | null
    versionNumber: number | null
    finalImageUrl: string | null
    embeddedText: string | null
    publicationText: string | null
    cta: string | null
    createdAt: Date | null
  }

  export type ContentVersionCountAggregateOutputType = {
    id: number
    postId: number
    versionNumber: number
    finalImageUrl: number
    embeddedText: number
    publicationText: number
    hashtags: number
    cta: number
    createdAt: number
    _all: number
  }


  export type ContentVersionAvgAggregateInputType = {
    versionNumber?: true
  }

  export type ContentVersionSumAggregateInputType = {
    versionNumber?: true
  }

  export type ContentVersionMinAggregateInputType = {
    id?: true
    postId?: true
    versionNumber?: true
    finalImageUrl?: true
    embeddedText?: true
    publicationText?: true
    cta?: true
    createdAt?: true
  }

  export type ContentVersionMaxAggregateInputType = {
    id?: true
    postId?: true
    versionNumber?: true
    finalImageUrl?: true
    embeddedText?: true
    publicationText?: true
    cta?: true
    createdAt?: true
  }

  export type ContentVersionCountAggregateInputType = {
    id?: true
    postId?: true
    versionNumber?: true
    finalImageUrl?: true
    embeddedText?: true
    publicationText?: true
    hashtags?: true
    cta?: true
    createdAt?: true
    _all?: true
  }

  export type ContentVersionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContentVersion to aggregate.
     */
    where?: ContentVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentVersions to fetch.
     */
    orderBy?: ContentVersionOrderByWithRelationInput | ContentVersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContentVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentVersions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentVersions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContentVersions
    **/
    _count?: true | ContentVersionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContentVersionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContentVersionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContentVersionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContentVersionMaxAggregateInputType
  }

  export type GetContentVersionAggregateType<T extends ContentVersionAggregateArgs> = {
        [P in keyof T & keyof AggregateContentVersion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContentVersion[P]>
      : GetScalarType<T[P], AggregateContentVersion[P]>
  }




  export type ContentVersionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContentVersionWhereInput
    orderBy?: ContentVersionOrderByWithAggregationInput | ContentVersionOrderByWithAggregationInput[]
    by: ContentVersionScalarFieldEnum[] | ContentVersionScalarFieldEnum
    having?: ContentVersionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContentVersionCountAggregateInputType | true
    _avg?: ContentVersionAvgAggregateInputType
    _sum?: ContentVersionSumAggregateInputType
    _min?: ContentVersionMinAggregateInputType
    _max?: ContentVersionMaxAggregateInputType
  }

  export type ContentVersionGroupByOutputType = {
    id: string
    postId: string
    versionNumber: number
    finalImageUrl: string | null
    embeddedText: string | null
    publicationText: string | null
    hashtags: string[]
    cta: string | null
    createdAt: Date
    _count: ContentVersionCountAggregateOutputType | null
    _avg: ContentVersionAvgAggregateOutputType | null
    _sum: ContentVersionSumAggregateOutputType | null
    _min: ContentVersionMinAggregateOutputType | null
    _max: ContentVersionMaxAggregateOutputType | null
  }

  type GetContentVersionGroupByPayload<T extends ContentVersionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContentVersionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContentVersionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContentVersionGroupByOutputType[P]>
            : GetScalarType<T[P], ContentVersionGroupByOutputType[P]>
        }
      >
    >


  export type ContentVersionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    versionNumber?: boolean
    finalImageUrl?: boolean
    embeddedText?: boolean
    publicationText?: boolean
    hashtags?: boolean
    cta?: boolean
    createdAt?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contentVersion"]>

  export type ContentVersionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    versionNumber?: boolean
    finalImageUrl?: boolean
    embeddedText?: boolean
    publicationText?: boolean
    hashtags?: boolean
    cta?: boolean
    createdAt?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contentVersion"]>

  export type ContentVersionSelectScalar = {
    id?: boolean
    postId?: boolean
    versionNumber?: boolean
    finalImageUrl?: boolean
    embeddedText?: boolean
    publicationText?: boolean
    hashtags?: boolean
    cta?: boolean
    createdAt?: boolean
  }

  export type ContentVersionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
  }
  export type ContentVersionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
  }

  export type $ContentVersionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContentVersion"
    objects: {
      post: Prisma.$PostPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      postId: string
      versionNumber: number
      finalImageUrl: string | null
      embeddedText: string | null
      publicationText: string | null
      hashtags: string[]
      cta: string | null
      createdAt: Date
    }, ExtArgs["result"]["contentVersion"]>
    composites: {}
  }

  type ContentVersionGetPayload<S extends boolean | null | undefined | ContentVersionDefaultArgs> = $Result.GetResult<Prisma.$ContentVersionPayload, S>

  type ContentVersionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContentVersionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContentVersionCountAggregateInputType | true
    }

  export interface ContentVersionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContentVersion'], meta: { name: 'ContentVersion' } }
    /**
     * Find zero or one ContentVersion that matches the filter.
     * @param {ContentVersionFindUniqueArgs} args - Arguments to find a ContentVersion
     * @example
     * // Get one ContentVersion
     * const contentVersion = await prisma.contentVersion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContentVersionFindUniqueArgs>(args: SelectSubset<T, ContentVersionFindUniqueArgs<ExtArgs>>): Prisma__ContentVersionClient<$Result.GetResult<Prisma.$ContentVersionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ContentVersion that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ContentVersionFindUniqueOrThrowArgs} args - Arguments to find a ContentVersion
     * @example
     * // Get one ContentVersion
     * const contentVersion = await prisma.contentVersion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContentVersionFindUniqueOrThrowArgs>(args: SelectSubset<T, ContentVersionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContentVersionClient<$Result.GetResult<Prisma.$ContentVersionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ContentVersion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentVersionFindFirstArgs} args - Arguments to find a ContentVersion
     * @example
     * // Get one ContentVersion
     * const contentVersion = await prisma.contentVersion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContentVersionFindFirstArgs>(args?: SelectSubset<T, ContentVersionFindFirstArgs<ExtArgs>>): Prisma__ContentVersionClient<$Result.GetResult<Prisma.$ContentVersionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ContentVersion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentVersionFindFirstOrThrowArgs} args - Arguments to find a ContentVersion
     * @example
     * // Get one ContentVersion
     * const contentVersion = await prisma.contentVersion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContentVersionFindFirstOrThrowArgs>(args?: SelectSubset<T, ContentVersionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContentVersionClient<$Result.GetResult<Prisma.$ContentVersionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ContentVersions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentVersionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContentVersions
     * const contentVersions = await prisma.contentVersion.findMany()
     * 
     * // Get first 10 ContentVersions
     * const contentVersions = await prisma.contentVersion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contentVersionWithIdOnly = await prisma.contentVersion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContentVersionFindManyArgs>(args?: SelectSubset<T, ContentVersionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentVersionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ContentVersion.
     * @param {ContentVersionCreateArgs} args - Arguments to create a ContentVersion.
     * @example
     * // Create one ContentVersion
     * const ContentVersion = await prisma.contentVersion.create({
     *   data: {
     *     // ... data to create a ContentVersion
     *   }
     * })
     * 
     */
    create<T extends ContentVersionCreateArgs>(args: SelectSubset<T, ContentVersionCreateArgs<ExtArgs>>): Prisma__ContentVersionClient<$Result.GetResult<Prisma.$ContentVersionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ContentVersions.
     * @param {ContentVersionCreateManyArgs} args - Arguments to create many ContentVersions.
     * @example
     * // Create many ContentVersions
     * const contentVersion = await prisma.contentVersion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContentVersionCreateManyArgs>(args?: SelectSubset<T, ContentVersionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContentVersions and returns the data saved in the database.
     * @param {ContentVersionCreateManyAndReturnArgs} args - Arguments to create many ContentVersions.
     * @example
     * // Create many ContentVersions
     * const contentVersion = await prisma.contentVersion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContentVersions and only return the `id`
     * const contentVersionWithIdOnly = await prisma.contentVersion.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContentVersionCreateManyAndReturnArgs>(args?: SelectSubset<T, ContentVersionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentVersionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ContentVersion.
     * @param {ContentVersionDeleteArgs} args - Arguments to delete one ContentVersion.
     * @example
     * // Delete one ContentVersion
     * const ContentVersion = await prisma.contentVersion.delete({
     *   where: {
     *     // ... filter to delete one ContentVersion
     *   }
     * })
     * 
     */
    delete<T extends ContentVersionDeleteArgs>(args: SelectSubset<T, ContentVersionDeleteArgs<ExtArgs>>): Prisma__ContentVersionClient<$Result.GetResult<Prisma.$ContentVersionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ContentVersion.
     * @param {ContentVersionUpdateArgs} args - Arguments to update one ContentVersion.
     * @example
     * // Update one ContentVersion
     * const contentVersion = await prisma.contentVersion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContentVersionUpdateArgs>(args: SelectSubset<T, ContentVersionUpdateArgs<ExtArgs>>): Prisma__ContentVersionClient<$Result.GetResult<Prisma.$ContentVersionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ContentVersions.
     * @param {ContentVersionDeleteManyArgs} args - Arguments to filter ContentVersions to delete.
     * @example
     * // Delete a few ContentVersions
     * const { count } = await prisma.contentVersion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContentVersionDeleteManyArgs>(args?: SelectSubset<T, ContentVersionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContentVersions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentVersionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContentVersions
     * const contentVersion = await prisma.contentVersion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContentVersionUpdateManyArgs>(args: SelectSubset<T, ContentVersionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ContentVersion.
     * @param {ContentVersionUpsertArgs} args - Arguments to update or create a ContentVersion.
     * @example
     * // Update or create a ContentVersion
     * const contentVersion = await prisma.contentVersion.upsert({
     *   create: {
     *     // ... data to create a ContentVersion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContentVersion we want to update
     *   }
     * })
     */
    upsert<T extends ContentVersionUpsertArgs>(args: SelectSubset<T, ContentVersionUpsertArgs<ExtArgs>>): Prisma__ContentVersionClient<$Result.GetResult<Prisma.$ContentVersionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ContentVersions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentVersionCountArgs} args - Arguments to filter ContentVersions to count.
     * @example
     * // Count the number of ContentVersions
     * const count = await prisma.contentVersion.count({
     *   where: {
     *     // ... the filter for the ContentVersions we want to count
     *   }
     * })
    **/
    count<T extends ContentVersionCountArgs>(
      args?: Subset<T, ContentVersionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContentVersionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContentVersion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentVersionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContentVersionAggregateArgs>(args: Subset<T, ContentVersionAggregateArgs>): Prisma.PrismaPromise<GetContentVersionAggregateType<T>>

    /**
     * Group by ContentVersion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentVersionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContentVersionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContentVersionGroupByArgs['orderBy'] }
        : { orderBy?: ContentVersionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContentVersionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContentVersionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContentVersion model
   */
  readonly fields: ContentVersionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContentVersion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContentVersionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContentVersion model
   */ 
  interface ContentVersionFieldRefs {
    readonly id: FieldRef<"ContentVersion", 'String'>
    readonly postId: FieldRef<"ContentVersion", 'String'>
    readonly versionNumber: FieldRef<"ContentVersion", 'Int'>
    readonly finalImageUrl: FieldRef<"ContentVersion", 'String'>
    readonly embeddedText: FieldRef<"ContentVersion", 'String'>
    readonly publicationText: FieldRef<"ContentVersion", 'String'>
    readonly hashtags: FieldRef<"ContentVersion", 'String[]'>
    readonly cta: FieldRef<"ContentVersion", 'String'>
    readonly createdAt: FieldRef<"ContentVersion", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ContentVersion findUnique
   */
  export type ContentVersionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentVersion
     */
    select?: ContentVersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentVersionInclude<ExtArgs> | null
    /**
     * Filter, which ContentVersion to fetch.
     */
    where: ContentVersionWhereUniqueInput
  }

  /**
   * ContentVersion findUniqueOrThrow
   */
  export type ContentVersionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentVersion
     */
    select?: ContentVersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentVersionInclude<ExtArgs> | null
    /**
     * Filter, which ContentVersion to fetch.
     */
    where: ContentVersionWhereUniqueInput
  }

  /**
   * ContentVersion findFirst
   */
  export type ContentVersionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentVersion
     */
    select?: ContentVersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentVersionInclude<ExtArgs> | null
    /**
     * Filter, which ContentVersion to fetch.
     */
    where?: ContentVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentVersions to fetch.
     */
    orderBy?: ContentVersionOrderByWithRelationInput | ContentVersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContentVersions.
     */
    cursor?: ContentVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentVersions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentVersions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContentVersions.
     */
    distinct?: ContentVersionScalarFieldEnum | ContentVersionScalarFieldEnum[]
  }

  /**
   * ContentVersion findFirstOrThrow
   */
  export type ContentVersionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentVersion
     */
    select?: ContentVersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentVersionInclude<ExtArgs> | null
    /**
     * Filter, which ContentVersion to fetch.
     */
    where?: ContentVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentVersions to fetch.
     */
    orderBy?: ContentVersionOrderByWithRelationInput | ContentVersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContentVersions.
     */
    cursor?: ContentVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentVersions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentVersions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContentVersions.
     */
    distinct?: ContentVersionScalarFieldEnum | ContentVersionScalarFieldEnum[]
  }

  /**
   * ContentVersion findMany
   */
  export type ContentVersionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentVersion
     */
    select?: ContentVersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentVersionInclude<ExtArgs> | null
    /**
     * Filter, which ContentVersions to fetch.
     */
    where?: ContentVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentVersions to fetch.
     */
    orderBy?: ContentVersionOrderByWithRelationInput | ContentVersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContentVersions.
     */
    cursor?: ContentVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentVersions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentVersions.
     */
    skip?: number
    distinct?: ContentVersionScalarFieldEnum | ContentVersionScalarFieldEnum[]
  }

  /**
   * ContentVersion create
   */
  export type ContentVersionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentVersion
     */
    select?: ContentVersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentVersionInclude<ExtArgs> | null
    /**
     * The data needed to create a ContentVersion.
     */
    data: XOR<ContentVersionCreateInput, ContentVersionUncheckedCreateInput>
  }

  /**
   * ContentVersion createMany
   */
  export type ContentVersionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContentVersions.
     */
    data: ContentVersionCreateManyInput | ContentVersionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContentVersion createManyAndReturn
   */
  export type ContentVersionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentVersion
     */
    select?: ContentVersionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ContentVersions.
     */
    data: ContentVersionCreateManyInput | ContentVersionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentVersionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContentVersion update
   */
  export type ContentVersionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentVersion
     */
    select?: ContentVersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentVersionInclude<ExtArgs> | null
    /**
     * The data needed to update a ContentVersion.
     */
    data: XOR<ContentVersionUpdateInput, ContentVersionUncheckedUpdateInput>
    /**
     * Choose, which ContentVersion to update.
     */
    where: ContentVersionWhereUniqueInput
  }

  /**
   * ContentVersion updateMany
   */
  export type ContentVersionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContentVersions.
     */
    data: XOR<ContentVersionUpdateManyMutationInput, ContentVersionUncheckedUpdateManyInput>
    /**
     * Filter which ContentVersions to update
     */
    where?: ContentVersionWhereInput
  }

  /**
   * ContentVersion upsert
   */
  export type ContentVersionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentVersion
     */
    select?: ContentVersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentVersionInclude<ExtArgs> | null
    /**
     * The filter to search for the ContentVersion to update in case it exists.
     */
    where: ContentVersionWhereUniqueInput
    /**
     * In case the ContentVersion found by the `where` argument doesn't exist, create a new ContentVersion with this data.
     */
    create: XOR<ContentVersionCreateInput, ContentVersionUncheckedCreateInput>
    /**
     * In case the ContentVersion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContentVersionUpdateInput, ContentVersionUncheckedUpdateInput>
  }

  /**
   * ContentVersion delete
   */
  export type ContentVersionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentVersion
     */
    select?: ContentVersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentVersionInclude<ExtArgs> | null
    /**
     * Filter which ContentVersion to delete.
     */
    where: ContentVersionWhereUniqueInput
  }

  /**
   * ContentVersion deleteMany
   */
  export type ContentVersionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContentVersions to delete
     */
    where?: ContentVersionWhereInput
  }

  /**
   * ContentVersion without action
   */
  export type ContentVersionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentVersion
     */
    select?: ContentVersionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentVersionInclude<ExtArgs> | null
  }


  /**
   * Model SocialAccount
   */

  export type AggregateSocialAccount = {
    _count: SocialAccountCountAggregateOutputType | null
    _min: SocialAccountMinAggregateOutputType | null
    _max: SocialAccountMaxAggregateOutputType | null
  }

  export type SocialAccountMinAggregateOutputType = {
    id: string | null
    clientId: string | null
    platform: $Enums.SocialPlatform | null
    accountId: string | null
    accountName: string | null
    accessToken: string | null
    refreshToken: string | null
    expiresAt: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SocialAccountMaxAggregateOutputType = {
    id: string | null
    clientId: string | null
    platform: $Enums.SocialPlatform | null
    accountId: string | null
    accountName: string | null
    accessToken: string | null
    refreshToken: string | null
    expiresAt: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SocialAccountCountAggregateOutputType = {
    id: number
    clientId: number
    platform: number
    accountId: number
    accountName: number
    accessToken: number
    refreshToken: number
    expiresAt: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SocialAccountMinAggregateInputType = {
    id?: true
    clientId?: true
    platform?: true
    accountId?: true
    accountName?: true
    accessToken?: true
    refreshToken?: true
    expiresAt?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SocialAccountMaxAggregateInputType = {
    id?: true
    clientId?: true
    platform?: true
    accountId?: true
    accountName?: true
    accessToken?: true
    refreshToken?: true
    expiresAt?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SocialAccountCountAggregateInputType = {
    id?: true
    clientId?: true
    platform?: true
    accountId?: true
    accountName?: true
    accessToken?: true
    refreshToken?: true
    expiresAt?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SocialAccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SocialAccount to aggregate.
     */
    where?: SocialAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialAccounts to fetch.
     */
    orderBy?: SocialAccountOrderByWithRelationInput | SocialAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SocialAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SocialAccounts
    **/
    _count?: true | SocialAccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SocialAccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SocialAccountMaxAggregateInputType
  }

  export type GetSocialAccountAggregateType<T extends SocialAccountAggregateArgs> = {
        [P in keyof T & keyof AggregateSocialAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSocialAccount[P]>
      : GetScalarType<T[P], AggregateSocialAccount[P]>
  }




  export type SocialAccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SocialAccountWhereInput
    orderBy?: SocialAccountOrderByWithAggregationInput | SocialAccountOrderByWithAggregationInput[]
    by: SocialAccountScalarFieldEnum[] | SocialAccountScalarFieldEnum
    having?: SocialAccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SocialAccountCountAggregateInputType | true
    _min?: SocialAccountMinAggregateInputType
    _max?: SocialAccountMaxAggregateInputType
  }

  export type SocialAccountGroupByOutputType = {
    id: string
    clientId: string
    platform: $Enums.SocialPlatform
    accountId: string
    accountName: string | null
    accessToken: string
    refreshToken: string | null
    expiresAt: Date | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: SocialAccountCountAggregateOutputType | null
    _min: SocialAccountMinAggregateOutputType | null
    _max: SocialAccountMaxAggregateOutputType | null
  }

  type GetSocialAccountGroupByPayload<T extends SocialAccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SocialAccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SocialAccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SocialAccountGroupByOutputType[P]>
            : GetScalarType<T[P], SocialAccountGroupByOutputType[P]>
        }
      >
    >


  export type SocialAccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    platform?: boolean
    accountId?: boolean
    accountName?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
    publications?: boolean | SocialAccount$publicationsArgs<ExtArgs>
    _count?: boolean | SocialAccountCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["socialAccount"]>

  export type SocialAccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    platform?: boolean
    accountId?: boolean
    accountName?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["socialAccount"]>

  export type SocialAccountSelectScalar = {
    id?: boolean
    clientId?: boolean
    platform?: boolean
    accountId?: boolean
    accountName?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SocialAccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
    publications?: boolean | SocialAccount$publicationsArgs<ExtArgs>
    _count?: boolean | SocialAccountCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SocialAccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }

  export type $SocialAccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SocialAccount"
    objects: {
      client: Prisma.$ClientPayload<ExtArgs>
      publications: Prisma.$PublicationResultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clientId: string
      platform: $Enums.SocialPlatform
      accountId: string
      accountName: string | null
      accessToken: string
      refreshToken: string | null
      expiresAt: Date | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["socialAccount"]>
    composites: {}
  }

  type SocialAccountGetPayload<S extends boolean | null | undefined | SocialAccountDefaultArgs> = $Result.GetResult<Prisma.$SocialAccountPayload, S>

  type SocialAccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SocialAccountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SocialAccountCountAggregateInputType | true
    }

  export interface SocialAccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SocialAccount'], meta: { name: 'SocialAccount' } }
    /**
     * Find zero or one SocialAccount that matches the filter.
     * @param {SocialAccountFindUniqueArgs} args - Arguments to find a SocialAccount
     * @example
     * // Get one SocialAccount
     * const socialAccount = await prisma.socialAccount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SocialAccountFindUniqueArgs>(args: SelectSubset<T, SocialAccountFindUniqueArgs<ExtArgs>>): Prisma__SocialAccountClient<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SocialAccount that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SocialAccountFindUniqueOrThrowArgs} args - Arguments to find a SocialAccount
     * @example
     * // Get one SocialAccount
     * const socialAccount = await prisma.socialAccount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SocialAccountFindUniqueOrThrowArgs>(args: SelectSubset<T, SocialAccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SocialAccountClient<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SocialAccount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialAccountFindFirstArgs} args - Arguments to find a SocialAccount
     * @example
     * // Get one SocialAccount
     * const socialAccount = await prisma.socialAccount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SocialAccountFindFirstArgs>(args?: SelectSubset<T, SocialAccountFindFirstArgs<ExtArgs>>): Prisma__SocialAccountClient<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SocialAccount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialAccountFindFirstOrThrowArgs} args - Arguments to find a SocialAccount
     * @example
     * // Get one SocialAccount
     * const socialAccount = await prisma.socialAccount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SocialAccountFindFirstOrThrowArgs>(args?: SelectSubset<T, SocialAccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__SocialAccountClient<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SocialAccounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialAccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SocialAccounts
     * const socialAccounts = await prisma.socialAccount.findMany()
     * 
     * // Get first 10 SocialAccounts
     * const socialAccounts = await prisma.socialAccount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const socialAccountWithIdOnly = await prisma.socialAccount.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SocialAccountFindManyArgs>(args?: SelectSubset<T, SocialAccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SocialAccount.
     * @param {SocialAccountCreateArgs} args - Arguments to create a SocialAccount.
     * @example
     * // Create one SocialAccount
     * const SocialAccount = await prisma.socialAccount.create({
     *   data: {
     *     // ... data to create a SocialAccount
     *   }
     * })
     * 
     */
    create<T extends SocialAccountCreateArgs>(args: SelectSubset<T, SocialAccountCreateArgs<ExtArgs>>): Prisma__SocialAccountClient<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SocialAccounts.
     * @param {SocialAccountCreateManyArgs} args - Arguments to create many SocialAccounts.
     * @example
     * // Create many SocialAccounts
     * const socialAccount = await prisma.socialAccount.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SocialAccountCreateManyArgs>(args?: SelectSubset<T, SocialAccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SocialAccounts and returns the data saved in the database.
     * @param {SocialAccountCreateManyAndReturnArgs} args - Arguments to create many SocialAccounts.
     * @example
     * // Create many SocialAccounts
     * const socialAccount = await prisma.socialAccount.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SocialAccounts and only return the `id`
     * const socialAccountWithIdOnly = await prisma.socialAccount.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SocialAccountCreateManyAndReturnArgs>(args?: SelectSubset<T, SocialAccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SocialAccount.
     * @param {SocialAccountDeleteArgs} args - Arguments to delete one SocialAccount.
     * @example
     * // Delete one SocialAccount
     * const SocialAccount = await prisma.socialAccount.delete({
     *   where: {
     *     // ... filter to delete one SocialAccount
     *   }
     * })
     * 
     */
    delete<T extends SocialAccountDeleteArgs>(args: SelectSubset<T, SocialAccountDeleteArgs<ExtArgs>>): Prisma__SocialAccountClient<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SocialAccount.
     * @param {SocialAccountUpdateArgs} args - Arguments to update one SocialAccount.
     * @example
     * // Update one SocialAccount
     * const socialAccount = await prisma.socialAccount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SocialAccountUpdateArgs>(args: SelectSubset<T, SocialAccountUpdateArgs<ExtArgs>>): Prisma__SocialAccountClient<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SocialAccounts.
     * @param {SocialAccountDeleteManyArgs} args - Arguments to filter SocialAccounts to delete.
     * @example
     * // Delete a few SocialAccounts
     * const { count } = await prisma.socialAccount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SocialAccountDeleteManyArgs>(args?: SelectSubset<T, SocialAccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SocialAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialAccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SocialAccounts
     * const socialAccount = await prisma.socialAccount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SocialAccountUpdateManyArgs>(args: SelectSubset<T, SocialAccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SocialAccount.
     * @param {SocialAccountUpsertArgs} args - Arguments to update or create a SocialAccount.
     * @example
     * // Update or create a SocialAccount
     * const socialAccount = await prisma.socialAccount.upsert({
     *   create: {
     *     // ... data to create a SocialAccount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SocialAccount we want to update
     *   }
     * })
     */
    upsert<T extends SocialAccountUpsertArgs>(args: SelectSubset<T, SocialAccountUpsertArgs<ExtArgs>>): Prisma__SocialAccountClient<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SocialAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialAccountCountArgs} args - Arguments to filter SocialAccounts to count.
     * @example
     * // Count the number of SocialAccounts
     * const count = await prisma.socialAccount.count({
     *   where: {
     *     // ... the filter for the SocialAccounts we want to count
     *   }
     * })
    **/
    count<T extends SocialAccountCountArgs>(
      args?: Subset<T, SocialAccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SocialAccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SocialAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SocialAccountAggregateArgs>(args: Subset<T, SocialAccountAggregateArgs>): Prisma.PrismaPromise<GetSocialAccountAggregateType<T>>

    /**
     * Group by SocialAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialAccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SocialAccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SocialAccountGroupByArgs['orderBy'] }
        : { orderBy?: SocialAccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SocialAccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSocialAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SocialAccount model
   */
  readonly fields: SocialAccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SocialAccount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SocialAccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    publications<T extends SocialAccount$publicationsArgs<ExtArgs> = {}>(args?: Subset<T, SocialAccount$publicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublicationResultPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SocialAccount model
   */ 
  interface SocialAccountFieldRefs {
    readonly id: FieldRef<"SocialAccount", 'String'>
    readonly clientId: FieldRef<"SocialAccount", 'String'>
    readonly platform: FieldRef<"SocialAccount", 'SocialPlatform'>
    readonly accountId: FieldRef<"SocialAccount", 'String'>
    readonly accountName: FieldRef<"SocialAccount", 'String'>
    readonly accessToken: FieldRef<"SocialAccount", 'String'>
    readonly refreshToken: FieldRef<"SocialAccount", 'String'>
    readonly expiresAt: FieldRef<"SocialAccount", 'DateTime'>
    readonly isActive: FieldRef<"SocialAccount", 'Boolean'>
    readonly createdAt: FieldRef<"SocialAccount", 'DateTime'>
    readonly updatedAt: FieldRef<"SocialAccount", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SocialAccount findUnique
   */
  export type SocialAccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialAccountInclude<ExtArgs> | null
    /**
     * Filter, which SocialAccount to fetch.
     */
    where: SocialAccountWhereUniqueInput
  }

  /**
   * SocialAccount findUniqueOrThrow
   */
  export type SocialAccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialAccountInclude<ExtArgs> | null
    /**
     * Filter, which SocialAccount to fetch.
     */
    where: SocialAccountWhereUniqueInput
  }

  /**
   * SocialAccount findFirst
   */
  export type SocialAccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialAccountInclude<ExtArgs> | null
    /**
     * Filter, which SocialAccount to fetch.
     */
    where?: SocialAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialAccounts to fetch.
     */
    orderBy?: SocialAccountOrderByWithRelationInput | SocialAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SocialAccounts.
     */
    cursor?: SocialAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SocialAccounts.
     */
    distinct?: SocialAccountScalarFieldEnum | SocialAccountScalarFieldEnum[]
  }

  /**
   * SocialAccount findFirstOrThrow
   */
  export type SocialAccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialAccountInclude<ExtArgs> | null
    /**
     * Filter, which SocialAccount to fetch.
     */
    where?: SocialAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialAccounts to fetch.
     */
    orderBy?: SocialAccountOrderByWithRelationInput | SocialAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SocialAccounts.
     */
    cursor?: SocialAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SocialAccounts.
     */
    distinct?: SocialAccountScalarFieldEnum | SocialAccountScalarFieldEnum[]
  }

  /**
   * SocialAccount findMany
   */
  export type SocialAccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialAccountInclude<ExtArgs> | null
    /**
     * Filter, which SocialAccounts to fetch.
     */
    where?: SocialAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialAccounts to fetch.
     */
    orderBy?: SocialAccountOrderByWithRelationInput | SocialAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SocialAccounts.
     */
    cursor?: SocialAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialAccounts.
     */
    skip?: number
    distinct?: SocialAccountScalarFieldEnum | SocialAccountScalarFieldEnum[]
  }

  /**
   * SocialAccount create
   */
  export type SocialAccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialAccountInclude<ExtArgs> | null
    /**
     * The data needed to create a SocialAccount.
     */
    data: XOR<SocialAccountCreateInput, SocialAccountUncheckedCreateInput>
  }

  /**
   * SocialAccount createMany
   */
  export type SocialAccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SocialAccounts.
     */
    data: SocialAccountCreateManyInput | SocialAccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SocialAccount createManyAndReturn
   */
  export type SocialAccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SocialAccounts.
     */
    data: SocialAccountCreateManyInput | SocialAccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialAccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SocialAccount update
   */
  export type SocialAccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialAccountInclude<ExtArgs> | null
    /**
     * The data needed to update a SocialAccount.
     */
    data: XOR<SocialAccountUpdateInput, SocialAccountUncheckedUpdateInput>
    /**
     * Choose, which SocialAccount to update.
     */
    where: SocialAccountWhereUniqueInput
  }

  /**
   * SocialAccount updateMany
   */
  export type SocialAccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SocialAccounts.
     */
    data: XOR<SocialAccountUpdateManyMutationInput, SocialAccountUncheckedUpdateManyInput>
    /**
     * Filter which SocialAccounts to update
     */
    where?: SocialAccountWhereInput
  }

  /**
   * SocialAccount upsert
   */
  export type SocialAccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialAccountInclude<ExtArgs> | null
    /**
     * The filter to search for the SocialAccount to update in case it exists.
     */
    where: SocialAccountWhereUniqueInput
    /**
     * In case the SocialAccount found by the `where` argument doesn't exist, create a new SocialAccount with this data.
     */
    create: XOR<SocialAccountCreateInput, SocialAccountUncheckedCreateInput>
    /**
     * In case the SocialAccount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SocialAccountUpdateInput, SocialAccountUncheckedUpdateInput>
  }

  /**
   * SocialAccount delete
   */
  export type SocialAccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialAccountInclude<ExtArgs> | null
    /**
     * Filter which SocialAccount to delete.
     */
    where: SocialAccountWhereUniqueInput
  }

  /**
   * SocialAccount deleteMany
   */
  export type SocialAccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SocialAccounts to delete
     */
    where?: SocialAccountWhereInput
  }

  /**
   * SocialAccount.publications
   */
  export type SocialAccount$publicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicationResult
     */
    select?: PublicationResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicationResultInclude<ExtArgs> | null
    where?: PublicationResultWhereInput
    orderBy?: PublicationResultOrderByWithRelationInput | PublicationResultOrderByWithRelationInput[]
    cursor?: PublicationResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PublicationResultScalarFieldEnum | PublicationResultScalarFieldEnum[]
  }

  /**
   * SocialAccount without action
   */
  export type SocialAccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialAccountInclude<ExtArgs> | null
  }


  /**
   * Model PublicationResult
   */

  export type AggregatePublicationResult = {
    _count: PublicationResultCountAggregateOutputType | null
    _min: PublicationResultMinAggregateOutputType | null
    _max: PublicationResultMaxAggregateOutputType | null
  }

  export type PublicationResultMinAggregateOutputType = {
    id: string | null
    postId: string | null
    socialAccountId: string | null
    platformPostId: string | null
    status: $Enums.PublicationStatus | null
    publishedAt: Date | null
    error: string | null
    createdAt: Date | null
  }

  export type PublicationResultMaxAggregateOutputType = {
    id: string | null
    postId: string | null
    socialAccountId: string | null
    platformPostId: string | null
    status: $Enums.PublicationStatus | null
    publishedAt: Date | null
    error: string | null
    createdAt: Date | null
  }

  export type PublicationResultCountAggregateOutputType = {
    id: number
    postId: number
    socialAccountId: number
    platformPostId: number
    status: number
    publishedAt: number
    error: number
    createdAt: number
    _all: number
  }


  export type PublicationResultMinAggregateInputType = {
    id?: true
    postId?: true
    socialAccountId?: true
    platformPostId?: true
    status?: true
    publishedAt?: true
    error?: true
    createdAt?: true
  }

  export type PublicationResultMaxAggregateInputType = {
    id?: true
    postId?: true
    socialAccountId?: true
    platformPostId?: true
    status?: true
    publishedAt?: true
    error?: true
    createdAt?: true
  }

  export type PublicationResultCountAggregateInputType = {
    id?: true
    postId?: true
    socialAccountId?: true
    platformPostId?: true
    status?: true
    publishedAt?: true
    error?: true
    createdAt?: true
    _all?: true
  }

  export type PublicationResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PublicationResult to aggregate.
     */
    where?: PublicationResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PublicationResults to fetch.
     */
    orderBy?: PublicationResultOrderByWithRelationInput | PublicationResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PublicationResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PublicationResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PublicationResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PublicationResults
    **/
    _count?: true | PublicationResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PublicationResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PublicationResultMaxAggregateInputType
  }

  export type GetPublicationResultAggregateType<T extends PublicationResultAggregateArgs> = {
        [P in keyof T & keyof AggregatePublicationResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePublicationResult[P]>
      : GetScalarType<T[P], AggregatePublicationResult[P]>
  }




  export type PublicationResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PublicationResultWhereInput
    orderBy?: PublicationResultOrderByWithAggregationInput | PublicationResultOrderByWithAggregationInput[]
    by: PublicationResultScalarFieldEnum[] | PublicationResultScalarFieldEnum
    having?: PublicationResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PublicationResultCountAggregateInputType | true
    _min?: PublicationResultMinAggregateInputType
    _max?: PublicationResultMaxAggregateInputType
  }

  export type PublicationResultGroupByOutputType = {
    id: string
    postId: string
    socialAccountId: string
    platformPostId: string | null
    status: $Enums.PublicationStatus
    publishedAt: Date | null
    error: string | null
    createdAt: Date
    _count: PublicationResultCountAggregateOutputType | null
    _min: PublicationResultMinAggregateOutputType | null
    _max: PublicationResultMaxAggregateOutputType | null
  }

  type GetPublicationResultGroupByPayload<T extends PublicationResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PublicationResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PublicationResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PublicationResultGroupByOutputType[P]>
            : GetScalarType<T[P], PublicationResultGroupByOutputType[P]>
        }
      >
    >


  export type PublicationResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    socialAccountId?: boolean
    platformPostId?: boolean
    status?: boolean
    publishedAt?: boolean
    error?: boolean
    createdAt?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
    socialAccount?: boolean | SocialAccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["publicationResult"]>

  export type PublicationResultSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    postId?: boolean
    socialAccountId?: boolean
    platformPostId?: boolean
    status?: boolean
    publishedAt?: boolean
    error?: boolean
    createdAt?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
    socialAccount?: boolean | SocialAccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["publicationResult"]>

  export type PublicationResultSelectScalar = {
    id?: boolean
    postId?: boolean
    socialAccountId?: boolean
    platformPostId?: boolean
    status?: boolean
    publishedAt?: boolean
    error?: boolean
    createdAt?: boolean
  }

  export type PublicationResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
    socialAccount?: boolean | SocialAccountDefaultArgs<ExtArgs>
  }
  export type PublicationResultIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
    socialAccount?: boolean | SocialAccountDefaultArgs<ExtArgs>
  }

  export type $PublicationResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PublicationResult"
    objects: {
      post: Prisma.$PostPayload<ExtArgs>
      socialAccount: Prisma.$SocialAccountPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      postId: string
      socialAccountId: string
      platformPostId: string | null
      status: $Enums.PublicationStatus
      publishedAt: Date | null
      error: string | null
      createdAt: Date
    }, ExtArgs["result"]["publicationResult"]>
    composites: {}
  }

  type PublicationResultGetPayload<S extends boolean | null | undefined | PublicationResultDefaultArgs> = $Result.GetResult<Prisma.$PublicationResultPayload, S>

  type PublicationResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PublicationResultFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PublicationResultCountAggregateInputType | true
    }

  export interface PublicationResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PublicationResult'], meta: { name: 'PublicationResult' } }
    /**
     * Find zero or one PublicationResult that matches the filter.
     * @param {PublicationResultFindUniqueArgs} args - Arguments to find a PublicationResult
     * @example
     * // Get one PublicationResult
     * const publicationResult = await prisma.publicationResult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PublicationResultFindUniqueArgs>(args: SelectSubset<T, PublicationResultFindUniqueArgs<ExtArgs>>): Prisma__PublicationResultClient<$Result.GetResult<Prisma.$PublicationResultPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PublicationResult that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PublicationResultFindUniqueOrThrowArgs} args - Arguments to find a PublicationResult
     * @example
     * // Get one PublicationResult
     * const publicationResult = await prisma.publicationResult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PublicationResultFindUniqueOrThrowArgs>(args: SelectSubset<T, PublicationResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PublicationResultClient<$Result.GetResult<Prisma.$PublicationResultPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PublicationResult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicationResultFindFirstArgs} args - Arguments to find a PublicationResult
     * @example
     * // Get one PublicationResult
     * const publicationResult = await prisma.publicationResult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PublicationResultFindFirstArgs>(args?: SelectSubset<T, PublicationResultFindFirstArgs<ExtArgs>>): Prisma__PublicationResultClient<$Result.GetResult<Prisma.$PublicationResultPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PublicationResult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicationResultFindFirstOrThrowArgs} args - Arguments to find a PublicationResult
     * @example
     * // Get one PublicationResult
     * const publicationResult = await prisma.publicationResult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PublicationResultFindFirstOrThrowArgs>(args?: SelectSubset<T, PublicationResultFindFirstOrThrowArgs<ExtArgs>>): Prisma__PublicationResultClient<$Result.GetResult<Prisma.$PublicationResultPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PublicationResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicationResultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PublicationResults
     * const publicationResults = await prisma.publicationResult.findMany()
     * 
     * // Get first 10 PublicationResults
     * const publicationResults = await prisma.publicationResult.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const publicationResultWithIdOnly = await prisma.publicationResult.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PublicationResultFindManyArgs>(args?: SelectSubset<T, PublicationResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublicationResultPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PublicationResult.
     * @param {PublicationResultCreateArgs} args - Arguments to create a PublicationResult.
     * @example
     * // Create one PublicationResult
     * const PublicationResult = await prisma.publicationResult.create({
     *   data: {
     *     // ... data to create a PublicationResult
     *   }
     * })
     * 
     */
    create<T extends PublicationResultCreateArgs>(args: SelectSubset<T, PublicationResultCreateArgs<ExtArgs>>): Prisma__PublicationResultClient<$Result.GetResult<Prisma.$PublicationResultPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PublicationResults.
     * @param {PublicationResultCreateManyArgs} args - Arguments to create many PublicationResults.
     * @example
     * // Create many PublicationResults
     * const publicationResult = await prisma.publicationResult.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PublicationResultCreateManyArgs>(args?: SelectSubset<T, PublicationResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PublicationResults and returns the data saved in the database.
     * @param {PublicationResultCreateManyAndReturnArgs} args - Arguments to create many PublicationResults.
     * @example
     * // Create many PublicationResults
     * const publicationResult = await prisma.publicationResult.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PublicationResults and only return the `id`
     * const publicationResultWithIdOnly = await prisma.publicationResult.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PublicationResultCreateManyAndReturnArgs>(args?: SelectSubset<T, PublicationResultCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublicationResultPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PublicationResult.
     * @param {PublicationResultDeleteArgs} args - Arguments to delete one PublicationResult.
     * @example
     * // Delete one PublicationResult
     * const PublicationResult = await prisma.publicationResult.delete({
     *   where: {
     *     // ... filter to delete one PublicationResult
     *   }
     * })
     * 
     */
    delete<T extends PublicationResultDeleteArgs>(args: SelectSubset<T, PublicationResultDeleteArgs<ExtArgs>>): Prisma__PublicationResultClient<$Result.GetResult<Prisma.$PublicationResultPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PublicationResult.
     * @param {PublicationResultUpdateArgs} args - Arguments to update one PublicationResult.
     * @example
     * // Update one PublicationResult
     * const publicationResult = await prisma.publicationResult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PublicationResultUpdateArgs>(args: SelectSubset<T, PublicationResultUpdateArgs<ExtArgs>>): Prisma__PublicationResultClient<$Result.GetResult<Prisma.$PublicationResultPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PublicationResults.
     * @param {PublicationResultDeleteManyArgs} args - Arguments to filter PublicationResults to delete.
     * @example
     * // Delete a few PublicationResults
     * const { count } = await prisma.publicationResult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PublicationResultDeleteManyArgs>(args?: SelectSubset<T, PublicationResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PublicationResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicationResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PublicationResults
     * const publicationResult = await prisma.publicationResult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PublicationResultUpdateManyArgs>(args: SelectSubset<T, PublicationResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PublicationResult.
     * @param {PublicationResultUpsertArgs} args - Arguments to update or create a PublicationResult.
     * @example
     * // Update or create a PublicationResult
     * const publicationResult = await prisma.publicationResult.upsert({
     *   create: {
     *     // ... data to create a PublicationResult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PublicationResult we want to update
     *   }
     * })
     */
    upsert<T extends PublicationResultUpsertArgs>(args: SelectSubset<T, PublicationResultUpsertArgs<ExtArgs>>): Prisma__PublicationResultClient<$Result.GetResult<Prisma.$PublicationResultPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PublicationResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicationResultCountArgs} args - Arguments to filter PublicationResults to count.
     * @example
     * // Count the number of PublicationResults
     * const count = await prisma.publicationResult.count({
     *   where: {
     *     // ... the filter for the PublicationResults we want to count
     *   }
     * })
    **/
    count<T extends PublicationResultCountArgs>(
      args?: Subset<T, PublicationResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PublicationResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PublicationResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicationResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PublicationResultAggregateArgs>(args: Subset<T, PublicationResultAggregateArgs>): Prisma.PrismaPromise<GetPublicationResultAggregateType<T>>

    /**
     * Group by PublicationResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicationResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PublicationResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PublicationResultGroupByArgs['orderBy'] }
        : { orderBy?: PublicationResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PublicationResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPublicationResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PublicationResult model
   */
  readonly fields: PublicationResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PublicationResult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PublicationResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    socialAccount<T extends SocialAccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SocialAccountDefaultArgs<ExtArgs>>): Prisma__SocialAccountClient<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PublicationResult model
   */ 
  interface PublicationResultFieldRefs {
    readonly id: FieldRef<"PublicationResult", 'String'>
    readonly postId: FieldRef<"PublicationResult", 'String'>
    readonly socialAccountId: FieldRef<"PublicationResult", 'String'>
    readonly platformPostId: FieldRef<"PublicationResult", 'String'>
    readonly status: FieldRef<"PublicationResult", 'PublicationStatus'>
    readonly publishedAt: FieldRef<"PublicationResult", 'DateTime'>
    readonly error: FieldRef<"PublicationResult", 'String'>
    readonly createdAt: FieldRef<"PublicationResult", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PublicationResult findUnique
   */
  export type PublicationResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicationResult
     */
    select?: PublicationResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicationResultInclude<ExtArgs> | null
    /**
     * Filter, which PublicationResult to fetch.
     */
    where: PublicationResultWhereUniqueInput
  }

  /**
   * PublicationResult findUniqueOrThrow
   */
  export type PublicationResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicationResult
     */
    select?: PublicationResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicationResultInclude<ExtArgs> | null
    /**
     * Filter, which PublicationResult to fetch.
     */
    where: PublicationResultWhereUniqueInput
  }

  /**
   * PublicationResult findFirst
   */
  export type PublicationResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicationResult
     */
    select?: PublicationResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicationResultInclude<ExtArgs> | null
    /**
     * Filter, which PublicationResult to fetch.
     */
    where?: PublicationResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PublicationResults to fetch.
     */
    orderBy?: PublicationResultOrderByWithRelationInput | PublicationResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PublicationResults.
     */
    cursor?: PublicationResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PublicationResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PublicationResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PublicationResults.
     */
    distinct?: PublicationResultScalarFieldEnum | PublicationResultScalarFieldEnum[]
  }

  /**
   * PublicationResult findFirstOrThrow
   */
  export type PublicationResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicationResult
     */
    select?: PublicationResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicationResultInclude<ExtArgs> | null
    /**
     * Filter, which PublicationResult to fetch.
     */
    where?: PublicationResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PublicationResults to fetch.
     */
    orderBy?: PublicationResultOrderByWithRelationInput | PublicationResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PublicationResults.
     */
    cursor?: PublicationResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PublicationResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PublicationResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PublicationResults.
     */
    distinct?: PublicationResultScalarFieldEnum | PublicationResultScalarFieldEnum[]
  }

  /**
   * PublicationResult findMany
   */
  export type PublicationResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicationResult
     */
    select?: PublicationResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicationResultInclude<ExtArgs> | null
    /**
     * Filter, which PublicationResults to fetch.
     */
    where?: PublicationResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PublicationResults to fetch.
     */
    orderBy?: PublicationResultOrderByWithRelationInput | PublicationResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PublicationResults.
     */
    cursor?: PublicationResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PublicationResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PublicationResults.
     */
    skip?: number
    distinct?: PublicationResultScalarFieldEnum | PublicationResultScalarFieldEnum[]
  }

  /**
   * PublicationResult create
   */
  export type PublicationResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicationResult
     */
    select?: PublicationResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicationResultInclude<ExtArgs> | null
    /**
     * The data needed to create a PublicationResult.
     */
    data: XOR<PublicationResultCreateInput, PublicationResultUncheckedCreateInput>
  }

  /**
   * PublicationResult createMany
   */
  export type PublicationResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PublicationResults.
     */
    data: PublicationResultCreateManyInput | PublicationResultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PublicationResult createManyAndReturn
   */
  export type PublicationResultCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicationResult
     */
    select?: PublicationResultSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PublicationResults.
     */
    data: PublicationResultCreateManyInput | PublicationResultCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicationResultIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PublicationResult update
   */
  export type PublicationResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicationResult
     */
    select?: PublicationResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicationResultInclude<ExtArgs> | null
    /**
     * The data needed to update a PublicationResult.
     */
    data: XOR<PublicationResultUpdateInput, PublicationResultUncheckedUpdateInput>
    /**
     * Choose, which PublicationResult to update.
     */
    where: PublicationResultWhereUniqueInput
  }

  /**
   * PublicationResult updateMany
   */
  export type PublicationResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PublicationResults.
     */
    data: XOR<PublicationResultUpdateManyMutationInput, PublicationResultUncheckedUpdateManyInput>
    /**
     * Filter which PublicationResults to update
     */
    where?: PublicationResultWhereInput
  }

  /**
   * PublicationResult upsert
   */
  export type PublicationResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicationResult
     */
    select?: PublicationResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicationResultInclude<ExtArgs> | null
    /**
     * The filter to search for the PublicationResult to update in case it exists.
     */
    where: PublicationResultWhereUniqueInput
    /**
     * In case the PublicationResult found by the `where` argument doesn't exist, create a new PublicationResult with this data.
     */
    create: XOR<PublicationResultCreateInput, PublicationResultUncheckedCreateInput>
    /**
     * In case the PublicationResult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PublicationResultUpdateInput, PublicationResultUncheckedUpdateInput>
  }

  /**
   * PublicationResult delete
   */
  export type PublicationResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicationResult
     */
    select?: PublicationResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicationResultInclude<ExtArgs> | null
    /**
     * Filter which PublicationResult to delete.
     */
    where: PublicationResultWhereUniqueInput
  }

  /**
   * PublicationResult deleteMany
   */
  export type PublicationResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PublicationResults to delete
     */
    where?: PublicationResultWhereInput
  }

  /**
   * PublicationResult without action
   */
  export type PublicationResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PublicationResult
     */
    select?: PublicationResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicationResultInclude<ExtArgs> | null
  }


  /**
   * Model TokenTransaction
   */

  export type AggregateTokenTransaction = {
    _count: TokenTransactionCountAggregateOutputType | null
    _avg: TokenTransactionAvgAggregateOutputType | null
    _sum: TokenTransactionSumAggregateOutputType | null
    _min: TokenTransactionMinAggregateOutputType | null
    _max: TokenTransactionMaxAggregateOutputType | null
  }

  export type TokenTransactionAvgAggregateOutputType = {
    amount: number | null
  }

  export type TokenTransactionSumAggregateOutputType = {
    amount: number | null
  }

  export type TokenTransactionMinAggregateOutputType = {
    id: string | null
    agencyId: string | null
    userId: string | null
    amount: number | null
    type: $Enums.TokenTransactionType | null
    description: string | null
    reference: string | null
    createdAt: Date | null
  }

  export type TokenTransactionMaxAggregateOutputType = {
    id: string | null
    agencyId: string | null
    userId: string | null
    amount: number | null
    type: $Enums.TokenTransactionType | null
    description: string | null
    reference: string | null
    createdAt: Date | null
  }

  export type TokenTransactionCountAggregateOutputType = {
    id: number
    agencyId: number
    userId: number
    amount: number
    type: number
    description: number
    reference: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type TokenTransactionAvgAggregateInputType = {
    amount?: true
  }

  export type TokenTransactionSumAggregateInputType = {
    amount?: true
  }

  export type TokenTransactionMinAggregateInputType = {
    id?: true
    agencyId?: true
    userId?: true
    amount?: true
    type?: true
    description?: true
    reference?: true
    createdAt?: true
  }

  export type TokenTransactionMaxAggregateInputType = {
    id?: true
    agencyId?: true
    userId?: true
    amount?: true
    type?: true
    description?: true
    reference?: true
    createdAt?: true
  }

  export type TokenTransactionCountAggregateInputType = {
    id?: true
    agencyId?: true
    userId?: true
    amount?: true
    type?: true
    description?: true
    reference?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type TokenTransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TokenTransaction to aggregate.
     */
    where?: TokenTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TokenTransactions to fetch.
     */
    orderBy?: TokenTransactionOrderByWithRelationInput | TokenTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TokenTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TokenTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TokenTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TokenTransactions
    **/
    _count?: true | TokenTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TokenTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TokenTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TokenTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TokenTransactionMaxAggregateInputType
  }

  export type GetTokenTransactionAggregateType<T extends TokenTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTokenTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTokenTransaction[P]>
      : GetScalarType<T[P], AggregateTokenTransaction[P]>
  }




  export type TokenTransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TokenTransactionWhereInput
    orderBy?: TokenTransactionOrderByWithAggregationInput | TokenTransactionOrderByWithAggregationInput[]
    by: TokenTransactionScalarFieldEnum[] | TokenTransactionScalarFieldEnum
    having?: TokenTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TokenTransactionCountAggregateInputType | true
    _avg?: TokenTransactionAvgAggregateInputType
    _sum?: TokenTransactionSumAggregateInputType
    _min?: TokenTransactionMinAggregateInputType
    _max?: TokenTransactionMaxAggregateInputType
  }

  export type TokenTransactionGroupByOutputType = {
    id: string
    agencyId: string
    userId: string | null
    amount: number
    type: $Enums.TokenTransactionType
    description: string
    reference: string | null
    metadata: JsonValue | null
    createdAt: Date
    _count: TokenTransactionCountAggregateOutputType | null
    _avg: TokenTransactionAvgAggregateOutputType | null
    _sum: TokenTransactionSumAggregateOutputType | null
    _min: TokenTransactionMinAggregateOutputType | null
    _max: TokenTransactionMaxAggregateOutputType | null
  }

  type GetTokenTransactionGroupByPayload<T extends TokenTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TokenTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TokenTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TokenTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TokenTransactionGroupByOutputType[P]>
        }
      >
    >


  export type TokenTransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agencyId?: boolean
    userId?: boolean
    amount?: boolean
    type?: boolean
    description?: boolean
    reference?: boolean
    metadata?: boolean
    createdAt?: boolean
    agency?: boolean | AgencyDefaultArgs<ExtArgs>
    user?: boolean | TokenTransaction$userArgs<ExtArgs>
  }, ExtArgs["result"]["tokenTransaction"]>

  export type TokenTransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agencyId?: boolean
    userId?: boolean
    amount?: boolean
    type?: boolean
    description?: boolean
    reference?: boolean
    metadata?: boolean
    createdAt?: boolean
    agency?: boolean | AgencyDefaultArgs<ExtArgs>
    user?: boolean | TokenTransaction$userArgs<ExtArgs>
  }, ExtArgs["result"]["tokenTransaction"]>

  export type TokenTransactionSelectScalar = {
    id?: boolean
    agencyId?: boolean
    userId?: boolean
    amount?: boolean
    type?: boolean
    description?: boolean
    reference?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type TokenTransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agency?: boolean | AgencyDefaultArgs<ExtArgs>
    user?: boolean | TokenTransaction$userArgs<ExtArgs>
  }
  export type TokenTransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agency?: boolean | AgencyDefaultArgs<ExtArgs>
    user?: boolean | TokenTransaction$userArgs<ExtArgs>
  }

  export type $TokenTransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TokenTransaction"
    objects: {
      agency: Prisma.$AgencyPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      agencyId: string
      userId: string | null
      amount: number
      type: $Enums.TokenTransactionType
      description: string
      reference: string | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["tokenTransaction"]>
    composites: {}
  }

  type TokenTransactionGetPayload<S extends boolean | null | undefined | TokenTransactionDefaultArgs> = $Result.GetResult<Prisma.$TokenTransactionPayload, S>

  type TokenTransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TokenTransactionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TokenTransactionCountAggregateInputType | true
    }

  export interface TokenTransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TokenTransaction'], meta: { name: 'TokenTransaction' } }
    /**
     * Find zero or one TokenTransaction that matches the filter.
     * @param {TokenTransactionFindUniqueArgs} args - Arguments to find a TokenTransaction
     * @example
     * // Get one TokenTransaction
     * const tokenTransaction = await prisma.tokenTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TokenTransactionFindUniqueArgs>(args: SelectSubset<T, TokenTransactionFindUniqueArgs<ExtArgs>>): Prisma__TokenTransactionClient<$Result.GetResult<Prisma.$TokenTransactionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TokenTransaction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TokenTransactionFindUniqueOrThrowArgs} args - Arguments to find a TokenTransaction
     * @example
     * // Get one TokenTransaction
     * const tokenTransaction = await prisma.tokenTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TokenTransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, TokenTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TokenTransactionClient<$Result.GetResult<Prisma.$TokenTransactionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TokenTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenTransactionFindFirstArgs} args - Arguments to find a TokenTransaction
     * @example
     * // Get one TokenTransaction
     * const tokenTransaction = await prisma.tokenTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TokenTransactionFindFirstArgs>(args?: SelectSubset<T, TokenTransactionFindFirstArgs<ExtArgs>>): Prisma__TokenTransactionClient<$Result.GetResult<Prisma.$TokenTransactionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TokenTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenTransactionFindFirstOrThrowArgs} args - Arguments to find a TokenTransaction
     * @example
     * // Get one TokenTransaction
     * const tokenTransaction = await prisma.tokenTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TokenTransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, TokenTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TokenTransactionClient<$Result.GetResult<Prisma.$TokenTransactionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TokenTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TokenTransactions
     * const tokenTransactions = await prisma.tokenTransaction.findMany()
     * 
     * // Get first 10 TokenTransactions
     * const tokenTransactions = await prisma.tokenTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tokenTransactionWithIdOnly = await prisma.tokenTransaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TokenTransactionFindManyArgs>(args?: SelectSubset<T, TokenTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenTransactionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TokenTransaction.
     * @param {TokenTransactionCreateArgs} args - Arguments to create a TokenTransaction.
     * @example
     * // Create one TokenTransaction
     * const TokenTransaction = await prisma.tokenTransaction.create({
     *   data: {
     *     // ... data to create a TokenTransaction
     *   }
     * })
     * 
     */
    create<T extends TokenTransactionCreateArgs>(args: SelectSubset<T, TokenTransactionCreateArgs<ExtArgs>>): Prisma__TokenTransactionClient<$Result.GetResult<Prisma.$TokenTransactionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TokenTransactions.
     * @param {TokenTransactionCreateManyArgs} args - Arguments to create many TokenTransactions.
     * @example
     * // Create many TokenTransactions
     * const tokenTransaction = await prisma.tokenTransaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TokenTransactionCreateManyArgs>(args?: SelectSubset<T, TokenTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TokenTransactions and returns the data saved in the database.
     * @param {TokenTransactionCreateManyAndReturnArgs} args - Arguments to create many TokenTransactions.
     * @example
     * // Create many TokenTransactions
     * const tokenTransaction = await prisma.tokenTransaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TokenTransactions and only return the `id`
     * const tokenTransactionWithIdOnly = await prisma.tokenTransaction.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TokenTransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, TokenTransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenTransactionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TokenTransaction.
     * @param {TokenTransactionDeleteArgs} args - Arguments to delete one TokenTransaction.
     * @example
     * // Delete one TokenTransaction
     * const TokenTransaction = await prisma.tokenTransaction.delete({
     *   where: {
     *     // ... filter to delete one TokenTransaction
     *   }
     * })
     * 
     */
    delete<T extends TokenTransactionDeleteArgs>(args: SelectSubset<T, TokenTransactionDeleteArgs<ExtArgs>>): Prisma__TokenTransactionClient<$Result.GetResult<Prisma.$TokenTransactionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TokenTransaction.
     * @param {TokenTransactionUpdateArgs} args - Arguments to update one TokenTransaction.
     * @example
     * // Update one TokenTransaction
     * const tokenTransaction = await prisma.tokenTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TokenTransactionUpdateArgs>(args: SelectSubset<T, TokenTransactionUpdateArgs<ExtArgs>>): Prisma__TokenTransactionClient<$Result.GetResult<Prisma.$TokenTransactionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TokenTransactions.
     * @param {TokenTransactionDeleteManyArgs} args - Arguments to filter TokenTransactions to delete.
     * @example
     * // Delete a few TokenTransactions
     * const { count } = await prisma.tokenTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TokenTransactionDeleteManyArgs>(args?: SelectSubset<T, TokenTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TokenTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TokenTransactions
     * const tokenTransaction = await prisma.tokenTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TokenTransactionUpdateManyArgs>(args: SelectSubset<T, TokenTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TokenTransaction.
     * @param {TokenTransactionUpsertArgs} args - Arguments to update or create a TokenTransaction.
     * @example
     * // Update or create a TokenTransaction
     * const tokenTransaction = await prisma.tokenTransaction.upsert({
     *   create: {
     *     // ... data to create a TokenTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TokenTransaction we want to update
     *   }
     * })
     */
    upsert<T extends TokenTransactionUpsertArgs>(args: SelectSubset<T, TokenTransactionUpsertArgs<ExtArgs>>): Prisma__TokenTransactionClient<$Result.GetResult<Prisma.$TokenTransactionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TokenTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenTransactionCountArgs} args - Arguments to filter TokenTransactions to count.
     * @example
     * // Count the number of TokenTransactions
     * const count = await prisma.tokenTransaction.count({
     *   where: {
     *     // ... the filter for the TokenTransactions we want to count
     *   }
     * })
    **/
    count<T extends TokenTransactionCountArgs>(
      args?: Subset<T, TokenTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TokenTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TokenTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TokenTransactionAggregateArgs>(args: Subset<T, TokenTransactionAggregateArgs>): Prisma.PrismaPromise<GetTokenTransactionAggregateType<T>>

    /**
     * Group by TokenTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TokenTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TokenTransactionGroupByArgs['orderBy'] }
        : { orderBy?: TokenTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TokenTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTokenTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TokenTransaction model
   */
  readonly fields: TokenTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TokenTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TokenTransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agency<T extends AgencyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgencyDefaultArgs<ExtArgs>>): Prisma__AgencyClient<$Result.GetResult<Prisma.$AgencyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends TokenTransaction$userArgs<ExtArgs> = {}>(args?: Subset<T, TokenTransaction$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TokenTransaction model
   */ 
  interface TokenTransactionFieldRefs {
    readonly id: FieldRef<"TokenTransaction", 'String'>
    readonly agencyId: FieldRef<"TokenTransaction", 'String'>
    readonly userId: FieldRef<"TokenTransaction", 'String'>
    readonly amount: FieldRef<"TokenTransaction", 'Int'>
    readonly type: FieldRef<"TokenTransaction", 'TokenTransactionType'>
    readonly description: FieldRef<"TokenTransaction", 'String'>
    readonly reference: FieldRef<"TokenTransaction", 'String'>
    readonly metadata: FieldRef<"TokenTransaction", 'Json'>
    readonly createdAt: FieldRef<"TokenTransaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TokenTransaction findUnique
   */
  export type TokenTransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenTransaction
     */
    select?: TokenTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenTransactionInclude<ExtArgs> | null
    /**
     * Filter, which TokenTransaction to fetch.
     */
    where: TokenTransactionWhereUniqueInput
  }

  /**
   * TokenTransaction findUniqueOrThrow
   */
  export type TokenTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenTransaction
     */
    select?: TokenTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenTransactionInclude<ExtArgs> | null
    /**
     * Filter, which TokenTransaction to fetch.
     */
    where: TokenTransactionWhereUniqueInput
  }

  /**
   * TokenTransaction findFirst
   */
  export type TokenTransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenTransaction
     */
    select?: TokenTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenTransactionInclude<ExtArgs> | null
    /**
     * Filter, which TokenTransaction to fetch.
     */
    where?: TokenTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TokenTransactions to fetch.
     */
    orderBy?: TokenTransactionOrderByWithRelationInput | TokenTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TokenTransactions.
     */
    cursor?: TokenTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TokenTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TokenTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TokenTransactions.
     */
    distinct?: TokenTransactionScalarFieldEnum | TokenTransactionScalarFieldEnum[]
  }

  /**
   * TokenTransaction findFirstOrThrow
   */
  export type TokenTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenTransaction
     */
    select?: TokenTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenTransactionInclude<ExtArgs> | null
    /**
     * Filter, which TokenTransaction to fetch.
     */
    where?: TokenTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TokenTransactions to fetch.
     */
    orderBy?: TokenTransactionOrderByWithRelationInput | TokenTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TokenTransactions.
     */
    cursor?: TokenTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TokenTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TokenTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TokenTransactions.
     */
    distinct?: TokenTransactionScalarFieldEnum | TokenTransactionScalarFieldEnum[]
  }

  /**
   * TokenTransaction findMany
   */
  export type TokenTransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenTransaction
     */
    select?: TokenTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenTransactionInclude<ExtArgs> | null
    /**
     * Filter, which TokenTransactions to fetch.
     */
    where?: TokenTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TokenTransactions to fetch.
     */
    orderBy?: TokenTransactionOrderByWithRelationInput | TokenTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TokenTransactions.
     */
    cursor?: TokenTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TokenTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TokenTransactions.
     */
    skip?: number
    distinct?: TokenTransactionScalarFieldEnum | TokenTransactionScalarFieldEnum[]
  }

  /**
   * TokenTransaction create
   */
  export type TokenTransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenTransaction
     */
    select?: TokenTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenTransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a TokenTransaction.
     */
    data: XOR<TokenTransactionCreateInput, TokenTransactionUncheckedCreateInput>
  }

  /**
   * TokenTransaction createMany
   */
  export type TokenTransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TokenTransactions.
     */
    data: TokenTransactionCreateManyInput | TokenTransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TokenTransaction createManyAndReturn
   */
  export type TokenTransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenTransaction
     */
    select?: TokenTransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TokenTransactions.
     */
    data: TokenTransactionCreateManyInput | TokenTransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenTransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TokenTransaction update
   */
  export type TokenTransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenTransaction
     */
    select?: TokenTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenTransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a TokenTransaction.
     */
    data: XOR<TokenTransactionUpdateInput, TokenTransactionUncheckedUpdateInput>
    /**
     * Choose, which TokenTransaction to update.
     */
    where: TokenTransactionWhereUniqueInput
  }

  /**
   * TokenTransaction updateMany
   */
  export type TokenTransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TokenTransactions.
     */
    data: XOR<TokenTransactionUpdateManyMutationInput, TokenTransactionUncheckedUpdateManyInput>
    /**
     * Filter which TokenTransactions to update
     */
    where?: TokenTransactionWhereInput
  }

  /**
   * TokenTransaction upsert
   */
  export type TokenTransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenTransaction
     */
    select?: TokenTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenTransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the TokenTransaction to update in case it exists.
     */
    where: TokenTransactionWhereUniqueInput
    /**
     * In case the TokenTransaction found by the `where` argument doesn't exist, create a new TokenTransaction with this data.
     */
    create: XOR<TokenTransactionCreateInput, TokenTransactionUncheckedCreateInput>
    /**
     * In case the TokenTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TokenTransactionUpdateInput, TokenTransactionUncheckedUpdateInput>
  }

  /**
   * TokenTransaction delete
   */
  export type TokenTransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenTransaction
     */
    select?: TokenTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenTransactionInclude<ExtArgs> | null
    /**
     * Filter which TokenTransaction to delete.
     */
    where: TokenTransactionWhereUniqueInput
  }

  /**
   * TokenTransaction deleteMany
   */
  export type TokenTransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TokenTransactions to delete
     */
    where?: TokenTransactionWhereInput
  }

  /**
   * TokenTransaction.user
   */
  export type TokenTransaction$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * TokenTransaction without action
   */
  export type TokenTransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TokenTransaction
     */
    select?: TokenTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenTransactionInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    agencyId: string | null
    userId: string | null
    action: string | null
    resource: string | null
    resourceId: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    agencyId: string | null
    userId: string | null
    action: string | null
    resource: string | null
    resourceId: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    agencyId: number
    userId: number
    action: number
    resource: number
    resourceId: number
    details: number
    ipAddress: number
    userAgent: number
    createdAt: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    agencyId?: true
    userId?: true
    action?: true
    resource?: true
    resourceId?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    agencyId?: true
    userId?: true
    action?: true
    resource?: true
    resourceId?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    agencyId?: true
    userId?: true
    action?: true
    resource?: true
    resourceId?: true
    details?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    agencyId: string
    userId: string | null
    action: string
    resource: string
    resourceId: string | null
    details: JsonValue | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agencyId?: boolean
    userId?: boolean
    action?: boolean
    resource?: boolean
    resourceId?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    agency?: boolean | AgencyDefaultArgs<ExtArgs>
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    agencyId?: boolean
    userId?: boolean
    action?: boolean
    resource?: boolean
    resourceId?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    agency?: boolean | AgencyDefaultArgs<ExtArgs>
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    agencyId?: boolean
    userId?: boolean
    action?: boolean
    resource?: boolean
    resourceId?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }

  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agency?: boolean | AgencyDefaultArgs<ExtArgs>
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agency?: boolean | AgencyDefaultArgs<ExtArgs>
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      agency: Prisma.$AgencyPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      agencyId: string
      userId: string | null
      action: string
      resource: string
      resourceId: string | null
      details: Prisma.JsonValue | null
      ipAddress: string | null
      userAgent: string | null
      createdAt: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agency<T extends AgencyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgencyDefaultArgs<ExtArgs>>): Prisma__AgencyClient<$Result.GetResult<Prisma.$AgencyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends AuditLog$userArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */ 
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly agencyId: FieldRef<"AuditLog", 'String'>
    readonly userId: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly resource: FieldRef<"AuditLog", 'String'>
    readonly resourceId: FieldRef<"AuditLog", 'String'>
    readonly details: FieldRef<"AuditLog", 'Json'>
    readonly ipAddress: FieldRef<"AuditLog", 'String'>
    readonly userAgent: FieldRef<"AuditLog", 'String'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog.user
   */
  export type AuditLog$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model ApiKey
   */

  export type AggregateApiKey = {
    _count: ApiKeyCountAggregateOutputType | null
    _min: ApiKeyMinAggregateOutputType | null
    _max: ApiKeyMaxAggregateOutputType | null
  }

  export type ApiKeyMinAggregateOutputType = {
    id: string | null
    name: string | null
    keyPrefix: string | null
    hashedKey: string | null
    clientId: string | null
    isActive: boolean | null
    lastUsedAt: Date | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ApiKeyMaxAggregateOutputType = {
    id: string | null
    name: string | null
    keyPrefix: string | null
    hashedKey: string | null
    clientId: string | null
    isActive: boolean | null
    lastUsedAt: Date | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ApiKeyCountAggregateOutputType = {
    id: number
    name: number
    keyPrefix: number
    hashedKey: number
    clientId: number
    permissions: number
    isActive: number
    lastUsedAt: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ApiKeyMinAggregateInputType = {
    id?: true
    name?: true
    keyPrefix?: true
    hashedKey?: true
    clientId?: true
    isActive?: true
    lastUsedAt?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ApiKeyMaxAggregateInputType = {
    id?: true
    name?: true
    keyPrefix?: true
    hashedKey?: true
    clientId?: true
    isActive?: true
    lastUsedAt?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ApiKeyCountAggregateInputType = {
    id?: true
    name?: true
    keyPrefix?: true
    hashedKey?: true
    clientId?: true
    permissions?: true
    isActive?: true
    lastUsedAt?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ApiKeyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApiKey to aggregate.
     */
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     */
    orderBy?: ApiKeyOrderByWithRelationInput | ApiKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ApiKeys
    **/
    _count?: true | ApiKeyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApiKeyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApiKeyMaxAggregateInputType
  }

  export type GetApiKeyAggregateType<T extends ApiKeyAggregateArgs> = {
        [P in keyof T & keyof AggregateApiKey]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApiKey[P]>
      : GetScalarType<T[P], AggregateApiKey[P]>
  }




  export type ApiKeyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApiKeyWhereInput
    orderBy?: ApiKeyOrderByWithAggregationInput | ApiKeyOrderByWithAggregationInput[]
    by: ApiKeyScalarFieldEnum[] | ApiKeyScalarFieldEnum
    having?: ApiKeyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApiKeyCountAggregateInputType | true
    _min?: ApiKeyMinAggregateInputType
    _max?: ApiKeyMaxAggregateInputType
  }

  export type ApiKeyGroupByOutputType = {
    id: string
    name: string
    keyPrefix: string
    hashedKey: string
    clientId: string
    permissions: string[]
    isActive: boolean
    lastUsedAt: Date | null
    expiresAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: ApiKeyCountAggregateOutputType | null
    _min: ApiKeyMinAggregateOutputType | null
    _max: ApiKeyMaxAggregateOutputType | null
  }

  type GetApiKeyGroupByPayload<T extends ApiKeyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApiKeyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApiKeyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApiKeyGroupByOutputType[P]>
            : GetScalarType<T[P], ApiKeyGroupByOutputType[P]>
        }
      >
    >


  export type ApiKeySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    keyPrefix?: boolean
    hashedKey?: boolean
    clientId?: boolean
    permissions?: boolean
    isActive?: boolean
    lastUsedAt?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
    usage?: boolean | ApiKey$usageArgs<ExtArgs>
    _count?: boolean | ApiKeyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["apiKey"]>

  export type ApiKeySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    keyPrefix?: boolean
    hashedKey?: boolean
    clientId?: boolean
    permissions?: boolean
    isActive?: boolean
    lastUsedAt?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["apiKey"]>

  export type ApiKeySelectScalar = {
    id?: boolean
    name?: boolean
    keyPrefix?: boolean
    hashedKey?: boolean
    clientId?: boolean
    permissions?: boolean
    isActive?: boolean
    lastUsedAt?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ApiKeyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
    usage?: boolean | ApiKey$usageArgs<ExtArgs>
    _count?: boolean | ApiKeyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ApiKeyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }

  export type $ApiKeyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ApiKey"
    objects: {
      client: Prisma.$ClientPayload<ExtArgs>
      usage: Prisma.$ApiKeyUsagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      keyPrefix: string
      hashedKey: string
      clientId: string
      permissions: string[]
      isActive: boolean
      lastUsedAt: Date | null
      expiresAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["apiKey"]>
    composites: {}
  }

  type ApiKeyGetPayload<S extends boolean | null | undefined | ApiKeyDefaultArgs> = $Result.GetResult<Prisma.$ApiKeyPayload, S>

  type ApiKeyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ApiKeyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ApiKeyCountAggregateInputType | true
    }

  export interface ApiKeyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ApiKey'], meta: { name: 'ApiKey' } }
    /**
     * Find zero or one ApiKey that matches the filter.
     * @param {ApiKeyFindUniqueArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApiKeyFindUniqueArgs>(args: SelectSubset<T, ApiKeyFindUniqueArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ApiKey that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ApiKeyFindUniqueOrThrowArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApiKeyFindUniqueOrThrowArgs>(args: SelectSubset<T, ApiKeyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ApiKey that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyFindFirstArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApiKeyFindFirstArgs>(args?: SelectSubset<T, ApiKeyFindFirstArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ApiKey that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyFindFirstOrThrowArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApiKeyFindFirstOrThrowArgs>(args?: SelectSubset<T, ApiKeyFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ApiKeys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ApiKeys
     * const apiKeys = await prisma.apiKey.findMany()
     * 
     * // Get first 10 ApiKeys
     * const apiKeys = await prisma.apiKey.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const apiKeyWithIdOnly = await prisma.apiKey.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApiKeyFindManyArgs>(args?: SelectSubset<T, ApiKeyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ApiKey.
     * @param {ApiKeyCreateArgs} args - Arguments to create a ApiKey.
     * @example
     * // Create one ApiKey
     * const ApiKey = await prisma.apiKey.create({
     *   data: {
     *     // ... data to create a ApiKey
     *   }
     * })
     * 
     */
    create<T extends ApiKeyCreateArgs>(args: SelectSubset<T, ApiKeyCreateArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ApiKeys.
     * @param {ApiKeyCreateManyArgs} args - Arguments to create many ApiKeys.
     * @example
     * // Create many ApiKeys
     * const apiKey = await prisma.apiKey.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApiKeyCreateManyArgs>(args?: SelectSubset<T, ApiKeyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ApiKeys and returns the data saved in the database.
     * @param {ApiKeyCreateManyAndReturnArgs} args - Arguments to create many ApiKeys.
     * @example
     * // Create many ApiKeys
     * const apiKey = await prisma.apiKey.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ApiKeys and only return the `id`
     * const apiKeyWithIdOnly = await prisma.apiKey.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ApiKeyCreateManyAndReturnArgs>(args?: SelectSubset<T, ApiKeyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ApiKey.
     * @param {ApiKeyDeleteArgs} args - Arguments to delete one ApiKey.
     * @example
     * // Delete one ApiKey
     * const ApiKey = await prisma.apiKey.delete({
     *   where: {
     *     // ... filter to delete one ApiKey
     *   }
     * })
     * 
     */
    delete<T extends ApiKeyDeleteArgs>(args: SelectSubset<T, ApiKeyDeleteArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ApiKey.
     * @param {ApiKeyUpdateArgs} args - Arguments to update one ApiKey.
     * @example
     * // Update one ApiKey
     * const apiKey = await prisma.apiKey.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApiKeyUpdateArgs>(args: SelectSubset<T, ApiKeyUpdateArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ApiKeys.
     * @param {ApiKeyDeleteManyArgs} args - Arguments to filter ApiKeys to delete.
     * @example
     * // Delete a few ApiKeys
     * const { count } = await prisma.apiKey.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApiKeyDeleteManyArgs>(args?: SelectSubset<T, ApiKeyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApiKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ApiKeys
     * const apiKey = await prisma.apiKey.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApiKeyUpdateManyArgs>(args: SelectSubset<T, ApiKeyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ApiKey.
     * @param {ApiKeyUpsertArgs} args - Arguments to update or create a ApiKey.
     * @example
     * // Update or create a ApiKey
     * const apiKey = await prisma.apiKey.upsert({
     *   create: {
     *     // ... data to create a ApiKey
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ApiKey we want to update
     *   }
     * })
     */
    upsert<T extends ApiKeyUpsertArgs>(args: SelectSubset<T, ApiKeyUpsertArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ApiKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyCountArgs} args - Arguments to filter ApiKeys to count.
     * @example
     * // Count the number of ApiKeys
     * const count = await prisma.apiKey.count({
     *   where: {
     *     // ... the filter for the ApiKeys we want to count
     *   }
     * })
    **/
    count<T extends ApiKeyCountArgs>(
      args?: Subset<T, ApiKeyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApiKeyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ApiKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApiKeyAggregateArgs>(args: Subset<T, ApiKeyAggregateArgs>): Prisma.PrismaPromise<GetApiKeyAggregateType<T>>

    /**
     * Group by ApiKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApiKeyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApiKeyGroupByArgs['orderBy'] }
        : { orderBy?: ApiKeyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApiKeyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApiKeyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ApiKey model
   */
  readonly fields: ApiKeyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ApiKey.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApiKeyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    usage<T extends ApiKey$usageArgs<ExtArgs> = {}>(args?: Subset<T, ApiKey$usageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApiKeyUsagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ApiKey model
   */ 
  interface ApiKeyFieldRefs {
    readonly id: FieldRef<"ApiKey", 'String'>
    readonly name: FieldRef<"ApiKey", 'String'>
    readonly keyPrefix: FieldRef<"ApiKey", 'String'>
    readonly hashedKey: FieldRef<"ApiKey", 'String'>
    readonly clientId: FieldRef<"ApiKey", 'String'>
    readonly permissions: FieldRef<"ApiKey", 'String[]'>
    readonly isActive: FieldRef<"ApiKey", 'Boolean'>
    readonly lastUsedAt: FieldRef<"ApiKey", 'DateTime'>
    readonly expiresAt: FieldRef<"ApiKey", 'DateTime'>
    readonly createdAt: FieldRef<"ApiKey", 'DateTime'>
    readonly updatedAt: FieldRef<"ApiKey", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ApiKey findUnique
   */
  export type ApiKeyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * Filter, which ApiKey to fetch.
     */
    where: ApiKeyWhereUniqueInput
  }

  /**
   * ApiKey findUniqueOrThrow
   */
  export type ApiKeyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * Filter, which ApiKey to fetch.
     */
    where: ApiKeyWhereUniqueInput
  }

  /**
   * ApiKey findFirst
   */
  export type ApiKeyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * Filter, which ApiKey to fetch.
     */
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     */
    orderBy?: ApiKeyOrderByWithRelationInput | ApiKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApiKeys.
     */
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApiKeys.
     */
    distinct?: ApiKeyScalarFieldEnum | ApiKeyScalarFieldEnum[]
  }

  /**
   * ApiKey findFirstOrThrow
   */
  export type ApiKeyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * Filter, which ApiKey to fetch.
     */
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     */
    orderBy?: ApiKeyOrderByWithRelationInput | ApiKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApiKeys.
     */
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApiKeys.
     */
    distinct?: ApiKeyScalarFieldEnum | ApiKeyScalarFieldEnum[]
  }

  /**
   * ApiKey findMany
   */
  export type ApiKeyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * Filter, which ApiKeys to fetch.
     */
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     */
    orderBy?: ApiKeyOrderByWithRelationInput | ApiKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ApiKeys.
     */
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     */
    skip?: number
    distinct?: ApiKeyScalarFieldEnum | ApiKeyScalarFieldEnum[]
  }

  /**
   * ApiKey create
   */
  export type ApiKeyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * The data needed to create a ApiKey.
     */
    data: XOR<ApiKeyCreateInput, ApiKeyUncheckedCreateInput>
  }

  /**
   * ApiKey createMany
   */
  export type ApiKeyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ApiKeys.
     */
    data: ApiKeyCreateManyInput | ApiKeyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ApiKey createManyAndReturn
   */
  export type ApiKeyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ApiKeys.
     */
    data: ApiKeyCreateManyInput | ApiKeyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ApiKey update
   */
  export type ApiKeyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * The data needed to update a ApiKey.
     */
    data: XOR<ApiKeyUpdateInput, ApiKeyUncheckedUpdateInput>
    /**
     * Choose, which ApiKey to update.
     */
    where: ApiKeyWhereUniqueInput
  }

  /**
   * ApiKey updateMany
   */
  export type ApiKeyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ApiKeys.
     */
    data: XOR<ApiKeyUpdateManyMutationInput, ApiKeyUncheckedUpdateManyInput>
    /**
     * Filter which ApiKeys to update
     */
    where?: ApiKeyWhereInput
  }

  /**
   * ApiKey upsert
   */
  export type ApiKeyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * The filter to search for the ApiKey to update in case it exists.
     */
    where: ApiKeyWhereUniqueInput
    /**
     * In case the ApiKey found by the `where` argument doesn't exist, create a new ApiKey with this data.
     */
    create: XOR<ApiKeyCreateInput, ApiKeyUncheckedCreateInput>
    /**
     * In case the ApiKey was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApiKeyUpdateInput, ApiKeyUncheckedUpdateInput>
  }

  /**
   * ApiKey delete
   */
  export type ApiKeyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * Filter which ApiKey to delete.
     */
    where: ApiKeyWhereUniqueInput
  }

  /**
   * ApiKey deleteMany
   */
  export type ApiKeyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApiKeys to delete
     */
    where?: ApiKeyWhereInput
  }

  /**
   * ApiKey.usage
   */
  export type ApiKey$usageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKeyUsage
     */
    select?: ApiKeyUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyUsageInclude<ExtArgs> | null
    where?: ApiKeyUsageWhereInput
    orderBy?: ApiKeyUsageOrderByWithRelationInput | ApiKeyUsageOrderByWithRelationInput[]
    cursor?: ApiKeyUsageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApiKeyUsageScalarFieldEnum | ApiKeyUsageScalarFieldEnum[]
  }

  /**
   * ApiKey without action
   */
  export type ApiKeyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
  }


  /**
   * Model ApiKeyUsage
   */

  export type AggregateApiKeyUsage = {
    _count: ApiKeyUsageCountAggregateOutputType | null
    _avg: ApiKeyUsageAvgAggregateOutputType | null
    _sum: ApiKeyUsageSumAggregateOutputType | null
    _min: ApiKeyUsageMinAggregateOutputType | null
    _max: ApiKeyUsageMaxAggregateOutputType | null
  }

  export type ApiKeyUsageAvgAggregateOutputType = {
    statusCode: number | null
    tokensConsumed: number | null
    responseTime: number | null
  }

  export type ApiKeyUsageSumAggregateOutputType = {
    statusCode: number | null
    tokensConsumed: number | null
    responseTime: number | null
  }

  export type ApiKeyUsageMinAggregateOutputType = {
    id: string | null
    apiKeyId: string | null
    endpoint: string | null
    method: string | null
    statusCode: number | null
    tokensConsumed: number | null
    ipAddress: string | null
    userAgent: string | null
    responseTime: number | null
    createdAt: Date | null
  }

  export type ApiKeyUsageMaxAggregateOutputType = {
    id: string | null
    apiKeyId: string | null
    endpoint: string | null
    method: string | null
    statusCode: number | null
    tokensConsumed: number | null
    ipAddress: string | null
    userAgent: string | null
    responseTime: number | null
    createdAt: Date | null
  }

  export type ApiKeyUsageCountAggregateOutputType = {
    id: number
    apiKeyId: number
    endpoint: number
    method: number
    statusCode: number
    tokensConsumed: number
    ipAddress: number
    userAgent: number
    requestBody: number
    responseTime: number
    createdAt: number
    _all: number
  }


  export type ApiKeyUsageAvgAggregateInputType = {
    statusCode?: true
    tokensConsumed?: true
    responseTime?: true
  }

  export type ApiKeyUsageSumAggregateInputType = {
    statusCode?: true
    tokensConsumed?: true
    responseTime?: true
  }

  export type ApiKeyUsageMinAggregateInputType = {
    id?: true
    apiKeyId?: true
    endpoint?: true
    method?: true
    statusCode?: true
    tokensConsumed?: true
    ipAddress?: true
    userAgent?: true
    responseTime?: true
    createdAt?: true
  }

  export type ApiKeyUsageMaxAggregateInputType = {
    id?: true
    apiKeyId?: true
    endpoint?: true
    method?: true
    statusCode?: true
    tokensConsumed?: true
    ipAddress?: true
    userAgent?: true
    responseTime?: true
    createdAt?: true
  }

  export type ApiKeyUsageCountAggregateInputType = {
    id?: true
    apiKeyId?: true
    endpoint?: true
    method?: true
    statusCode?: true
    tokensConsumed?: true
    ipAddress?: true
    userAgent?: true
    requestBody?: true
    responseTime?: true
    createdAt?: true
    _all?: true
  }

  export type ApiKeyUsageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApiKeyUsage to aggregate.
     */
    where?: ApiKeyUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeyUsages to fetch.
     */
    orderBy?: ApiKeyUsageOrderByWithRelationInput | ApiKeyUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApiKeyUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeyUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeyUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ApiKeyUsages
    **/
    _count?: true | ApiKeyUsageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApiKeyUsageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApiKeyUsageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApiKeyUsageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApiKeyUsageMaxAggregateInputType
  }

  export type GetApiKeyUsageAggregateType<T extends ApiKeyUsageAggregateArgs> = {
        [P in keyof T & keyof AggregateApiKeyUsage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApiKeyUsage[P]>
      : GetScalarType<T[P], AggregateApiKeyUsage[P]>
  }




  export type ApiKeyUsageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApiKeyUsageWhereInput
    orderBy?: ApiKeyUsageOrderByWithAggregationInput | ApiKeyUsageOrderByWithAggregationInput[]
    by: ApiKeyUsageScalarFieldEnum[] | ApiKeyUsageScalarFieldEnum
    having?: ApiKeyUsageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApiKeyUsageCountAggregateInputType | true
    _avg?: ApiKeyUsageAvgAggregateInputType
    _sum?: ApiKeyUsageSumAggregateInputType
    _min?: ApiKeyUsageMinAggregateInputType
    _max?: ApiKeyUsageMaxAggregateInputType
  }

  export type ApiKeyUsageGroupByOutputType = {
    id: string
    apiKeyId: string
    endpoint: string
    method: string
    statusCode: number
    tokensConsumed: number | null
    ipAddress: string | null
    userAgent: string | null
    requestBody: JsonValue | null
    responseTime: number | null
    createdAt: Date
    _count: ApiKeyUsageCountAggregateOutputType | null
    _avg: ApiKeyUsageAvgAggregateOutputType | null
    _sum: ApiKeyUsageSumAggregateOutputType | null
    _min: ApiKeyUsageMinAggregateOutputType | null
    _max: ApiKeyUsageMaxAggregateOutputType | null
  }

  type GetApiKeyUsageGroupByPayload<T extends ApiKeyUsageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApiKeyUsageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApiKeyUsageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApiKeyUsageGroupByOutputType[P]>
            : GetScalarType<T[P], ApiKeyUsageGroupByOutputType[P]>
        }
      >
    >


  export type ApiKeyUsageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    apiKeyId?: boolean
    endpoint?: boolean
    method?: boolean
    statusCode?: boolean
    tokensConsumed?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    requestBody?: boolean
    responseTime?: boolean
    createdAt?: boolean
    apiKey?: boolean | ApiKeyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["apiKeyUsage"]>

  export type ApiKeyUsageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    apiKeyId?: boolean
    endpoint?: boolean
    method?: boolean
    statusCode?: boolean
    tokensConsumed?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    requestBody?: boolean
    responseTime?: boolean
    createdAt?: boolean
    apiKey?: boolean | ApiKeyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["apiKeyUsage"]>

  export type ApiKeyUsageSelectScalar = {
    id?: boolean
    apiKeyId?: boolean
    endpoint?: boolean
    method?: boolean
    statusCode?: boolean
    tokensConsumed?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    requestBody?: boolean
    responseTime?: boolean
    createdAt?: boolean
  }

  export type ApiKeyUsageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    apiKey?: boolean | ApiKeyDefaultArgs<ExtArgs>
  }
  export type ApiKeyUsageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    apiKey?: boolean | ApiKeyDefaultArgs<ExtArgs>
  }

  export type $ApiKeyUsagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ApiKeyUsage"
    objects: {
      apiKey: Prisma.$ApiKeyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      apiKeyId: string
      endpoint: string
      method: string
      statusCode: number
      tokensConsumed: number | null
      ipAddress: string | null
      userAgent: string | null
      requestBody: Prisma.JsonValue | null
      responseTime: number | null
      createdAt: Date
    }, ExtArgs["result"]["apiKeyUsage"]>
    composites: {}
  }

  type ApiKeyUsageGetPayload<S extends boolean | null | undefined | ApiKeyUsageDefaultArgs> = $Result.GetResult<Prisma.$ApiKeyUsagePayload, S>

  type ApiKeyUsageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ApiKeyUsageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ApiKeyUsageCountAggregateInputType | true
    }

  export interface ApiKeyUsageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ApiKeyUsage'], meta: { name: 'ApiKeyUsage' } }
    /**
     * Find zero or one ApiKeyUsage that matches the filter.
     * @param {ApiKeyUsageFindUniqueArgs} args - Arguments to find a ApiKeyUsage
     * @example
     * // Get one ApiKeyUsage
     * const apiKeyUsage = await prisma.apiKeyUsage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApiKeyUsageFindUniqueArgs>(args: SelectSubset<T, ApiKeyUsageFindUniqueArgs<ExtArgs>>): Prisma__ApiKeyUsageClient<$Result.GetResult<Prisma.$ApiKeyUsagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ApiKeyUsage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ApiKeyUsageFindUniqueOrThrowArgs} args - Arguments to find a ApiKeyUsage
     * @example
     * // Get one ApiKeyUsage
     * const apiKeyUsage = await prisma.apiKeyUsage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApiKeyUsageFindUniqueOrThrowArgs>(args: SelectSubset<T, ApiKeyUsageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApiKeyUsageClient<$Result.GetResult<Prisma.$ApiKeyUsagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ApiKeyUsage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyUsageFindFirstArgs} args - Arguments to find a ApiKeyUsage
     * @example
     * // Get one ApiKeyUsage
     * const apiKeyUsage = await prisma.apiKeyUsage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApiKeyUsageFindFirstArgs>(args?: SelectSubset<T, ApiKeyUsageFindFirstArgs<ExtArgs>>): Prisma__ApiKeyUsageClient<$Result.GetResult<Prisma.$ApiKeyUsagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ApiKeyUsage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyUsageFindFirstOrThrowArgs} args - Arguments to find a ApiKeyUsage
     * @example
     * // Get one ApiKeyUsage
     * const apiKeyUsage = await prisma.apiKeyUsage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApiKeyUsageFindFirstOrThrowArgs>(args?: SelectSubset<T, ApiKeyUsageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApiKeyUsageClient<$Result.GetResult<Prisma.$ApiKeyUsagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ApiKeyUsages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyUsageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ApiKeyUsages
     * const apiKeyUsages = await prisma.apiKeyUsage.findMany()
     * 
     * // Get first 10 ApiKeyUsages
     * const apiKeyUsages = await prisma.apiKeyUsage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const apiKeyUsageWithIdOnly = await prisma.apiKeyUsage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApiKeyUsageFindManyArgs>(args?: SelectSubset<T, ApiKeyUsageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApiKeyUsagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ApiKeyUsage.
     * @param {ApiKeyUsageCreateArgs} args - Arguments to create a ApiKeyUsage.
     * @example
     * // Create one ApiKeyUsage
     * const ApiKeyUsage = await prisma.apiKeyUsage.create({
     *   data: {
     *     // ... data to create a ApiKeyUsage
     *   }
     * })
     * 
     */
    create<T extends ApiKeyUsageCreateArgs>(args: SelectSubset<T, ApiKeyUsageCreateArgs<ExtArgs>>): Prisma__ApiKeyUsageClient<$Result.GetResult<Prisma.$ApiKeyUsagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ApiKeyUsages.
     * @param {ApiKeyUsageCreateManyArgs} args - Arguments to create many ApiKeyUsages.
     * @example
     * // Create many ApiKeyUsages
     * const apiKeyUsage = await prisma.apiKeyUsage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApiKeyUsageCreateManyArgs>(args?: SelectSubset<T, ApiKeyUsageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ApiKeyUsages and returns the data saved in the database.
     * @param {ApiKeyUsageCreateManyAndReturnArgs} args - Arguments to create many ApiKeyUsages.
     * @example
     * // Create many ApiKeyUsages
     * const apiKeyUsage = await prisma.apiKeyUsage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ApiKeyUsages and only return the `id`
     * const apiKeyUsageWithIdOnly = await prisma.apiKeyUsage.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ApiKeyUsageCreateManyAndReturnArgs>(args?: SelectSubset<T, ApiKeyUsageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApiKeyUsagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ApiKeyUsage.
     * @param {ApiKeyUsageDeleteArgs} args - Arguments to delete one ApiKeyUsage.
     * @example
     * // Delete one ApiKeyUsage
     * const ApiKeyUsage = await prisma.apiKeyUsage.delete({
     *   where: {
     *     // ... filter to delete one ApiKeyUsage
     *   }
     * })
     * 
     */
    delete<T extends ApiKeyUsageDeleteArgs>(args: SelectSubset<T, ApiKeyUsageDeleteArgs<ExtArgs>>): Prisma__ApiKeyUsageClient<$Result.GetResult<Prisma.$ApiKeyUsagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ApiKeyUsage.
     * @param {ApiKeyUsageUpdateArgs} args - Arguments to update one ApiKeyUsage.
     * @example
     * // Update one ApiKeyUsage
     * const apiKeyUsage = await prisma.apiKeyUsage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApiKeyUsageUpdateArgs>(args: SelectSubset<T, ApiKeyUsageUpdateArgs<ExtArgs>>): Prisma__ApiKeyUsageClient<$Result.GetResult<Prisma.$ApiKeyUsagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ApiKeyUsages.
     * @param {ApiKeyUsageDeleteManyArgs} args - Arguments to filter ApiKeyUsages to delete.
     * @example
     * // Delete a few ApiKeyUsages
     * const { count } = await prisma.apiKeyUsage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApiKeyUsageDeleteManyArgs>(args?: SelectSubset<T, ApiKeyUsageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApiKeyUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyUsageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ApiKeyUsages
     * const apiKeyUsage = await prisma.apiKeyUsage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApiKeyUsageUpdateManyArgs>(args: SelectSubset<T, ApiKeyUsageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ApiKeyUsage.
     * @param {ApiKeyUsageUpsertArgs} args - Arguments to update or create a ApiKeyUsage.
     * @example
     * // Update or create a ApiKeyUsage
     * const apiKeyUsage = await prisma.apiKeyUsage.upsert({
     *   create: {
     *     // ... data to create a ApiKeyUsage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ApiKeyUsage we want to update
     *   }
     * })
     */
    upsert<T extends ApiKeyUsageUpsertArgs>(args: SelectSubset<T, ApiKeyUsageUpsertArgs<ExtArgs>>): Prisma__ApiKeyUsageClient<$Result.GetResult<Prisma.$ApiKeyUsagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ApiKeyUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyUsageCountArgs} args - Arguments to filter ApiKeyUsages to count.
     * @example
     * // Count the number of ApiKeyUsages
     * const count = await prisma.apiKeyUsage.count({
     *   where: {
     *     // ... the filter for the ApiKeyUsages we want to count
     *   }
     * })
    **/
    count<T extends ApiKeyUsageCountArgs>(
      args?: Subset<T, ApiKeyUsageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApiKeyUsageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ApiKeyUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyUsageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApiKeyUsageAggregateArgs>(args: Subset<T, ApiKeyUsageAggregateArgs>): Prisma.PrismaPromise<GetApiKeyUsageAggregateType<T>>

    /**
     * Group by ApiKeyUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyUsageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApiKeyUsageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApiKeyUsageGroupByArgs['orderBy'] }
        : { orderBy?: ApiKeyUsageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApiKeyUsageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApiKeyUsageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ApiKeyUsage model
   */
  readonly fields: ApiKeyUsageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ApiKeyUsage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApiKeyUsageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    apiKey<T extends ApiKeyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApiKeyDefaultArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ApiKeyUsage model
   */ 
  interface ApiKeyUsageFieldRefs {
    readonly id: FieldRef<"ApiKeyUsage", 'String'>
    readonly apiKeyId: FieldRef<"ApiKeyUsage", 'String'>
    readonly endpoint: FieldRef<"ApiKeyUsage", 'String'>
    readonly method: FieldRef<"ApiKeyUsage", 'String'>
    readonly statusCode: FieldRef<"ApiKeyUsage", 'Int'>
    readonly tokensConsumed: FieldRef<"ApiKeyUsage", 'Int'>
    readonly ipAddress: FieldRef<"ApiKeyUsage", 'String'>
    readonly userAgent: FieldRef<"ApiKeyUsage", 'String'>
    readonly requestBody: FieldRef<"ApiKeyUsage", 'Json'>
    readonly responseTime: FieldRef<"ApiKeyUsage", 'Int'>
    readonly createdAt: FieldRef<"ApiKeyUsage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ApiKeyUsage findUnique
   */
  export type ApiKeyUsageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKeyUsage
     */
    select?: ApiKeyUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyUsageInclude<ExtArgs> | null
    /**
     * Filter, which ApiKeyUsage to fetch.
     */
    where: ApiKeyUsageWhereUniqueInput
  }

  /**
   * ApiKeyUsage findUniqueOrThrow
   */
  export type ApiKeyUsageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKeyUsage
     */
    select?: ApiKeyUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyUsageInclude<ExtArgs> | null
    /**
     * Filter, which ApiKeyUsage to fetch.
     */
    where: ApiKeyUsageWhereUniqueInput
  }

  /**
   * ApiKeyUsage findFirst
   */
  export type ApiKeyUsageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKeyUsage
     */
    select?: ApiKeyUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyUsageInclude<ExtArgs> | null
    /**
     * Filter, which ApiKeyUsage to fetch.
     */
    where?: ApiKeyUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeyUsages to fetch.
     */
    orderBy?: ApiKeyUsageOrderByWithRelationInput | ApiKeyUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApiKeyUsages.
     */
    cursor?: ApiKeyUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeyUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeyUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApiKeyUsages.
     */
    distinct?: ApiKeyUsageScalarFieldEnum | ApiKeyUsageScalarFieldEnum[]
  }

  /**
   * ApiKeyUsage findFirstOrThrow
   */
  export type ApiKeyUsageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKeyUsage
     */
    select?: ApiKeyUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyUsageInclude<ExtArgs> | null
    /**
     * Filter, which ApiKeyUsage to fetch.
     */
    where?: ApiKeyUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeyUsages to fetch.
     */
    orderBy?: ApiKeyUsageOrderByWithRelationInput | ApiKeyUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApiKeyUsages.
     */
    cursor?: ApiKeyUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeyUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeyUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApiKeyUsages.
     */
    distinct?: ApiKeyUsageScalarFieldEnum | ApiKeyUsageScalarFieldEnum[]
  }

  /**
   * ApiKeyUsage findMany
   */
  export type ApiKeyUsageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKeyUsage
     */
    select?: ApiKeyUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyUsageInclude<ExtArgs> | null
    /**
     * Filter, which ApiKeyUsages to fetch.
     */
    where?: ApiKeyUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeyUsages to fetch.
     */
    orderBy?: ApiKeyUsageOrderByWithRelationInput | ApiKeyUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ApiKeyUsages.
     */
    cursor?: ApiKeyUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeyUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeyUsages.
     */
    skip?: number
    distinct?: ApiKeyUsageScalarFieldEnum | ApiKeyUsageScalarFieldEnum[]
  }

  /**
   * ApiKeyUsage create
   */
  export type ApiKeyUsageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKeyUsage
     */
    select?: ApiKeyUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyUsageInclude<ExtArgs> | null
    /**
     * The data needed to create a ApiKeyUsage.
     */
    data: XOR<ApiKeyUsageCreateInput, ApiKeyUsageUncheckedCreateInput>
  }

  /**
   * ApiKeyUsage createMany
   */
  export type ApiKeyUsageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ApiKeyUsages.
     */
    data: ApiKeyUsageCreateManyInput | ApiKeyUsageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ApiKeyUsage createManyAndReturn
   */
  export type ApiKeyUsageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKeyUsage
     */
    select?: ApiKeyUsageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ApiKeyUsages.
     */
    data: ApiKeyUsageCreateManyInput | ApiKeyUsageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyUsageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ApiKeyUsage update
   */
  export type ApiKeyUsageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKeyUsage
     */
    select?: ApiKeyUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyUsageInclude<ExtArgs> | null
    /**
     * The data needed to update a ApiKeyUsage.
     */
    data: XOR<ApiKeyUsageUpdateInput, ApiKeyUsageUncheckedUpdateInput>
    /**
     * Choose, which ApiKeyUsage to update.
     */
    where: ApiKeyUsageWhereUniqueInput
  }

  /**
   * ApiKeyUsage updateMany
   */
  export type ApiKeyUsageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ApiKeyUsages.
     */
    data: XOR<ApiKeyUsageUpdateManyMutationInput, ApiKeyUsageUncheckedUpdateManyInput>
    /**
     * Filter which ApiKeyUsages to update
     */
    where?: ApiKeyUsageWhereInput
  }

  /**
   * ApiKeyUsage upsert
   */
  export type ApiKeyUsageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKeyUsage
     */
    select?: ApiKeyUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyUsageInclude<ExtArgs> | null
    /**
     * The filter to search for the ApiKeyUsage to update in case it exists.
     */
    where: ApiKeyUsageWhereUniqueInput
    /**
     * In case the ApiKeyUsage found by the `where` argument doesn't exist, create a new ApiKeyUsage with this data.
     */
    create: XOR<ApiKeyUsageCreateInput, ApiKeyUsageUncheckedCreateInput>
    /**
     * In case the ApiKeyUsage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApiKeyUsageUpdateInput, ApiKeyUsageUncheckedUpdateInput>
  }

  /**
   * ApiKeyUsage delete
   */
  export type ApiKeyUsageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKeyUsage
     */
    select?: ApiKeyUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyUsageInclude<ExtArgs> | null
    /**
     * Filter which ApiKeyUsage to delete.
     */
    where: ApiKeyUsageWhereUniqueInput
  }

  /**
   * ApiKeyUsage deleteMany
   */
  export type ApiKeyUsageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApiKeyUsages to delete
     */
    where?: ApiKeyUsageWhereInput
  }

  /**
   * ApiKeyUsage without action
   */
  export type ApiKeyUsageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKeyUsage
     */
    select?: ApiKeyUsageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyUsageInclude<ExtArgs> | null
  }


  /**
   * Model SystemLog
   */

  export type AggregateSystemLog = {
    _count: SystemLogCountAggregateOutputType | null
    _min: SystemLogMinAggregateOutputType | null
    _max: SystemLogMaxAggregateOutputType | null
  }

  export type SystemLogMinAggregateOutputType = {
    id: string | null
    level: string | null
    message: string | null
    timestamp: Date | null
  }

  export type SystemLogMaxAggregateOutputType = {
    id: string | null
    level: string | null
    message: string | null
    timestamp: Date | null
  }

  export type SystemLogCountAggregateOutputType = {
    id: number
    level: number
    message: number
    context: number
    error: number
    timestamp: number
    _all: number
  }


  export type SystemLogMinAggregateInputType = {
    id?: true
    level?: true
    message?: true
    timestamp?: true
  }

  export type SystemLogMaxAggregateInputType = {
    id?: true
    level?: true
    message?: true
    timestamp?: true
  }

  export type SystemLogCountAggregateInputType = {
    id?: true
    level?: true
    message?: true
    context?: true
    error?: true
    timestamp?: true
    _all?: true
  }

  export type SystemLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemLog to aggregate.
     */
    where?: SystemLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemLogs to fetch.
     */
    orderBy?: SystemLogOrderByWithRelationInput | SystemLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemLogs
    **/
    _count?: true | SystemLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemLogMaxAggregateInputType
  }

  export type GetSystemLogAggregateType<T extends SystemLogAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemLog[P]>
      : GetScalarType<T[P], AggregateSystemLog[P]>
  }




  export type SystemLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemLogWhereInput
    orderBy?: SystemLogOrderByWithAggregationInput | SystemLogOrderByWithAggregationInput[]
    by: SystemLogScalarFieldEnum[] | SystemLogScalarFieldEnum
    having?: SystemLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemLogCountAggregateInputType | true
    _min?: SystemLogMinAggregateInputType
    _max?: SystemLogMaxAggregateInputType
  }

  export type SystemLogGroupByOutputType = {
    id: string
    level: string
    message: string
    context: JsonValue | null
    error: JsonValue | null
    timestamp: Date
    _count: SystemLogCountAggregateOutputType | null
    _min: SystemLogMinAggregateOutputType | null
    _max: SystemLogMaxAggregateOutputType | null
  }

  type GetSystemLogGroupByPayload<T extends SystemLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemLogGroupByOutputType[P]>
            : GetScalarType<T[P], SystemLogGroupByOutputType[P]>
        }
      >
    >


  export type SystemLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    level?: boolean
    message?: boolean
    context?: boolean
    error?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["systemLog"]>

  export type SystemLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    level?: boolean
    message?: boolean
    context?: boolean
    error?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["systemLog"]>

  export type SystemLogSelectScalar = {
    id?: boolean
    level?: boolean
    message?: boolean
    context?: boolean
    error?: boolean
    timestamp?: boolean
  }


  export type $SystemLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SystemLog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      level: string
      message: string
      context: Prisma.JsonValue | null
      error: Prisma.JsonValue | null
      timestamp: Date
    }, ExtArgs["result"]["systemLog"]>
    composites: {}
  }

  type SystemLogGetPayload<S extends boolean | null | undefined | SystemLogDefaultArgs> = $Result.GetResult<Prisma.$SystemLogPayload, S>

  type SystemLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SystemLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SystemLogCountAggregateInputType | true
    }

  export interface SystemLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemLog'], meta: { name: 'SystemLog' } }
    /**
     * Find zero or one SystemLog that matches the filter.
     * @param {SystemLogFindUniqueArgs} args - Arguments to find a SystemLog
     * @example
     * // Get one SystemLog
     * const systemLog = await prisma.systemLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemLogFindUniqueArgs>(args: SelectSubset<T, SystemLogFindUniqueArgs<ExtArgs>>): Prisma__SystemLogClient<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SystemLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SystemLogFindUniqueOrThrowArgs} args - Arguments to find a SystemLog
     * @example
     * // Get one SystemLog
     * const systemLog = await prisma.systemLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemLogFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemLogClient<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SystemLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogFindFirstArgs} args - Arguments to find a SystemLog
     * @example
     * // Get one SystemLog
     * const systemLog = await prisma.systemLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemLogFindFirstArgs>(args?: SelectSubset<T, SystemLogFindFirstArgs<ExtArgs>>): Prisma__SystemLogClient<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SystemLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogFindFirstOrThrowArgs} args - Arguments to find a SystemLog
     * @example
     * // Get one SystemLog
     * const systemLog = await prisma.systemLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemLogFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemLogClient<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SystemLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemLogs
     * const systemLogs = await prisma.systemLog.findMany()
     * 
     * // Get first 10 SystemLogs
     * const systemLogs = await prisma.systemLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemLogWithIdOnly = await prisma.systemLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemLogFindManyArgs>(args?: SelectSubset<T, SystemLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SystemLog.
     * @param {SystemLogCreateArgs} args - Arguments to create a SystemLog.
     * @example
     * // Create one SystemLog
     * const SystemLog = await prisma.systemLog.create({
     *   data: {
     *     // ... data to create a SystemLog
     *   }
     * })
     * 
     */
    create<T extends SystemLogCreateArgs>(args: SelectSubset<T, SystemLogCreateArgs<ExtArgs>>): Prisma__SystemLogClient<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SystemLogs.
     * @param {SystemLogCreateManyArgs} args - Arguments to create many SystemLogs.
     * @example
     * // Create many SystemLogs
     * const systemLog = await prisma.systemLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemLogCreateManyArgs>(args?: SelectSubset<T, SystemLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SystemLogs and returns the data saved in the database.
     * @param {SystemLogCreateManyAndReturnArgs} args - Arguments to create many SystemLogs.
     * @example
     * // Create many SystemLogs
     * const systemLog = await prisma.systemLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SystemLogs and only return the `id`
     * const systemLogWithIdOnly = await prisma.systemLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SystemLogCreateManyAndReturnArgs>(args?: SelectSubset<T, SystemLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SystemLog.
     * @param {SystemLogDeleteArgs} args - Arguments to delete one SystemLog.
     * @example
     * // Delete one SystemLog
     * const SystemLog = await prisma.systemLog.delete({
     *   where: {
     *     // ... filter to delete one SystemLog
     *   }
     * })
     * 
     */
    delete<T extends SystemLogDeleteArgs>(args: SelectSubset<T, SystemLogDeleteArgs<ExtArgs>>): Prisma__SystemLogClient<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SystemLog.
     * @param {SystemLogUpdateArgs} args - Arguments to update one SystemLog.
     * @example
     * // Update one SystemLog
     * const systemLog = await prisma.systemLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemLogUpdateArgs>(args: SelectSubset<T, SystemLogUpdateArgs<ExtArgs>>): Prisma__SystemLogClient<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SystemLogs.
     * @param {SystemLogDeleteManyArgs} args - Arguments to filter SystemLogs to delete.
     * @example
     * // Delete a few SystemLogs
     * const { count } = await prisma.systemLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemLogDeleteManyArgs>(args?: SelectSubset<T, SystemLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemLogs
     * const systemLog = await prisma.systemLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemLogUpdateManyArgs>(args: SelectSubset<T, SystemLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SystemLog.
     * @param {SystemLogUpsertArgs} args - Arguments to update or create a SystemLog.
     * @example
     * // Update or create a SystemLog
     * const systemLog = await prisma.systemLog.upsert({
     *   create: {
     *     // ... data to create a SystemLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemLog we want to update
     *   }
     * })
     */
    upsert<T extends SystemLogUpsertArgs>(args: SelectSubset<T, SystemLogUpsertArgs<ExtArgs>>): Prisma__SystemLogClient<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SystemLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogCountArgs} args - Arguments to filter SystemLogs to count.
     * @example
     * // Count the number of SystemLogs
     * const count = await prisma.systemLog.count({
     *   where: {
     *     // ... the filter for the SystemLogs we want to count
     *   }
     * })
    **/
    count<T extends SystemLogCountArgs>(
      args?: Subset<T, SystemLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemLogAggregateArgs>(args: Subset<T, SystemLogAggregateArgs>): Prisma.PrismaPromise<GetSystemLogAggregateType<T>>

    /**
     * Group by SystemLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemLogGroupByArgs['orderBy'] }
        : { orderBy?: SystemLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemLog model
   */
  readonly fields: SystemLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SystemLog model
   */ 
  interface SystemLogFieldRefs {
    readonly id: FieldRef<"SystemLog", 'String'>
    readonly level: FieldRef<"SystemLog", 'String'>
    readonly message: FieldRef<"SystemLog", 'String'>
    readonly context: FieldRef<"SystemLog", 'Json'>
    readonly error: FieldRef<"SystemLog", 'Json'>
    readonly timestamp: FieldRef<"SystemLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SystemLog findUnique
   */
  export type SystemLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * Filter, which SystemLog to fetch.
     */
    where: SystemLogWhereUniqueInput
  }

  /**
   * SystemLog findUniqueOrThrow
   */
  export type SystemLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * Filter, which SystemLog to fetch.
     */
    where: SystemLogWhereUniqueInput
  }

  /**
   * SystemLog findFirst
   */
  export type SystemLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * Filter, which SystemLog to fetch.
     */
    where?: SystemLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemLogs to fetch.
     */
    orderBy?: SystemLogOrderByWithRelationInput | SystemLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemLogs.
     */
    cursor?: SystemLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemLogs.
     */
    distinct?: SystemLogScalarFieldEnum | SystemLogScalarFieldEnum[]
  }

  /**
   * SystemLog findFirstOrThrow
   */
  export type SystemLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * Filter, which SystemLog to fetch.
     */
    where?: SystemLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemLogs to fetch.
     */
    orderBy?: SystemLogOrderByWithRelationInput | SystemLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemLogs.
     */
    cursor?: SystemLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemLogs.
     */
    distinct?: SystemLogScalarFieldEnum | SystemLogScalarFieldEnum[]
  }

  /**
   * SystemLog findMany
   */
  export type SystemLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * Filter, which SystemLogs to fetch.
     */
    where?: SystemLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemLogs to fetch.
     */
    orderBy?: SystemLogOrderByWithRelationInput | SystemLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemLogs.
     */
    cursor?: SystemLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemLogs.
     */
    skip?: number
    distinct?: SystemLogScalarFieldEnum | SystemLogScalarFieldEnum[]
  }

  /**
   * SystemLog create
   */
  export type SystemLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * The data needed to create a SystemLog.
     */
    data: XOR<SystemLogCreateInput, SystemLogUncheckedCreateInput>
  }

  /**
   * SystemLog createMany
   */
  export type SystemLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemLogs.
     */
    data: SystemLogCreateManyInput | SystemLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemLog createManyAndReturn
   */
  export type SystemLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SystemLogs.
     */
    data: SystemLogCreateManyInput | SystemLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemLog update
   */
  export type SystemLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * The data needed to update a SystemLog.
     */
    data: XOR<SystemLogUpdateInput, SystemLogUncheckedUpdateInput>
    /**
     * Choose, which SystemLog to update.
     */
    where: SystemLogWhereUniqueInput
  }

  /**
   * SystemLog updateMany
   */
  export type SystemLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemLogs.
     */
    data: XOR<SystemLogUpdateManyMutationInput, SystemLogUncheckedUpdateManyInput>
    /**
     * Filter which SystemLogs to update
     */
    where?: SystemLogWhereInput
  }

  /**
   * SystemLog upsert
   */
  export type SystemLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * The filter to search for the SystemLog to update in case it exists.
     */
    where: SystemLogWhereUniqueInput
    /**
     * In case the SystemLog found by the `where` argument doesn't exist, create a new SystemLog with this data.
     */
    create: XOR<SystemLogCreateInput, SystemLogUncheckedCreateInput>
    /**
     * In case the SystemLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemLogUpdateInput, SystemLogUncheckedUpdateInput>
  }

  /**
   * SystemLog delete
   */
  export type SystemLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * Filter which SystemLog to delete.
     */
    where: SystemLogWhereUniqueInput
  }

  /**
   * SystemLog deleteMany
   */
  export type SystemLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemLogs to delete
     */
    where?: SystemLogWhereInput
  }

  /**
   * SystemLog without action
   */
  export type SystemLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
  }

  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */ 
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: string
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
  }

  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionToken: string
      userId: string
      expires: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly sessionToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly expires: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }


  export type $VerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      identifier: string
      token: string
      expires: Date
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }

  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VerificationTokenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationTokenFindUniqueArgs>(args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one VerificationToken that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationTokenFindFirstArgs>(args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
     */
    findMany<T extends VerificationTokenFindManyArgs>(args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
     */
    create<T extends VerificationTokenCreateArgs>(args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many VerificationTokens.
     * @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationTokenCreateManyArgs>(args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificationTokens and returns the data saved in the database.
     * @param {VerificationTokenCreateManyAndReturnArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.createManyAndReturn({ 
     *   select: { identifier: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
     */
    delete<T extends VerificationTokenDeleteArgs>(args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationTokenUpdateArgs>(args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationTokenDeleteManyArgs>(args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationTokenUpdateManyArgs>(args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
     */
    upsert<T extends VerificationTokenUpsertArgs>(args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationToken model
   */ 
  interface VerificationTokenFieldRefs {
    readonly identifier: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }

  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken createManyAndReturn
   */
  export type VerificationTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
  }

  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }

  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
  }

  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AgencyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    subscriptionPlan: 'subscriptionPlan',
    tokenBalance: 'tokenBalance',
    stripeCustomerId: 'stripeCustomerId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AgencyScalarFieldEnum = (typeof AgencyScalarFieldEnum)[keyof typeof AgencyScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    role: 'role',
    emailVerified: 'emailVerified',
    emailVerificationToken: 'emailVerificationToken',
    passwordResetToken: 'passwordResetToken',
    passwordResetExpires: 'passwordResetExpires',
    agencyId: 'agencyId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserInvitationScalarFieldEnum: {
    id: 'id',
    email: 'email',
    role: 'role',
    token: 'token',
    expiresAt: 'expiresAt',
    usedAt: 'usedAt',
    senderId: 'senderId',
    agencyId: 'agencyId',
    clientIds: 'clientIds',
    createdAt: 'createdAt'
  };

  export type UserInvitationScalarFieldEnum = (typeof UserInvitationScalarFieldEnum)[keyof typeof UserInvitationScalarFieldEnum]


  export const ClientScalarFieldEnum: {
    id: 'id',
    agencyId: 'agencyId',
    brandName: 'brandName',
    brandColors: 'brandColors',
    typography: 'typography',
    description: 'description',
    logoUrl: 'logoUrl',
    whatsappNumber: 'whatsappNumber',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ClientScalarFieldEnum = (typeof ClientScalarFieldEnum)[keyof typeof ClientScalarFieldEnum]


  export const SocialMediaLinkScalarFieldEnum: {
    id: 'id',
    clientId: 'clientId',
    platform: 'platform',
    url: 'url',
    username: 'username'
  };

  export type SocialMediaLinkScalarFieldEnum = (typeof SocialMediaLinkScalarFieldEnum)[keyof typeof SocialMediaLinkScalarFieldEnum]


  export const BrandAssetScalarFieldEnum: {
    id: 'id',
    clientId: 'clientId',
    type: 'type',
    name: 'name',
    url: 'url',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type BrandAssetScalarFieldEnum = (typeof BrandAssetScalarFieldEnum)[keyof typeof BrandAssetScalarFieldEnum]


  export const CampaignScalarFieldEnum: {
    id: 'id',
    clientId: 'clientId',
    name: 'name',
    objective: 'objective',
    startDate: 'startDate',
    endDate: 'endDate',
    brandTone: 'brandTone',
    publicationFrequency: 'publicationFrequency',
    templateIds: 'templateIds',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CampaignScalarFieldEnum = (typeof CampaignScalarFieldEnum)[keyof typeof CampaignScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    campaignId: 'campaignId',
    scheduledDate: 'scheduledDate',
    status: 'status',
    finalImageUrl: 'finalImageUrl',
    embeddedText: 'embeddedText',
    publicationText: 'publicationText',
    hashtags: 'hashtags',
    cta: 'cta',
    generationJobId: 'generationJobId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const ContentGenerationJobScalarFieldEnum: {
    id: 'id',
    postId: 'postId',
    status: 'status',
    tokensConsumed: 'tokensConsumed',
    brandContext: 'brandContext',
    createdAt: 'createdAt',
    completedAt: 'completedAt'
  };

  export type ContentGenerationJobScalarFieldEnum = (typeof ContentGenerationJobScalarFieldEnum)[keyof typeof ContentGenerationJobScalarFieldEnum]


  export const GenerationStepResultScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    step: 'step',
    status: 'status',
    input: 'input',
    output: 'output',
    tokensUsed: 'tokensUsed',
    executedAt: 'executedAt',
    error: 'error'
  };

  export type GenerationStepResultScalarFieldEnum = (typeof GenerationStepResultScalarFieldEnum)[keyof typeof GenerationStepResultScalarFieldEnum]


  export const ContentVersionScalarFieldEnum: {
    id: 'id',
    postId: 'postId',
    versionNumber: 'versionNumber',
    finalImageUrl: 'finalImageUrl',
    embeddedText: 'embeddedText',
    publicationText: 'publicationText',
    hashtags: 'hashtags',
    cta: 'cta',
    createdAt: 'createdAt'
  };

  export type ContentVersionScalarFieldEnum = (typeof ContentVersionScalarFieldEnum)[keyof typeof ContentVersionScalarFieldEnum]


  export const SocialAccountScalarFieldEnum: {
    id: 'id',
    clientId: 'clientId',
    platform: 'platform',
    accountId: 'accountId',
    accountName: 'accountName',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    expiresAt: 'expiresAt',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SocialAccountScalarFieldEnum = (typeof SocialAccountScalarFieldEnum)[keyof typeof SocialAccountScalarFieldEnum]


  export const PublicationResultScalarFieldEnum: {
    id: 'id',
    postId: 'postId',
    socialAccountId: 'socialAccountId',
    platformPostId: 'platformPostId',
    status: 'status',
    publishedAt: 'publishedAt',
    error: 'error',
    createdAt: 'createdAt'
  };

  export type PublicationResultScalarFieldEnum = (typeof PublicationResultScalarFieldEnum)[keyof typeof PublicationResultScalarFieldEnum]


  export const TokenTransactionScalarFieldEnum: {
    id: 'id',
    agencyId: 'agencyId',
    userId: 'userId',
    amount: 'amount',
    type: 'type',
    description: 'description',
    reference: 'reference',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type TokenTransactionScalarFieldEnum = (typeof TokenTransactionScalarFieldEnum)[keyof typeof TokenTransactionScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    agencyId: 'agencyId',
    userId: 'userId',
    action: 'action',
    resource: 'resource',
    resourceId: 'resourceId',
    details: 'details',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const ApiKeyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    keyPrefix: 'keyPrefix',
    hashedKey: 'hashedKey',
    clientId: 'clientId',
    permissions: 'permissions',
    isActive: 'isActive',
    lastUsedAt: 'lastUsedAt',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ApiKeyScalarFieldEnum = (typeof ApiKeyScalarFieldEnum)[keyof typeof ApiKeyScalarFieldEnum]


  export const ApiKeyUsageScalarFieldEnum: {
    id: 'id',
    apiKeyId: 'apiKeyId',
    endpoint: 'endpoint',
    method: 'method',
    statusCode: 'statusCode',
    tokensConsumed: 'tokensConsumed',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    requestBody: 'requestBody',
    responseTime: 'responseTime',
    createdAt: 'createdAt'
  };

  export type ApiKeyUsageScalarFieldEnum = (typeof ApiKeyUsageScalarFieldEnum)[keyof typeof ApiKeyUsageScalarFieldEnum]


  export const SystemLogScalarFieldEnum: {
    id: 'id',
    level: 'level',
    message: 'message',
    context: 'context',
    error: 'error',
    timestamp: 'timestamp'
  };

  export type SystemLogScalarFieldEnum = (typeof SystemLogScalarFieldEnum)[keyof typeof SystemLogScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'SubscriptionPlan'
   */
  export type EnumSubscriptionPlanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionPlan'>
    


  /**
   * Reference to a field of type 'SubscriptionPlan[]'
   */
  export type ListEnumSubscriptionPlanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionPlan[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'AssetType'
   */
  export type EnumAssetTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssetType'>
    


  /**
   * Reference to a field of type 'AssetType[]'
   */
  export type ListEnumAssetTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssetType[]'>
    


  /**
   * Reference to a field of type 'CampaignStatus'
   */
  export type EnumCampaignStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CampaignStatus'>
    


  /**
   * Reference to a field of type 'CampaignStatus[]'
   */
  export type ListEnumCampaignStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CampaignStatus[]'>
    


  /**
   * Reference to a field of type 'PostStatus'
   */
  export type EnumPostStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PostStatus'>
    


  /**
   * Reference to a field of type 'PostStatus[]'
   */
  export type ListEnumPostStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PostStatus[]'>
    


  /**
   * Reference to a field of type 'JobStatus'
   */
  export type EnumJobStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobStatus'>
    


  /**
   * Reference to a field of type 'JobStatus[]'
   */
  export type ListEnumJobStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobStatus[]'>
    


  /**
   * Reference to a field of type 'GenerationStep'
   */
  export type EnumGenerationStepFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GenerationStep'>
    


  /**
   * Reference to a field of type 'GenerationStep[]'
   */
  export type ListEnumGenerationStepFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GenerationStep[]'>
    


  /**
   * Reference to a field of type 'StepStatus'
   */
  export type EnumStepStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StepStatus'>
    


  /**
   * Reference to a field of type 'StepStatus[]'
   */
  export type ListEnumStepStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StepStatus[]'>
    


  /**
   * Reference to a field of type 'SocialPlatform'
   */
  export type EnumSocialPlatformFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SocialPlatform'>
    


  /**
   * Reference to a field of type 'SocialPlatform[]'
   */
  export type ListEnumSocialPlatformFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SocialPlatform[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'PublicationStatus'
   */
  export type EnumPublicationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PublicationStatus'>
    


  /**
   * Reference to a field of type 'PublicationStatus[]'
   */
  export type ListEnumPublicationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PublicationStatus[]'>
    


  /**
   * Reference to a field of type 'TokenTransactionType'
   */
  export type EnumTokenTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TokenTransactionType'>
    


  /**
   * Reference to a field of type 'TokenTransactionType[]'
   */
  export type ListEnumTokenTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TokenTransactionType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AgencyWhereInput = {
    AND?: AgencyWhereInput | AgencyWhereInput[]
    OR?: AgencyWhereInput[]
    NOT?: AgencyWhereInput | AgencyWhereInput[]
    id?: StringFilter<"Agency"> | string
    name?: StringFilter<"Agency"> | string
    subscriptionPlan?: EnumSubscriptionPlanFilter<"Agency"> | $Enums.SubscriptionPlan
    tokenBalance?: IntFilter<"Agency"> | number
    stripeCustomerId?: StringNullableFilter<"Agency"> | string | null
    createdAt?: DateTimeFilter<"Agency"> | Date | string
    updatedAt?: DateTimeFilter<"Agency"> | Date | string
    users?: UserListRelationFilter
    clients?: ClientListRelationFilter
    userInvitations?: UserInvitationListRelationFilter
    tokenTransactions?: TokenTransactionListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }

  export type AgencyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    subscriptionPlan?: SortOrder
    tokenBalance?: SortOrder
    stripeCustomerId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: UserOrderByRelationAggregateInput
    clients?: ClientOrderByRelationAggregateInput
    userInvitations?: UserInvitationOrderByRelationAggregateInput
    tokenTransactions?: TokenTransactionOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
  }

  export type AgencyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    stripeCustomerId?: string
    AND?: AgencyWhereInput | AgencyWhereInput[]
    OR?: AgencyWhereInput[]
    NOT?: AgencyWhereInput | AgencyWhereInput[]
    name?: StringFilter<"Agency"> | string
    subscriptionPlan?: EnumSubscriptionPlanFilter<"Agency"> | $Enums.SubscriptionPlan
    tokenBalance?: IntFilter<"Agency"> | number
    createdAt?: DateTimeFilter<"Agency"> | Date | string
    updatedAt?: DateTimeFilter<"Agency"> | Date | string
    users?: UserListRelationFilter
    clients?: ClientListRelationFilter
    userInvitations?: UserInvitationListRelationFilter
    tokenTransactions?: TokenTransactionListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }, "id" | "stripeCustomerId">

  export type AgencyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    subscriptionPlan?: SortOrder
    tokenBalance?: SortOrder
    stripeCustomerId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AgencyCountOrderByAggregateInput
    _avg?: AgencyAvgOrderByAggregateInput
    _max?: AgencyMaxOrderByAggregateInput
    _min?: AgencyMinOrderByAggregateInput
    _sum?: AgencySumOrderByAggregateInput
  }

  export type AgencyScalarWhereWithAggregatesInput = {
    AND?: AgencyScalarWhereWithAggregatesInput | AgencyScalarWhereWithAggregatesInput[]
    OR?: AgencyScalarWhereWithAggregatesInput[]
    NOT?: AgencyScalarWhereWithAggregatesInput | AgencyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Agency"> | string
    name?: StringWithAggregatesFilter<"Agency"> | string
    subscriptionPlan?: EnumSubscriptionPlanWithAggregatesFilter<"Agency"> | $Enums.SubscriptionPlan
    tokenBalance?: IntWithAggregatesFilter<"Agency"> | number
    stripeCustomerId?: StringNullableWithAggregatesFilter<"Agency"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Agency"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Agency"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    emailVerificationToken?: StringNullableFilter<"User"> | string | null
    passwordResetToken?: StringNullableFilter<"User"> | string | null
    passwordResetExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    agencyId?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    agency?: XOR<AgencyRelationFilter, AgencyWhereInput>
    assignedClients?: ClientListRelationFilter
    invitationsSent?: UserInvitationListRelationFilter
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    tokenTransactions?: TokenTransactionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrderInput | SortOrder
    role?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    emailVerificationToken?: SortOrderInput | SortOrder
    passwordResetToken?: SortOrderInput | SortOrder
    passwordResetExpires?: SortOrderInput | SortOrder
    agencyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    agency?: AgencyOrderByWithRelationInput
    assignedClients?: ClientOrderByRelationAggregateInput
    invitationsSent?: UserInvitationOrderByRelationAggregateInput
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
    tokenTransactions?: TokenTransactionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    emailVerificationToken?: StringNullableFilter<"User"> | string | null
    passwordResetToken?: StringNullableFilter<"User"> | string | null
    passwordResetExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    agencyId?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    agency?: XOR<AgencyRelationFilter, AgencyWhereInput>
    assignedClients?: ClientListRelationFilter
    invitationsSent?: UserInvitationListRelationFilter
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    tokenTransactions?: TokenTransactionListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrderInput | SortOrder
    role?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    emailVerificationToken?: SortOrderInput | SortOrder
    passwordResetToken?: SortOrderInput | SortOrder
    passwordResetExpires?: SortOrderInput | SortOrder
    agencyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    emailVerificationToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    passwordResetToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    passwordResetExpires?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    agencyId?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type UserInvitationWhereInput = {
    AND?: UserInvitationWhereInput | UserInvitationWhereInput[]
    OR?: UserInvitationWhereInput[]
    NOT?: UserInvitationWhereInput | UserInvitationWhereInput[]
    id?: StringFilter<"UserInvitation"> | string
    email?: StringFilter<"UserInvitation"> | string
    role?: EnumUserRoleFilter<"UserInvitation"> | $Enums.UserRole
    token?: StringFilter<"UserInvitation"> | string
    expiresAt?: DateTimeFilter<"UserInvitation"> | Date | string
    usedAt?: DateTimeNullableFilter<"UserInvitation"> | Date | string | null
    senderId?: StringFilter<"UserInvitation"> | string
    agencyId?: StringFilter<"UserInvitation"> | string
    clientIds?: StringNullableListFilter<"UserInvitation">
    createdAt?: DateTimeFilter<"UserInvitation"> | Date | string
    sender?: XOR<UserRelationFilter, UserWhereInput>
    agency?: XOR<AgencyRelationFilter, AgencyWhereInput>
  }

  export type UserInvitationOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    role?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrderInput | SortOrder
    senderId?: SortOrder
    agencyId?: SortOrder
    clientIds?: SortOrder
    createdAt?: SortOrder
    sender?: UserOrderByWithRelationInput
    agency?: AgencyOrderByWithRelationInput
  }

  export type UserInvitationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: UserInvitationWhereInput | UserInvitationWhereInput[]
    OR?: UserInvitationWhereInput[]
    NOT?: UserInvitationWhereInput | UserInvitationWhereInput[]
    email?: StringFilter<"UserInvitation"> | string
    role?: EnumUserRoleFilter<"UserInvitation"> | $Enums.UserRole
    expiresAt?: DateTimeFilter<"UserInvitation"> | Date | string
    usedAt?: DateTimeNullableFilter<"UserInvitation"> | Date | string | null
    senderId?: StringFilter<"UserInvitation"> | string
    agencyId?: StringFilter<"UserInvitation"> | string
    clientIds?: StringNullableListFilter<"UserInvitation">
    createdAt?: DateTimeFilter<"UserInvitation"> | Date | string
    sender?: XOR<UserRelationFilter, UserWhereInput>
    agency?: XOR<AgencyRelationFilter, AgencyWhereInput>
  }, "id" | "token">

  export type UserInvitationOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    role?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrderInput | SortOrder
    senderId?: SortOrder
    agencyId?: SortOrder
    clientIds?: SortOrder
    createdAt?: SortOrder
    _count?: UserInvitationCountOrderByAggregateInput
    _max?: UserInvitationMaxOrderByAggregateInput
    _min?: UserInvitationMinOrderByAggregateInput
  }

  export type UserInvitationScalarWhereWithAggregatesInput = {
    AND?: UserInvitationScalarWhereWithAggregatesInput | UserInvitationScalarWhereWithAggregatesInput[]
    OR?: UserInvitationScalarWhereWithAggregatesInput[]
    NOT?: UserInvitationScalarWhereWithAggregatesInput | UserInvitationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserInvitation"> | string
    email?: StringWithAggregatesFilter<"UserInvitation"> | string
    role?: EnumUserRoleWithAggregatesFilter<"UserInvitation"> | $Enums.UserRole
    token?: StringWithAggregatesFilter<"UserInvitation"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"UserInvitation"> | Date | string
    usedAt?: DateTimeNullableWithAggregatesFilter<"UserInvitation"> | Date | string | null
    senderId?: StringWithAggregatesFilter<"UserInvitation"> | string
    agencyId?: StringWithAggregatesFilter<"UserInvitation"> | string
    clientIds?: StringNullableListFilter<"UserInvitation">
    createdAt?: DateTimeWithAggregatesFilter<"UserInvitation"> | Date | string
  }

  export type ClientWhereInput = {
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    id?: StringFilter<"Client"> | string
    agencyId?: StringFilter<"Client"> | string
    brandName?: StringFilter<"Client"> | string
    brandColors?: StringNullableListFilter<"Client">
    typography?: JsonNullableFilter<"Client">
    description?: StringNullableFilter<"Client"> | string | null
    logoUrl?: StringNullableFilter<"Client"> | string | null
    whatsappNumber?: StringNullableFilter<"Client"> | string | null
    createdAt?: DateTimeFilter<"Client"> | Date | string
    updatedAt?: DateTimeFilter<"Client"> | Date | string
    agency?: XOR<AgencyRelationFilter, AgencyWhereInput>
    assignedUsers?: UserListRelationFilter
    campaigns?: CampaignListRelationFilter
    brandAssets?: BrandAssetListRelationFilter
    socialAccounts?: SocialAccountListRelationFilter
    socialMediaLinks?: SocialMediaLinkListRelationFilter
    apiKeys?: ApiKeyListRelationFilter
  }

  export type ClientOrderByWithRelationInput = {
    id?: SortOrder
    agencyId?: SortOrder
    brandName?: SortOrder
    brandColors?: SortOrder
    typography?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    logoUrl?: SortOrderInput | SortOrder
    whatsappNumber?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    agency?: AgencyOrderByWithRelationInput
    assignedUsers?: UserOrderByRelationAggregateInput
    campaigns?: CampaignOrderByRelationAggregateInput
    brandAssets?: BrandAssetOrderByRelationAggregateInput
    socialAccounts?: SocialAccountOrderByRelationAggregateInput
    socialMediaLinks?: SocialMediaLinkOrderByRelationAggregateInput
    apiKeys?: ApiKeyOrderByRelationAggregateInput
  }

  export type ClientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    agencyId?: StringFilter<"Client"> | string
    brandName?: StringFilter<"Client"> | string
    brandColors?: StringNullableListFilter<"Client">
    typography?: JsonNullableFilter<"Client">
    description?: StringNullableFilter<"Client"> | string | null
    logoUrl?: StringNullableFilter<"Client"> | string | null
    whatsappNumber?: StringNullableFilter<"Client"> | string | null
    createdAt?: DateTimeFilter<"Client"> | Date | string
    updatedAt?: DateTimeFilter<"Client"> | Date | string
    agency?: XOR<AgencyRelationFilter, AgencyWhereInput>
    assignedUsers?: UserListRelationFilter
    campaigns?: CampaignListRelationFilter
    brandAssets?: BrandAssetListRelationFilter
    socialAccounts?: SocialAccountListRelationFilter
    socialMediaLinks?: SocialMediaLinkListRelationFilter
    apiKeys?: ApiKeyListRelationFilter
  }, "id">

  export type ClientOrderByWithAggregationInput = {
    id?: SortOrder
    agencyId?: SortOrder
    brandName?: SortOrder
    brandColors?: SortOrder
    typography?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    logoUrl?: SortOrderInput | SortOrder
    whatsappNumber?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ClientCountOrderByAggregateInput
    _max?: ClientMaxOrderByAggregateInput
    _min?: ClientMinOrderByAggregateInput
  }

  export type ClientScalarWhereWithAggregatesInput = {
    AND?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    OR?: ClientScalarWhereWithAggregatesInput[]
    NOT?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Client"> | string
    agencyId?: StringWithAggregatesFilter<"Client"> | string
    brandName?: StringWithAggregatesFilter<"Client"> | string
    brandColors?: StringNullableListFilter<"Client">
    typography?: JsonNullableWithAggregatesFilter<"Client">
    description?: StringNullableWithAggregatesFilter<"Client"> | string | null
    logoUrl?: StringNullableWithAggregatesFilter<"Client"> | string | null
    whatsappNumber?: StringNullableWithAggregatesFilter<"Client"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Client"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Client"> | Date | string
  }

  export type SocialMediaLinkWhereInput = {
    AND?: SocialMediaLinkWhereInput | SocialMediaLinkWhereInput[]
    OR?: SocialMediaLinkWhereInput[]
    NOT?: SocialMediaLinkWhereInput | SocialMediaLinkWhereInput[]
    id?: StringFilter<"SocialMediaLink"> | string
    clientId?: StringFilter<"SocialMediaLink"> | string
    platform?: StringFilter<"SocialMediaLink"> | string
    url?: StringFilter<"SocialMediaLink"> | string
    username?: StringNullableFilter<"SocialMediaLink"> | string | null
    client?: XOR<ClientRelationFilter, ClientWhereInput>
  }

  export type SocialMediaLinkOrderByWithRelationInput = {
    id?: SortOrder
    clientId?: SortOrder
    platform?: SortOrder
    url?: SortOrder
    username?: SortOrderInput | SortOrder
    client?: ClientOrderByWithRelationInput
  }

  export type SocialMediaLinkWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SocialMediaLinkWhereInput | SocialMediaLinkWhereInput[]
    OR?: SocialMediaLinkWhereInput[]
    NOT?: SocialMediaLinkWhereInput | SocialMediaLinkWhereInput[]
    clientId?: StringFilter<"SocialMediaLink"> | string
    platform?: StringFilter<"SocialMediaLink"> | string
    url?: StringFilter<"SocialMediaLink"> | string
    username?: StringNullableFilter<"SocialMediaLink"> | string | null
    client?: XOR<ClientRelationFilter, ClientWhereInput>
  }, "id">

  export type SocialMediaLinkOrderByWithAggregationInput = {
    id?: SortOrder
    clientId?: SortOrder
    platform?: SortOrder
    url?: SortOrder
    username?: SortOrderInput | SortOrder
    _count?: SocialMediaLinkCountOrderByAggregateInput
    _max?: SocialMediaLinkMaxOrderByAggregateInput
    _min?: SocialMediaLinkMinOrderByAggregateInput
  }

  export type SocialMediaLinkScalarWhereWithAggregatesInput = {
    AND?: SocialMediaLinkScalarWhereWithAggregatesInput | SocialMediaLinkScalarWhereWithAggregatesInput[]
    OR?: SocialMediaLinkScalarWhereWithAggregatesInput[]
    NOT?: SocialMediaLinkScalarWhereWithAggregatesInput | SocialMediaLinkScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SocialMediaLink"> | string
    clientId?: StringWithAggregatesFilter<"SocialMediaLink"> | string
    platform?: StringWithAggregatesFilter<"SocialMediaLink"> | string
    url?: StringWithAggregatesFilter<"SocialMediaLink"> | string
    username?: StringNullableWithAggregatesFilter<"SocialMediaLink"> | string | null
  }

  export type BrandAssetWhereInput = {
    AND?: BrandAssetWhereInput | BrandAssetWhereInput[]
    OR?: BrandAssetWhereInput[]
    NOT?: BrandAssetWhereInput | BrandAssetWhereInput[]
    id?: StringFilter<"BrandAsset"> | string
    clientId?: StringFilter<"BrandAsset"> | string
    type?: EnumAssetTypeFilter<"BrandAsset"> | $Enums.AssetType
    name?: StringFilter<"BrandAsset"> | string
    url?: StringFilter<"BrandAsset"> | string
    metadata?: JsonNullableFilter<"BrandAsset">
    createdAt?: DateTimeFilter<"BrandAsset"> | Date | string
    client?: XOR<ClientRelationFilter, ClientWhereInput>
  }

  export type BrandAssetOrderByWithRelationInput = {
    id?: SortOrder
    clientId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    url?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    client?: ClientOrderByWithRelationInput
  }

  export type BrandAssetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BrandAssetWhereInput | BrandAssetWhereInput[]
    OR?: BrandAssetWhereInput[]
    NOT?: BrandAssetWhereInput | BrandAssetWhereInput[]
    clientId?: StringFilter<"BrandAsset"> | string
    type?: EnumAssetTypeFilter<"BrandAsset"> | $Enums.AssetType
    name?: StringFilter<"BrandAsset"> | string
    url?: StringFilter<"BrandAsset"> | string
    metadata?: JsonNullableFilter<"BrandAsset">
    createdAt?: DateTimeFilter<"BrandAsset"> | Date | string
    client?: XOR<ClientRelationFilter, ClientWhereInput>
  }, "id">

  export type BrandAssetOrderByWithAggregationInput = {
    id?: SortOrder
    clientId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    url?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: BrandAssetCountOrderByAggregateInput
    _max?: BrandAssetMaxOrderByAggregateInput
    _min?: BrandAssetMinOrderByAggregateInput
  }

  export type BrandAssetScalarWhereWithAggregatesInput = {
    AND?: BrandAssetScalarWhereWithAggregatesInput | BrandAssetScalarWhereWithAggregatesInput[]
    OR?: BrandAssetScalarWhereWithAggregatesInput[]
    NOT?: BrandAssetScalarWhereWithAggregatesInput | BrandAssetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BrandAsset"> | string
    clientId?: StringWithAggregatesFilter<"BrandAsset"> | string
    type?: EnumAssetTypeWithAggregatesFilter<"BrandAsset"> | $Enums.AssetType
    name?: StringWithAggregatesFilter<"BrandAsset"> | string
    url?: StringWithAggregatesFilter<"BrandAsset"> | string
    metadata?: JsonNullableWithAggregatesFilter<"BrandAsset">
    createdAt?: DateTimeWithAggregatesFilter<"BrandAsset"> | Date | string
  }

  export type CampaignWhereInput = {
    AND?: CampaignWhereInput | CampaignWhereInput[]
    OR?: CampaignWhereInput[]
    NOT?: CampaignWhereInput | CampaignWhereInput[]
    id?: StringFilter<"Campaign"> | string
    clientId?: StringFilter<"Campaign"> | string
    name?: StringFilter<"Campaign"> | string
    objective?: StringFilter<"Campaign"> | string
    startDate?: DateTimeFilter<"Campaign"> | Date | string
    endDate?: DateTimeFilter<"Campaign"> | Date | string
    brandTone?: StringFilter<"Campaign"> | string
    publicationFrequency?: JsonFilter<"Campaign">
    templateIds?: StringNullableListFilter<"Campaign">
    status?: EnumCampaignStatusFilter<"Campaign"> | $Enums.CampaignStatus
    createdAt?: DateTimeFilter<"Campaign"> | Date | string
    updatedAt?: DateTimeFilter<"Campaign"> | Date | string
    client?: XOR<ClientRelationFilter, ClientWhereInput>
    posts?: PostListRelationFilter
  }

  export type CampaignOrderByWithRelationInput = {
    id?: SortOrder
    clientId?: SortOrder
    name?: SortOrder
    objective?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    brandTone?: SortOrder
    publicationFrequency?: SortOrder
    templateIds?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    client?: ClientOrderByWithRelationInput
    posts?: PostOrderByRelationAggregateInput
  }

  export type CampaignWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CampaignWhereInput | CampaignWhereInput[]
    OR?: CampaignWhereInput[]
    NOT?: CampaignWhereInput | CampaignWhereInput[]
    clientId?: StringFilter<"Campaign"> | string
    name?: StringFilter<"Campaign"> | string
    objective?: StringFilter<"Campaign"> | string
    startDate?: DateTimeFilter<"Campaign"> | Date | string
    endDate?: DateTimeFilter<"Campaign"> | Date | string
    brandTone?: StringFilter<"Campaign"> | string
    publicationFrequency?: JsonFilter<"Campaign">
    templateIds?: StringNullableListFilter<"Campaign">
    status?: EnumCampaignStatusFilter<"Campaign"> | $Enums.CampaignStatus
    createdAt?: DateTimeFilter<"Campaign"> | Date | string
    updatedAt?: DateTimeFilter<"Campaign"> | Date | string
    client?: XOR<ClientRelationFilter, ClientWhereInput>
    posts?: PostListRelationFilter
  }, "id">

  export type CampaignOrderByWithAggregationInput = {
    id?: SortOrder
    clientId?: SortOrder
    name?: SortOrder
    objective?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    brandTone?: SortOrder
    publicationFrequency?: SortOrder
    templateIds?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CampaignCountOrderByAggregateInput
    _max?: CampaignMaxOrderByAggregateInput
    _min?: CampaignMinOrderByAggregateInput
  }

  export type CampaignScalarWhereWithAggregatesInput = {
    AND?: CampaignScalarWhereWithAggregatesInput | CampaignScalarWhereWithAggregatesInput[]
    OR?: CampaignScalarWhereWithAggregatesInput[]
    NOT?: CampaignScalarWhereWithAggregatesInput | CampaignScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Campaign"> | string
    clientId?: StringWithAggregatesFilter<"Campaign"> | string
    name?: StringWithAggregatesFilter<"Campaign"> | string
    objective?: StringWithAggregatesFilter<"Campaign"> | string
    startDate?: DateTimeWithAggregatesFilter<"Campaign"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Campaign"> | Date | string
    brandTone?: StringWithAggregatesFilter<"Campaign"> | string
    publicationFrequency?: JsonWithAggregatesFilter<"Campaign">
    templateIds?: StringNullableListFilter<"Campaign">
    status?: EnumCampaignStatusWithAggregatesFilter<"Campaign"> | $Enums.CampaignStatus
    createdAt?: DateTimeWithAggregatesFilter<"Campaign"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Campaign"> | Date | string
  }

  export type PostWhereInput = {
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    id?: StringFilter<"Post"> | string
    campaignId?: StringFilter<"Post"> | string
    scheduledDate?: DateTimeFilter<"Post"> | Date | string
    status?: EnumPostStatusFilter<"Post"> | $Enums.PostStatus
    finalImageUrl?: StringNullableFilter<"Post"> | string | null
    embeddedText?: StringNullableFilter<"Post"> | string | null
    publicationText?: StringNullableFilter<"Post"> | string | null
    hashtags?: StringNullableListFilter<"Post">
    cta?: StringNullableFilter<"Post"> | string | null
    generationJobId?: StringNullableFilter<"Post"> | string | null
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    campaign?: XOR<CampaignRelationFilter, CampaignWhereInput>
    generationJob?: XOR<ContentGenerationJobNullableRelationFilter, ContentGenerationJobWhereInput> | null
    publicationResults?: PublicationResultListRelationFilter
    contentVersions?: ContentVersionListRelationFilter
  }

  export type PostOrderByWithRelationInput = {
    id?: SortOrder
    campaignId?: SortOrder
    scheduledDate?: SortOrder
    status?: SortOrder
    finalImageUrl?: SortOrderInput | SortOrder
    embeddedText?: SortOrderInput | SortOrder
    publicationText?: SortOrderInput | SortOrder
    hashtags?: SortOrder
    cta?: SortOrderInput | SortOrder
    generationJobId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    campaign?: CampaignOrderByWithRelationInput
    generationJob?: ContentGenerationJobOrderByWithRelationInput
    publicationResults?: PublicationResultOrderByRelationAggregateInput
    contentVersions?: ContentVersionOrderByRelationAggregateInput
  }

  export type PostWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    generationJobId?: string
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    campaignId?: StringFilter<"Post"> | string
    scheduledDate?: DateTimeFilter<"Post"> | Date | string
    status?: EnumPostStatusFilter<"Post"> | $Enums.PostStatus
    finalImageUrl?: StringNullableFilter<"Post"> | string | null
    embeddedText?: StringNullableFilter<"Post"> | string | null
    publicationText?: StringNullableFilter<"Post"> | string | null
    hashtags?: StringNullableListFilter<"Post">
    cta?: StringNullableFilter<"Post"> | string | null
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    campaign?: XOR<CampaignRelationFilter, CampaignWhereInput>
    generationJob?: XOR<ContentGenerationJobNullableRelationFilter, ContentGenerationJobWhereInput> | null
    publicationResults?: PublicationResultListRelationFilter
    contentVersions?: ContentVersionListRelationFilter
  }, "id" | "generationJobId">

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder
    campaignId?: SortOrder
    scheduledDate?: SortOrder
    status?: SortOrder
    finalImageUrl?: SortOrderInput | SortOrder
    embeddedText?: SortOrderInput | SortOrder
    publicationText?: SortOrderInput | SortOrder
    hashtags?: SortOrder
    cta?: SortOrderInput | SortOrder
    generationJobId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PostCountOrderByAggregateInput
    _max?: PostMaxOrderByAggregateInput
    _min?: PostMinOrderByAggregateInput
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    OR?: PostScalarWhereWithAggregatesInput[]
    NOT?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Post"> | string
    campaignId?: StringWithAggregatesFilter<"Post"> | string
    scheduledDate?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    status?: EnumPostStatusWithAggregatesFilter<"Post"> | $Enums.PostStatus
    finalImageUrl?: StringNullableWithAggregatesFilter<"Post"> | string | null
    embeddedText?: StringNullableWithAggregatesFilter<"Post"> | string | null
    publicationText?: StringNullableWithAggregatesFilter<"Post"> | string | null
    hashtags?: StringNullableListFilter<"Post">
    cta?: StringNullableWithAggregatesFilter<"Post"> | string | null
    generationJobId?: StringNullableWithAggregatesFilter<"Post"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
  }

  export type ContentGenerationJobWhereInput = {
    AND?: ContentGenerationJobWhereInput | ContentGenerationJobWhereInput[]
    OR?: ContentGenerationJobWhereInput[]
    NOT?: ContentGenerationJobWhereInput | ContentGenerationJobWhereInput[]
    id?: StringFilter<"ContentGenerationJob"> | string
    postId?: StringNullableFilter<"ContentGenerationJob"> | string | null
    status?: EnumJobStatusFilter<"ContentGenerationJob"> | $Enums.JobStatus
    tokensConsumed?: IntFilter<"ContentGenerationJob"> | number
    brandContext?: JsonFilter<"ContentGenerationJob">
    createdAt?: DateTimeFilter<"ContentGenerationJob"> | Date | string
    completedAt?: DateTimeNullableFilter<"ContentGenerationJob"> | Date | string | null
    post?: XOR<PostNullableRelationFilter, PostWhereInput> | null
    steps?: GenerationStepResultListRelationFilter
  }

  export type ContentGenerationJobOrderByWithRelationInput = {
    id?: SortOrder
    postId?: SortOrderInput | SortOrder
    status?: SortOrder
    tokensConsumed?: SortOrder
    brandContext?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    post?: PostOrderByWithRelationInput
    steps?: GenerationStepResultOrderByRelationAggregateInput
  }

  export type ContentGenerationJobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    postId?: string
    AND?: ContentGenerationJobWhereInput | ContentGenerationJobWhereInput[]
    OR?: ContentGenerationJobWhereInput[]
    NOT?: ContentGenerationJobWhereInput | ContentGenerationJobWhereInput[]
    status?: EnumJobStatusFilter<"ContentGenerationJob"> | $Enums.JobStatus
    tokensConsumed?: IntFilter<"ContentGenerationJob"> | number
    brandContext?: JsonFilter<"ContentGenerationJob">
    createdAt?: DateTimeFilter<"ContentGenerationJob"> | Date | string
    completedAt?: DateTimeNullableFilter<"ContentGenerationJob"> | Date | string | null
    post?: XOR<PostNullableRelationFilter, PostWhereInput> | null
    steps?: GenerationStepResultListRelationFilter
  }, "id" | "postId">

  export type ContentGenerationJobOrderByWithAggregationInput = {
    id?: SortOrder
    postId?: SortOrderInput | SortOrder
    status?: SortOrder
    tokensConsumed?: SortOrder
    brandContext?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    _count?: ContentGenerationJobCountOrderByAggregateInput
    _avg?: ContentGenerationJobAvgOrderByAggregateInput
    _max?: ContentGenerationJobMaxOrderByAggregateInput
    _min?: ContentGenerationJobMinOrderByAggregateInput
    _sum?: ContentGenerationJobSumOrderByAggregateInput
  }

  export type ContentGenerationJobScalarWhereWithAggregatesInput = {
    AND?: ContentGenerationJobScalarWhereWithAggregatesInput | ContentGenerationJobScalarWhereWithAggregatesInput[]
    OR?: ContentGenerationJobScalarWhereWithAggregatesInput[]
    NOT?: ContentGenerationJobScalarWhereWithAggregatesInput | ContentGenerationJobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ContentGenerationJob"> | string
    postId?: StringNullableWithAggregatesFilter<"ContentGenerationJob"> | string | null
    status?: EnumJobStatusWithAggregatesFilter<"ContentGenerationJob"> | $Enums.JobStatus
    tokensConsumed?: IntWithAggregatesFilter<"ContentGenerationJob"> | number
    brandContext?: JsonWithAggregatesFilter<"ContentGenerationJob">
    createdAt?: DateTimeWithAggregatesFilter<"ContentGenerationJob"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"ContentGenerationJob"> | Date | string | null
  }

  export type GenerationStepResultWhereInput = {
    AND?: GenerationStepResultWhereInput | GenerationStepResultWhereInput[]
    OR?: GenerationStepResultWhereInput[]
    NOT?: GenerationStepResultWhereInput | GenerationStepResultWhereInput[]
    id?: StringFilter<"GenerationStepResult"> | string
    jobId?: StringFilter<"GenerationStepResult"> | string
    step?: EnumGenerationStepFilter<"GenerationStepResult"> | $Enums.GenerationStep
    status?: EnumStepStatusFilter<"GenerationStepResult"> | $Enums.StepStatus
    input?: JsonNullableFilter<"GenerationStepResult">
    output?: JsonNullableFilter<"GenerationStepResult">
    tokensUsed?: IntFilter<"GenerationStepResult"> | number
    executedAt?: DateTimeFilter<"GenerationStepResult"> | Date | string
    error?: StringNullableFilter<"GenerationStepResult"> | string | null
    job?: XOR<ContentGenerationJobRelationFilter, ContentGenerationJobWhereInput>
  }

  export type GenerationStepResultOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrder
    step?: SortOrder
    status?: SortOrder
    input?: SortOrderInput | SortOrder
    output?: SortOrderInput | SortOrder
    tokensUsed?: SortOrder
    executedAt?: SortOrder
    error?: SortOrderInput | SortOrder
    job?: ContentGenerationJobOrderByWithRelationInput
  }

  export type GenerationStepResultWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GenerationStepResultWhereInput | GenerationStepResultWhereInput[]
    OR?: GenerationStepResultWhereInput[]
    NOT?: GenerationStepResultWhereInput | GenerationStepResultWhereInput[]
    jobId?: StringFilter<"GenerationStepResult"> | string
    step?: EnumGenerationStepFilter<"GenerationStepResult"> | $Enums.GenerationStep
    status?: EnumStepStatusFilter<"GenerationStepResult"> | $Enums.StepStatus
    input?: JsonNullableFilter<"GenerationStepResult">
    output?: JsonNullableFilter<"GenerationStepResult">
    tokensUsed?: IntFilter<"GenerationStepResult"> | number
    executedAt?: DateTimeFilter<"GenerationStepResult"> | Date | string
    error?: StringNullableFilter<"GenerationStepResult"> | string | null
    job?: XOR<ContentGenerationJobRelationFilter, ContentGenerationJobWhereInput>
  }, "id">

  export type GenerationStepResultOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrder
    step?: SortOrder
    status?: SortOrder
    input?: SortOrderInput | SortOrder
    output?: SortOrderInput | SortOrder
    tokensUsed?: SortOrder
    executedAt?: SortOrder
    error?: SortOrderInput | SortOrder
    _count?: GenerationStepResultCountOrderByAggregateInput
    _avg?: GenerationStepResultAvgOrderByAggregateInput
    _max?: GenerationStepResultMaxOrderByAggregateInput
    _min?: GenerationStepResultMinOrderByAggregateInput
    _sum?: GenerationStepResultSumOrderByAggregateInput
  }

  export type GenerationStepResultScalarWhereWithAggregatesInput = {
    AND?: GenerationStepResultScalarWhereWithAggregatesInput | GenerationStepResultScalarWhereWithAggregatesInput[]
    OR?: GenerationStepResultScalarWhereWithAggregatesInput[]
    NOT?: GenerationStepResultScalarWhereWithAggregatesInput | GenerationStepResultScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GenerationStepResult"> | string
    jobId?: StringWithAggregatesFilter<"GenerationStepResult"> | string
    step?: EnumGenerationStepWithAggregatesFilter<"GenerationStepResult"> | $Enums.GenerationStep
    status?: EnumStepStatusWithAggregatesFilter<"GenerationStepResult"> | $Enums.StepStatus
    input?: JsonNullableWithAggregatesFilter<"GenerationStepResult">
    output?: JsonNullableWithAggregatesFilter<"GenerationStepResult">
    tokensUsed?: IntWithAggregatesFilter<"GenerationStepResult"> | number
    executedAt?: DateTimeWithAggregatesFilter<"GenerationStepResult"> | Date | string
    error?: StringNullableWithAggregatesFilter<"GenerationStepResult"> | string | null
  }

  export type ContentVersionWhereInput = {
    AND?: ContentVersionWhereInput | ContentVersionWhereInput[]
    OR?: ContentVersionWhereInput[]
    NOT?: ContentVersionWhereInput | ContentVersionWhereInput[]
    id?: StringFilter<"ContentVersion"> | string
    postId?: StringFilter<"ContentVersion"> | string
    versionNumber?: IntFilter<"ContentVersion"> | number
    finalImageUrl?: StringNullableFilter<"ContentVersion"> | string | null
    embeddedText?: StringNullableFilter<"ContentVersion"> | string | null
    publicationText?: StringNullableFilter<"ContentVersion"> | string | null
    hashtags?: StringNullableListFilter<"ContentVersion">
    cta?: StringNullableFilter<"ContentVersion"> | string | null
    createdAt?: DateTimeFilter<"ContentVersion"> | Date | string
    post?: XOR<PostRelationFilter, PostWhereInput>
  }

  export type ContentVersionOrderByWithRelationInput = {
    id?: SortOrder
    postId?: SortOrder
    versionNumber?: SortOrder
    finalImageUrl?: SortOrderInput | SortOrder
    embeddedText?: SortOrderInput | SortOrder
    publicationText?: SortOrderInput | SortOrder
    hashtags?: SortOrder
    cta?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    post?: PostOrderByWithRelationInput
  }

  export type ContentVersionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    postId_versionNumber?: ContentVersionPostIdVersionNumberCompoundUniqueInput
    AND?: ContentVersionWhereInput | ContentVersionWhereInput[]
    OR?: ContentVersionWhereInput[]
    NOT?: ContentVersionWhereInput | ContentVersionWhereInput[]
    postId?: StringFilter<"ContentVersion"> | string
    versionNumber?: IntFilter<"ContentVersion"> | number
    finalImageUrl?: StringNullableFilter<"ContentVersion"> | string | null
    embeddedText?: StringNullableFilter<"ContentVersion"> | string | null
    publicationText?: StringNullableFilter<"ContentVersion"> | string | null
    hashtags?: StringNullableListFilter<"ContentVersion">
    cta?: StringNullableFilter<"ContentVersion"> | string | null
    createdAt?: DateTimeFilter<"ContentVersion"> | Date | string
    post?: XOR<PostRelationFilter, PostWhereInput>
  }, "id" | "postId_versionNumber">

  export type ContentVersionOrderByWithAggregationInput = {
    id?: SortOrder
    postId?: SortOrder
    versionNumber?: SortOrder
    finalImageUrl?: SortOrderInput | SortOrder
    embeddedText?: SortOrderInput | SortOrder
    publicationText?: SortOrderInput | SortOrder
    hashtags?: SortOrder
    cta?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ContentVersionCountOrderByAggregateInput
    _avg?: ContentVersionAvgOrderByAggregateInput
    _max?: ContentVersionMaxOrderByAggregateInput
    _min?: ContentVersionMinOrderByAggregateInput
    _sum?: ContentVersionSumOrderByAggregateInput
  }

  export type ContentVersionScalarWhereWithAggregatesInput = {
    AND?: ContentVersionScalarWhereWithAggregatesInput | ContentVersionScalarWhereWithAggregatesInput[]
    OR?: ContentVersionScalarWhereWithAggregatesInput[]
    NOT?: ContentVersionScalarWhereWithAggregatesInput | ContentVersionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ContentVersion"> | string
    postId?: StringWithAggregatesFilter<"ContentVersion"> | string
    versionNumber?: IntWithAggregatesFilter<"ContentVersion"> | number
    finalImageUrl?: StringNullableWithAggregatesFilter<"ContentVersion"> | string | null
    embeddedText?: StringNullableWithAggregatesFilter<"ContentVersion"> | string | null
    publicationText?: StringNullableWithAggregatesFilter<"ContentVersion"> | string | null
    hashtags?: StringNullableListFilter<"ContentVersion">
    cta?: StringNullableWithAggregatesFilter<"ContentVersion"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ContentVersion"> | Date | string
  }

  export type SocialAccountWhereInput = {
    AND?: SocialAccountWhereInput | SocialAccountWhereInput[]
    OR?: SocialAccountWhereInput[]
    NOT?: SocialAccountWhereInput | SocialAccountWhereInput[]
    id?: StringFilter<"SocialAccount"> | string
    clientId?: StringFilter<"SocialAccount"> | string
    platform?: EnumSocialPlatformFilter<"SocialAccount"> | $Enums.SocialPlatform
    accountId?: StringFilter<"SocialAccount"> | string
    accountName?: StringNullableFilter<"SocialAccount"> | string | null
    accessToken?: StringFilter<"SocialAccount"> | string
    refreshToken?: StringNullableFilter<"SocialAccount"> | string | null
    expiresAt?: DateTimeNullableFilter<"SocialAccount"> | Date | string | null
    isActive?: BoolFilter<"SocialAccount"> | boolean
    createdAt?: DateTimeFilter<"SocialAccount"> | Date | string
    updatedAt?: DateTimeFilter<"SocialAccount"> | Date | string
    client?: XOR<ClientRelationFilter, ClientWhereInput>
    publications?: PublicationResultListRelationFilter
  }

  export type SocialAccountOrderByWithRelationInput = {
    id?: SortOrder
    clientId?: SortOrder
    platform?: SortOrder
    accountId?: SortOrder
    accountName?: SortOrderInput | SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    client?: ClientOrderByWithRelationInput
    publications?: PublicationResultOrderByRelationAggregateInput
  }

  export type SocialAccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    clientId_platform_accountId?: SocialAccountClientIdPlatformAccountIdCompoundUniqueInput
    AND?: SocialAccountWhereInput | SocialAccountWhereInput[]
    OR?: SocialAccountWhereInput[]
    NOT?: SocialAccountWhereInput | SocialAccountWhereInput[]
    clientId?: StringFilter<"SocialAccount"> | string
    platform?: EnumSocialPlatformFilter<"SocialAccount"> | $Enums.SocialPlatform
    accountId?: StringFilter<"SocialAccount"> | string
    accountName?: StringNullableFilter<"SocialAccount"> | string | null
    accessToken?: StringFilter<"SocialAccount"> | string
    refreshToken?: StringNullableFilter<"SocialAccount"> | string | null
    expiresAt?: DateTimeNullableFilter<"SocialAccount"> | Date | string | null
    isActive?: BoolFilter<"SocialAccount"> | boolean
    createdAt?: DateTimeFilter<"SocialAccount"> | Date | string
    updatedAt?: DateTimeFilter<"SocialAccount"> | Date | string
    client?: XOR<ClientRelationFilter, ClientWhereInput>
    publications?: PublicationResultListRelationFilter
  }, "id" | "clientId_platform_accountId">

  export type SocialAccountOrderByWithAggregationInput = {
    id?: SortOrder
    clientId?: SortOrder
    platform?: SortOrder
    accountId?: SortOrder
    accountName?: SortOrderInput | SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SocialAccountCountOrderByAggregateInput
    _max?: SocialAccountMaxOrderByAggregateInput
    _min?: SocialAccountMinOrderByAggregateInput
  }

  export type SocialAccountScalarWhereWithAggregatesInput = {
    AND?: SocialAccountScalarWhereWithAggregatesInput | SocialAccountScalarWhereWithAggregatesInput[]
    OR?: SocialAccountScalarWhereWithAggregatesInput[]
    NOT?: SocialAccountScalarWhereWithAggregatesInput | SocialAccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SocialAccount"> | string
    clientId?: StringWithAggregatesFilter<"SocialAccount"> | string
    platform?: EnumSocialPlatformWithAggregatesFilter<"SocialAccount"> | $Enums.SocialPlatform
    accountId?: StringWithAggregatesFilter<"SocialAccount"> | string
    accountName?: StringNullableWithAggregatesFilter<"SocialAccount"> | string | null
    accessToken?: StringWithAggregatesFilter<"SocialAccount"> | string
    refreshToken?: StringNullableWithAggregatesFilter<"SocialAccount"> | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"SocialAccount"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"SocialAccount"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"SocialAccount"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SocialAccount"> | Date | string
  }

  export type PublicationResultWhereInput = {
    AND?: PublicationResultWhereInput | PublicationResultWhereInput[]
    OR?: PublicationResultWhereInput[]
    NOT?: PublicationResultWhereInput | PublicationResultWhereInput[]
    id?: StringFilter<"PublicationResult"> | string
    postId?: StringFilter<"PublicationResult"> | string
    socialAccountId?: StringFilter<"PublicationResult"> | string
    platformPostId?: StringNullableFilter<"PublicationResult"> | string | null
    status?: EnumPublicationStatusFilter<"PublicationResult"> | $Enums.PublicationStatus
    publishedAt?: DateTimeNullableFilter<"PublicationResult"> | Date | string | null
    error?: StringNullableFilter<"PublicationResult"> | string | null
    createdAt?: DateTimeFilter<"PublicationResult"> | Date | string
    post?: XOR<PostRelationFilter, PostWhereInput>
    socialAccount?: XOR<SocialAccountRelationFilter, SocialAccountWhereInput>
  }

  export type PublicationResultOrderByWithRelationInput = {
    id?: SortOrder
    postId?: SortOrder
    socialAccountId?: SortOrder
    platformPostId?: SortOrderInput | SortOrder
    status?: SortOrder
    publishedAt?: SortOrderInput | SortOrder
    error?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    post?: PostOrderByWithRelationInput
    socialAccount?: SocialAccountOrderByWithRelationInput
  }

  export type PublicationResultWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PublicationResultWhereInput | PublicationResultWhereInput[]
    OR?: PublicationResultWhereInput[]
    NOT?: PublicationResultWhereInput | PublicationResultWhereInput[]
    postId?: StringFilter<"PublicationResult"> | string
    socialAccountId?: StringFilter<"PublicationResult"> | string
    platformPostId?: StringNullableFilter<"PublicationResult"> | string | null
    status?: EnumPublicationStatusFilter<"PublicationResult"> | $Enums.PublicationStatus
    publishedAt?: DateTimeNullableFilter<"PublicationResult"> | Date | string | null
    error?: StringNullableFilter<"PublicationResult"> | string | null
    createdAt?: DateTimeFilter<"PublicationResult"> | Date | string
    post?: XOR<PostRelationFilter, PostWhereInput>
    socialAccount?: XOR<SocialAccountRelationFilter, SocialAccountWhereInput>
  }, "id">

  export type PublicationResultOrderByWithAggregationInput = {
    id?: SortOrder
    postId?: SortOrder
    socialAccountId?: SortOrder
    platformPostId?: SortOrderInput | SortOrder
    status?: SortOrder
    publishedAt?: SortOrderInput | SortOrder
    error?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: PublicationResultCountOrderByAggregateInput
    _max?: PublicationResultMaxOrderByAggregateInput
    _min?: PublicationResultMinOrderByAggregateInput
  }

  export type PublicationResultScalarWhereWithAggregatesInput = {
    AND?: PublicationResultScalarWhereWithAggregatesInput | PublicationResultScalarWhereWithAggregatesInput[]
    OR?: PublicationResultScalarWhereWithAggregatesInput[]
    NOT?: PublicationResultScalarWhereWithAggregatesInput | PublicationResultScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PublicationResult"> | string
    postId?: StringWithAggregatesFilter<"PublicationResult"> | string
    socialAccountId?: StringWithAggregatesFilter<"PublicationResult"> | string
    platformPostId?: StringNullableWithAggregatesFilter<"PublicationResult"> | string | null
    status?: EnumPublicationStatusWithAggregatesFilter<"PublicationResult"> | $Enums.PublicationStatus
    publishedAt?: DateTimeNullableWithAggregatesFilter<"PublicationResult"> | Date | string | null
    error?: StringNullableWithAggregatesFilter<"PublicationResult"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PublicationResult"> | Date | string
  }

  export type TokenTransactionWhereInput = {
    AND?: TokenTransactionWhereInput | TokenTransactionWhereInput[]
    OR?: TokenTransactionWhereInput[]
    NOT?: TokenTransactionWhereInput | TokenTransactionWhereInput[]
    id?: StringFilter<"TokenTransaction"> | string
    agencyId?: StringFilter<"TokenTransaction"> | string
    userId?: StringNullableFilter<"TokenTransaction"> | string | null
    amount?: IntFilter<"TokenTransaction"> | number
    type?: EnumTokenTransactionTypeFilter<"TokenTransaction"> | $Enums.TokenTransactionType
    description?: StringFilter<"TokenTransaction"> | string
    reference?: StringNullableFilter<"TokenTransaction"> | string | null
    metadata?: JsonNullableFilter<"TokenTransaction">
    createdAt?: DateTimeFilter<"TokenTransaction"> | Date | string
    agency?: XOR<AgencyRelationFilter, AgencyWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type TokenTransactionOrderByWithRelationInput = {
    id?: SortOrder
    agencyId?: SortOrder
    userId?: SortOrderInput | SortOrder
    amount?: SortOrder
    type?: SortOrder
    description?: SortOrder
    reference?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    agency?: AgencyOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type TokenTransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TokenTransactionWhereInput | TokenTransactionWhereInput[]
    OR?: TokenTransactionWhereInput[]
    NOT?: TokenTransactionWhereInput | TokenTransactionWhereInput[]
    agencyId?: StringFilter<"TokenTransaction"> | string
    userId?: StringNullableFilter<"TokenTransaction"> | string | null
    amount?: IntFilter<"TokenTransaction"> | number
    type?: EnumTokenTransactionTypeFilter<"TokenTransaction"> | $Enums.TokenTransactionType
    description?: StringFilter<"TokenTransaction"> | string
    reference?: StringNullableFilter<"TokenTransaction"> | string | null
    metadata?: JsonNullableFilter<"TokenTransaction">
    createdAt?: DateTimeFilter<"TokenTransaction"> | Date | string
    agency?: XOR<AgencyRelationFilter, AgencyWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type TokenTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    agencyId?: SortOrder
    userId?: SortOrderInput | SortOrder
    amount?: SortOrder
    type?: SortOrder
    description?: SortOrder
    reference?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: TokenTransactionCountOrderByAggregateInput
    _avg?: TokenTransactionAvgOrderByAggregateInput
    _max?: TokenTransactionMaxOrderByAggregateInput
    _min?: TokenTransactionMinOrderByAggregateInput
    _sum?: TokenTransactionSumOrderByAggregateInput
  }

  export type TokenTransactionScalarWhereWithAggregatesInput = {
    AND?: TokenTransactionScalarWhereWithAggregatesInput | TokenTransactionScalarWhereWithAggregatesInput[]
    OR?: TokenTransactionScalarWhereWithAggregatesInput[]
    NOT?: TokenTransactionScalarWhereWithAggregatesInput | TokenTransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TokenTransaction"> | string
    agencyId?: StringWithAggregatesFilter<"TokenTransaction"> | string
    userId?: StringNullableWithAggregatesFilter<"TokenTransaction"> | string | null
    amount?: IntWithAggregatesFilter<"TokenTransaction"> | number
    type?: EnumTokenTransactionTypeWithAggregatesFilter<"TokenTransaction"> | $Enums.TokenTransactionType
    description?: StringWithAggregatesFilter<"TokenTransaction"> | string
    reference?: StringNullableWithAggregatesFilter<"TokenTransaction"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"TokenTransaction">
    createdAt?: DateTimeWithAggregatesFilter<"TokenTransaction"> | Date | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    agencyId?: StringFilter<"AuditLog"> | string
    userId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    resource?: StringFilter<"AuditLog"> | string
    resourceId?: StringNullableFilter<"AuditLog"> | string | null
    details?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    agency?: XOR<AgencyRelationFilter, AgencyWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    agencyId?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    agency?: AgencyOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    agencyId?: StringFilter<"AuditLog"> | string
    userId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    resource?: StringFilter<"AuditLog"> | string
    resourceId?: StringNullableFilter<"AuditLog"> | string | null
    details?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    agency?: XOR<AgencyRelationFilter, AgencyWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    agencyId?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    agencyId?: StringWithAggregatesFilter<"AuditLog"> | string
    userId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    resource?: StringWithAggregatesFilter<"AuditLog"> | string
    resourceId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    details?: JsonNullableWithAggregatesFilter<"AuditLog">
    ipAddress?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type ApiKeyWhereInput = {
    AND?: ApiKeyWhereInput | ApiKeyWhereInput[]
    OR?: ApiKeyWhereInput[]
    NOT?: ApiKeyWhereInput | ApiKeyWhereInput[]
    id?: StringFilter<"ApiKey"> | string
    name?: StringFilter<"ApiKey"> | string
    keyPrefix?: StringFilter<"ApiKey"> | string
    hashedKey?: StringFilter<"ApiKey"> | string
    clientId?: StringFilter<"ApiKey"> | string
    permissions?: StringNullableListFilter<"ApiKey">
    isActive?: BoolFilter<"ApiKey"> | boolean
    lastUsedAt?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
    createdAt?: DateTimeFilter<"ApiKey"> | Date | string
    updatedAt?: DateTimeFilter<"ApiKey"> | Date | string
    client?: XOR<ClientRelationFilter, ClientWhereInput>
    usage?: ApiKeyUsageListRelationFilter
  }

  export type ApiKeyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    keyPrefix?: SortOrder
    hashedKey?: SortOrder
    clientId?: SortOrder
    permissions?: SortOrder
    isActive?: SortOrder
    lastUsedAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    client?: ClientOrderByWithRelationInput
    usage?: ApiKeyUsageOrderByRelationAggregateInput
  }

  export type ApiKeyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    hashedKey?: string
    AND?: ApiKeyWhereInput | ApiKeyWhereInput[]
    OR?: ApiKeyWhereInput[]
    NOT?: ApiKeyWhereInput | ApiKeyWhereInput[]
    name?: StringFilter<"ApiKey"> | string
    keyPrefix?: StringFilter<"ApiKey"> | string
    clientId?: StringFilter<"ApiKey"> | string
    permissions?: StringNullableListFilter<"ApiKey">
    isActive?: BoolFilter<"ApiKey"> | boolean
    lastUsedAt?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
    createdAt?: DateTimeFilter<"ApiKey"> | Date | string
    updatedAt?: DateTimeFilter<"ApiKey"> | Date | string
    client?: XOR<ClientRelationFilter, ClientWhereInput>
    usage?: ApiKeyUsageListRelationFilter
  }, "id" | "hashedKey">

  export type ApiKeyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    keyPrefix?: SortOrder
    hashedKey?: SortOrder
    clientId?: SortOrder
    permissions?: SortOrder
    isActive?: SortOrder
    lastUsedAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ApiKeyCountOrderByAggregateInput
    _max?: ApiKeyMaxOrderByAggregateInput
    _min?: ApiKeyMinOrderByAggregateInput
  }

  export type ApiKeyScalarWhereWithAggregatesInput = {
    AND?: ApiKeyScalarWhereWithAggregatesInput | ApiKeyScalarWhereWithAggregatesInput[]
    OR?: ApiKeyScalarWhereWithAggregatesInput[]
    NOT?: ApiKeyScalarWhereWithAggregatesInput | ApiKeyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ApiKey"> | string
    name?: StringWithAggregatesFilter<"ApiKey"> | string
    keyPrefix?: StringWithAggregatesFilter<"ApiKey"> | string
    hashedKey?: StringWithAggregatesFilter<"ApiKey"> | string
    clientId?: StringWithAggregatesFilter<"ApiKey"> | string
    permissions?: StringNullableListFilter<"ApiKey">
    isActive?: BoolWithAggregatesFilter<"ApiKey"> | boolean
    lastUsedAt?: DateTimeNullableWithAggregatesFilter<"ApiKey"> | Date | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"ApiKey"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ApiKey"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ApiKey"> | Date | string
  }

  export type ApiKeyUsageWhereInput = {
    AND?: ApiKeyUsageWhereInput | ApiKeyUsageWhereInput[]
    OR?: ApiKeyUsageWhereInput[]
    NOT?: ApiKeyUsageWhereInput | ApiKeyUsageWhereInput[]
    id?: StringFilter<"ApiKeyUsage"> | string
    apiKeyId?: StringFilter<"ApiKeyUsage"> | string
    endpoint?: StringFilter<"ApiKeyUsage"> | string
    method?: StringFilter<"ApiKeyUsage"> | string
    statusCode?: IntFilter<"ApiKeyUsage"> | number
    tokensConsumed?: IntNullableFilter<"ApiKeyUsage"> | number | null
    ipAddress?: StringNullableFilter<"ApiKeyUsage"> | string | null
    userAgent?: StringNullableFilter<"ApiKeyUsage"> | string | null
    requestBody?: JsonNullableFilter<"ApiKeyUsage">
    responseTime?: IntNullableFilter<"ApiKeyUsage"> | number | null
    createdAt?: DateTimeFilter<"ApiKeyUsage"> | Date | string
    apiKey?: XOR<ApiKeyRelationFilter, ApiKeyWhereInput>
  }

  export type ApiKeyUsageOrderByWithRelationInput = {
    id?: SortOrder
    apiKeyId?: SortOrder
    endpoint?: SortOrder
    method?: SortOrder
    statusCode?: SortOrder
    tokensConsumed?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    requestBody?: SortOrderInput | SortOrder
    responseTime?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    apiKey?: ApiKeyOrderByWithRelationInput
  }

  export type ApiKeyUsageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ApiKeyUsageWhereInput | ApiKeyUsageWhereInput[]
    OR?: ApiKeyUsageWhereInput[]
    NOT?: ApiKeyUsageWhereInput | ApiKeyUsageWhereInput[]
    apiKeyId?: StringFilter<"ApiKeyUsage"> | string
    endpoint?: StringFilter<"ApiKeyUsage"> | string
    method?: StringFilter<"ApiKeyUsage"> | string
    statusCode?: IntFilter<"ApiKeyUsage"> | number
    tokensConsumed?: IntNullableFilter<"ApiKeyUsage"> | number | null
    ipAddress?: StringNullableFilter<"ApiKeyUsage"> | string | null
    userAgent?: StringNullableFilter<"ApiKeyUsage"> | string | null
    requestBody?: JsonNullableFilter<"ApiKeyUsage">
    responseTime?: IntNullableFilter<"ApiKeyUsage"> | number | null
    createdAt?: DateTimeFilter<"ApiKeyUsage"> | Date | string
    apiKey?: XOR<ApiKeyRelationFilter, ApiKeyWhereInput>
  }, "id">

  export type ApiKeyUsageOrderByWithAggregationInput = {
    id?: SortOrder
    apiKeyId?: SortOrder
    endpoint?: SortOrder
    method?: SortOrder
    statusCode?: SortOrder
    tokensConsumed?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    requestBody?: SortOrderInput | SortOrder
    responseTime?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ApiKeyUsageCountOrderByAggregateInput
    _avg?: ApiKeyUsageAvgOrderByAggregateInput
    _max?: ApiKeyUsageMaxOrderByAggregateInput
    _min?: ApiKeyUsageMinOrderByAggregateInput
    _sum?: ApiKeyUsageSumOrderByAggregateInput
  }

  export type ApiKeyUsageScalarWhereWithAggregatesInput = {
    AND?: ApiKeyUsageScalarWhereWithAggregatesInput | ApiKeyUsageScalarWhereWithAggregatesInput[]
    OR?: ApiKeyUsageScalarWhereWithAggregatesInput[]
    NOT?: ApiKeyUsageScalarWhereWithAggregatesInput | ApiKeyUsageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ApiKeyUsage"> | string
    apiKeyId?: StringWithAggregatesFilter<"ApiKeyUsage"> | string
    endpoint?: StringWithAggregatesFilter<"ApiKeyUsage"> | string
    method?: StringWithAggregatesFilter<"ApiKeyUsage"> | string
    statusCode?: IntWithAggregatesFilter<"ApiKeyUsage"> | number
    tokensConsumed?: IntNullableWithAggregatesFilter<"ApiKeyUsage"> | number | null
    ipAddress?: StringNullableWithAggregatesFilter<"ApiKeyUsage"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"ApiKeyUsage"> | string | null
    requestBody?: JsonNullableWithAggregatesFilter<"ApiKeyUsage">
    responseTime?: IntNullableWithAggregatesFilter<"ApiKeyUsage"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"ApiKeyUsage"> | Date | string
  }

  export type SystemLogWhereInput = {
    AND?: SystemLogWhereInput | SystemLogWhereInput[]
    OR?: SystemLogWhereInput[]
    NOT?: SystemLogWhereInput | SystemLogWhereInput[]
    id?: StringFilter<"SystemLog"> | string
    level?: StringFilter<"SystemLog"> | string
    message?: StringFilter<"SystemLog"> | string
    context?: JsonNullableFilter<"SystemLog">
    error?: JsonNullableFilter<"SystemLog">
    timestamp?: DateTimeFilter<"SystemLog"> | Date | string
  }

  export type SystemLogOrderByWithRelationInput = {
    id?: SortOrder
    level?: SortOrder
    message?: SortOrder
    context?: SortOrderInput | SortOrder
    error?: SortOrderInput | SortOrder
    timestamp?: SortOrder
  }

  export type SystemLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SystemLogWhereInput | SystemLogWhereInput[]
    OR?: SystemLogWhereInput[]
    NOT?: SystemLogWhereInput | SystemLogWhereInput[]
    level?: StringFilter<"SystemLog"> | string
    message?: StringFilter<"SystemLog"> | string
    context?: JsonNullableFilter<"SystemLog">
    error?: JsonNullableFilter<"SystemLog">
    timestamp?: DateTimeFilter<"SystemLog"> | Date | string
  }, "id">

  export type SystemLogOrderByWithAggregationInput = {
    id?: SortOrder
    level?: SortOrder
    message?: SortOrder
    context?: SortOrderInput | SortOrder
    error?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: SystemLogCountOrderByAggregateInput
    _max?: SystemLogMaxOrderByAggregateInput
    _min?: SystemLogMinOrderByAggregateInput
  }

  export type SystemLogScalarWhereWithAggregatesInput = {
    AND?: SystemLogScalarWhereWithAggregatesInput | SystemLogScalarWhereWithAggregatesInput[]
    OR?: SystemLogScalarWhereWithAggregatesInput[]
    NOT?: SystemLogScalarWhereWithAggregatesInput | SystemLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SystemLog"> | string
    level?: StringWithAggregatesFilter<"SystemLog"> | string
    message?: StringWithAggregatesFilter<"SystemLog"> | string
    context?: JsonNullableWithAggregatesFilter<"SystemLog">
    error?: JsonNullableWithAggregatesFilter<"SystemLog">
    timestamp?: DateTimeWithAggregatesFilter<"SystemLog"> | Date | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    token?: string
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }, "token" | "identifier_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    identifier?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type AgencyCreateInput = {
    id?: string
    name: string
    subscriptionPlan?: $Enums.SubscriptionPlan
    tokenBalance?: number
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutAgencyInput
    clients?: ClientCreateNestedManyWithoutAgencyInput
    userInvitations?: UserInvitationCreateNestedManyWithoutAgencyInput
    tokenTransactions?: TokenTransactionCreateNestedManyWithoutAgencyInput
    auditLogs?: AuditLogCreateNestedManyWithoutAgencyInput
  }

  export type AgencyUncheckedCreateInput = {
    id?: string
    name: string
    subscriptionPlan?: $Enums.SubscriptionPlan
    tokenBalance?: number
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutAgencyInput
    clients?: ClientUncheckedCreateNestedManyWithoutAgencyInput
    userInvitations?: UserInvitationUncheckedCreateNestedManyWithoutAgencyInput
    tokenTransactions?: TokenTransactionUncheckedCreateNestedManyWithoutAgencyInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutAgencyInput
  }

  export type AgencyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    tokenBalance?: IntFieldUpdateOperationsInput | number
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutAgencyNestedInput
    clients?: ClientUpdateManyWithoutAgencyNestedInput
    userInvitations?: UserInvitationUpdateManyWithoutAgencyNestedInput
    tokenTransactions?: TokenTransactionUpdateManyWithoutAgencyNestedInput
    auditLogs?: AuditLogUpdateManyWithoutAgencyNestedInput
  }

  export type AgencyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    tokenBalance?: IntFieldUpdateOperationsInput | number
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutAgencyNestedInput
    clients?: ClientUncheckedUpdateManyWithoutAgencyNestedInput
    userInvitations?: UserInvitationUncheckedUpdateManyWithoutAgencyNestedInput
    tokenTransactions?: TokenTransactionUncheckedUpdateManyWithoutAgencyNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutAgencyNestedInput
  }

  export type AgencyCreateManyInput = {
    id?: string
    name: string
    subscriptionPlan?: $Enums.SubscriptionPlan
    tokenBalance?: number
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgencyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    tokenBalance?: IntFieldUpdateOperationsInput | number
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgencyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    tokenBalance?: IntFieldUpdateOperationsInput | number
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name: string
    password?: string | null
    role: $Enums.UserRole
    emailVerified?: Date | string | null
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutUsersInput
    assignedClients?: ClientCreateNestedManyWithoutAssignedUsersInput
    invitationsSent?: UserInvitationCreateNestedManyWithoutSenderInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    tokenTransactions?: TokenTransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name: string
    password?: string | null
    role: $Enums.UserRole
    emailVerified?: Date | string | null
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    agencyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedClients?: ClientUncheckedCreateNestedManyWithoutAssignedUsersInput
    invitationsSent?: UserInvitationUncheckedCreateNestedManyWithoutSenderInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    tokenTransactions?: TokenTransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutUsersNestedInput
    assignedClients?: ClientUpdateManyWithoutAssignedUsersNestedInput
    invitationsSent?: UserInvitationUpdateManyWithoutSenderNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    tokenTransactions?: TokenTransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedClients?: ClientUncheckedUpdateManyWithoutAssignedUsersNestedInput
    invitationsSent?: UserInvitationUncheckedUpdateManyWithoutSenderNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    tokenTransactions?: TokenTransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name: string
    password?: string | null
    role: $Enums.UserRole
    emailVerified?: Date | string | null
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    agencyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserInvitationCreateInput = {
    id?: string
    email: string
    role: $Enums.UserRole
    token: string
    expiresAt: Date | string
    usedAt?: Date | string | null
    clientIds?: UserInvitationCreateclientIdsInput | string[]
    createdAt?: Date | string
    sender: UserCreateNestedOneWithoutInvitationsSentInput
    agency: AgencyCreateNestedOneWithoutUserInvitationsInput
  }

  export type UserInvitationUncheckedCreateInput = {
    id?: string
    email: string
    role: $Enums.UserRole
    token: string
    expiresAt: Date | string
    usedAt?: Date | string | null
    senderId: string
    agencyId: string
    clientIds?: UserInvitationCreateclientIdsInput | string[]
    createdAt?: Date | string
  }

  export type UserInvitationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientIds?: UserInvitationUpdateclientIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutInvitationsSentNestedInput
    agency?: AgencyUpdateOneRequiredWithoutUserInvitationsNestedInput
  }

  export type UserInvitationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    senderId?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    clientIds?: UserInvitationUpdateclientIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserInvitationCreateManyInput = {
    id?: string
    email: string
    role: $Enums.UserRole
    token: string
    expiresAt: Date | string
    usedAt?: Date | string | null
    senderId: string
    agencyId: string
    clientIds?: UserInvitationCreateclientIdsInput | string[]
    createdAt?: Date | string
  }

  export type UserInvitationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientIds?: UserInvitationUpdateclientIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserInvitationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    senderId?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    clientIds?: UserInvitationUpdateclientIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientCreateInput = {
    id?: string
    brandName: string
    brandColors?: ClientCreatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    logoUrl?: string | null
    whatsappNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutClientsInput
    assignedUsers?: UserCreateNestedManyWithoutAssignedClientsInput
    campaigns?: CampaignCreateNestedManyWithoutClientInput
    brandAssets?: BrandAssetCreateNestedManyWithoutClientInput
    socialAccounts?: SocialAccountCreateNestedManyWithoutClientInput
    socialMediaLinks?: SocialMediaLinkCreateNestedManyWithoutClientInput
    apiKeys?: ApiKeyCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateInput = {
    id?: string
    agencyId: string
    brandName: string
    brandColors?: ClientCreatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    logoUrl?: string | null
    whatsappNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedUsers?: UserUncheckedCreateNestedManyWithoutAssignedClientsInput
    campaigns?: CampaignUncheckedCreateNestedManyWithoutClientInput
    brandAssets?: BrandAssetUncheckedCreateNestedManyWithoutClientInput
    socialAccounts?: SocialAccountUncheckedCreateNestedManyWithoutClientInput
    socialMediaLinks?: SocialMediaLinkUncheckedCreateNestedManyWithoutClientInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandColors?: ClientUpdatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    whatsappNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutClientsNestedInput
    assignedUsers?: UserUpdateManyWithoutAssignedClientsNestedInput
    campaigns?: CampaignUpdateManyWithoutClientNestedInput
    brandAssets?: BrandAssetUpdateManyWithoutClientNestedInput
    socialAccounts?: SocialAccountUpdateManyWithoutClientNestedInput
    socialMediaLinks?: SocialMediaLinkUpdateManyWithoutClientNestedInput
    apiKeys?: ApiKeyUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandColors?: ClientUpdatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    whatsappNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedUsers?: UserUncheckedUpdateManyWithoutAssignedClientsNestedInput
    campaigns?: CampaignUncheckedUpdateManyWithoutClientNestedInput
    brandAssets?: BrandAssetUncheckedUpdateManyWithoutClientNestedInput
    socialAccounts?: SocialAccountUncheckedUpdateManyWithoutClientNestedInput
    socialMediaLinks?: SocialMediaLinkUncheckedUpdateManyWithoutClientNestedInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientCreateManyInput = {
    id?: string
    agencyId: string
    brandName: string
    brandColors?: ClientCreatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    logoUrl?: string | null
    whatsappNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandColors?: ClientUpdatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    whatsappNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandColors?: ClientUpdatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    whatsappNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SocialMediaLinkCreateInput = {
    id?: string
    platform: string
    url: string
    username?: string | null
    client: ClientCreateNestedOneWithoutSocialMediaLinksInput
  }

  export type SocialMediaLinkUncheckedCreateInput = {
    id?: string
    clientId: string
    platform: string
    url: string
    username?: string | null
  }

  export type SocialMediaLinkUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    client?: ClientUpdateOneRequiredWithoutSocialMediaLinksNestedInput
  }

  export type SocialMediaLinkUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SocialMediaLinkCreateManyInput = {
    id?: string
    clientId: string
    platform: string
    url: string
    username?: string | null
  }

  export type SocialMediaLinkUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SocialMediaLinkUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BrandAssetCreateInput = {
    id?: string
    type: $Enums.AssetType
    name: string
    url: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    client: ClientCreateNestedOneWithoutBrandAssetsInput
  }

  export type BrandAssetUncheckedCreateInput = {
    id?: string
    clientId: string
    type: $Enums.AssetType
    name: string
    url: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type BrandAssetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutBrandAssetsNestedInput
  }

  export type BrandAssetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandAssetCreateManyInput = {
    id?: string
    clientId: string
    type: $Enums.AssetType
    name: string
    url: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type BrandAssetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandAssetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignCreateInput = {
    id?: string
    name: string
    objective: string
    startDate: Date | string
    endDate: Date | string
    brandTone: string
    publicationFrequency: JsonNullValueInput | InputJsonValue
    templateIds?: CampaignCreatetemplateIdsInput | string[]
    status?: $Enums.CampaignStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutCampaignsInput
    posts?: PostCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateInput = {
    id?: string
    clientId: string
    name: string
    objective: string
    startDate: Date | string
    endDate: Date | string
    brandTone: string
    publicationFrequency: JsonNullValueInput | InputJsonValue
    templateIds?: CampaignCreatetemplateIdsInput | string[]
    status?: $Enums.CampaignStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    objective?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    brandTone?: StringFieldUpdateOperationsInput | string
    publicationFrequency?: JsonNullValueInput | InputJsonValue
    templateIds?: CampaignUpdatetemplateIdsInput | string[]
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutCampaignsNestedInput
    posts?: PostUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    objective?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    brandTone?: StringFieldUpdateOperationsInput | string
    publicationFrequency?: JsonNullValueInput | InputJsonValue
    templateIds?: CampaignUpdatetemplateIdsInput | string[]
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignCreateManyInput = {
    id?: string
    clientId: string
    name: string
    objective: string
    startDate: Date | string
    endDate: Date | string
    brandTone: string
    publicationFrequency: JsonNullValueInput | InputJsonValue
    templateIds?: CampaignCreatetemplateIdsInput | string[]
    status?: $Enums.CampaignStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CampaignUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    objective?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    brandTone?: StringFieldUpdateOperationsInput | string
    publicationFrequency?: JsonNullValueInput | InputJsonValue
    templateIds?: CampaignUpdatetemplateIdsInput | string[]
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    objective?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    brandTone?: StringFieldUpdateOperationsInput | string
    publicationFrequency?: JsonNullValueInput | InputJsonValue
    templateIds?: CampaignUpdatetemplateIdsInput | string[]
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostCreateInput = {
    id?: string
    scheduledDate: Date | string
    status?: $Enums.PostStatus
    finalImageUrl?: string | null
    embeddedText?: string | null
    publicationText?: string | null
    hashtags?: PostCreatehashtagsInput | string[]
    cta?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    campaign: CampaignCreateNestedOneWithoutPostsInput
    generationJob?: ContentGenerationJobCreateNestedOneWithoutPostInput
    publicationResults?: PublicationResultCreateNestedManyWithoutPostInput
    contentVersions?: ContentVersionCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateInput = {
    id?: string
    campaignId: string
    scheduledDate: Date | string
    status?: $Enums.PostStatus
    finalImageUrl?: string | null
    embeddedText?: string | null
    publicationText?: string | null
    hashtags?: PostCreatehashtagsInput | string[]
    cta?: string | null
    generationJobId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    publicationResults?: PublicationResultUncheckedCreateNestedManyWithoutPostInput
    contentVersions?: ContentVersionUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    finalImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    embeddedText?: NullableStringFieldUpdateOperationsInput | string | null
    publicationText?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: PostUpdatehashtagsInput | string[]
    cta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUpdateOneRequiredWithoutPostsNestedInput
    generationJob?: ContentGenerationJobUpdateOneWithoutPostNestedInput
    publicationResults?: PublicationResultUpdateManyWithoutPostNestedInput
    contentVersions?: ContentVersionUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    campaignId?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    finalImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    embeddedText?: NullableStringFieldUpdateOperationsInput | string | null
    publicationText?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: PostUpdatehashtagsInput | string[]
    cta?: NullableStringFieldUpdateOperationsInput | string | null
    generationJobId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publicationResults?: PublicationResultUncheckedUpdateManyWithoutPostNestedInput
    contentVersions?: ContentVersionUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostCreateManyInput = {
    id?: string
    campaignId: string
    scheduledDate: Date | string
    status?: $Enums.PostStatus
    finalImageUrl?: string | null
    embeddedText?: string | null
    publicationText?: string | null
    hashtags?: PostCreatehashtagsInput | string[]
    cta?: string | null
    generationJobId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    finalImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    embeddedText?: NullableStringFieldUpdateOperationsInput | string | null
    publicationText?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: PostUpdatehashtagsInput | string[]
    cta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    campaignId?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    finalImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    embeddedText?: NullableStringFieldUpdateOperationsInput | string | null
    publicationText?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: PostUpdatehashtagsInput | string[]
    cta?: NullableStringFieldUpdateOperationsInput | string | null
    generationJobId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContentGenerationJobCreateInput = {
    id?: string
    postId?: string | null
    status?: $Enums.JobStatus
    tokensConsumed?: number
    brandContext: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    completedAt?: Date | string | null
    post?: PostCreateNestedOneWithoutGenerationJobInput
    steps?: GenerationStepResultCreateNestedManyWithoutJobInput
  }

  export type ContentGenerationJobUncheckedCreateInput = {
    id?: string
    postId?: string | null
    status?: $Enums.JobStatus
    tokensConsumed?: number
    brandContext: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    completedAt?: Date | string | null
    post?: PostUncheckedCreateNestedOneWithoutGenerationJobInput
    steps?: GenerationStepResultUncheckedCreateNestedManyWithoutJobInput
  }

  export type ContentGenerationJobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    tokensConsumed?: IntFieldUpdateOperationsInput | number
    brandContext?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    post?: PostUpdateOneWithoutGenerationJobNestedInput
    steps?: GenerationStepResultUpdateManyWithoutJobNestedInput
  }

  export type ContentGenerationJobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    tokensConsumed?: IntFieldUpdateOperationsInput | number
    brandContext?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    post?: PostUncheckedUpdateOneWithoutGenerationJobNestedInput
    steps?: GenerationStepResultUncheckedUpdateManyWithoutJobNestedInput
  }

  export type ContentGenerationJobCreateManyInput = {
    id?: string
    postId?: string | null
    status?: $Enums.JobStatus
    tokensConsumed?: number
    brandContext: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    completedAt?: Date | string | null
  }

  export type ContentGenerationJobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    tokensConsumed?: IntFieldUpdateOperationsInput | number
    brandContext?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ContentGenerationJobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    tokensConsumed?: IntFieldUpdateOperationsInput | number
    brandContext?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GenerationStepResultCreateInput = {
    id?: string
    step: $Enums.GenerationStep
    status?: $Enums.StepStatus
    input?: NullableJsonNullValueInput | InputJsonValue
    output?: NullableJsonNullValueInput | InputJsonValue
    tokensUsed?: number
    executedAt?: Date | string
    error?: string | null
    job: ContentGenerationJobCreateNestedOneWithoutStepsInput
  }

  export type GenerationStepResultUncheckedCreateInput = {
    id?: string
    jobId: string
    step: $Enums.GenerationStep
    status?: $Enums.StepStatus
    input?: NullableJsonNullValueInput | InputJsonValue
    output?: NullableJsonNullValueInput | InputJsonValue
    tokensUsed?: number
    executedAt?: Date | string
    error?: string | null
  }

  export type GenerationStepResultUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    step?: EnumGenerationStepFieldUpdateOperationsInput | $Enums.GenerationStep
    status?: EnumStepStatusFieldUpdateOperationsInput | $Enums.StepStatus
    input?: NullableJsonNullValueInput | InputJsonValue
    output?: NullableJsonNullValueInput | InputJsonValue
    tokensUsed?: IntFieldUpdateOperationsInput | number
    executedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    error?: NullableStringFieldUpdateOperationsInput | string | null
    job?: ContentGenerationJobUpdateOneRequiredWithoutStepsNestedInput
  }

  export type GenerationStepResultUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    step?: EnumGenerationStepFieldUpdateOperationsInput | $Enums.GenerationStep
    status?: EnumStepStatusFieldUpdateOperationsInput | $Enums.StepStatus
    input?: NullableJsonNullValueInput | InputJsonValue
    output?: NullableJsonNullValueInput | InputJsonValue
    tokensUsed?: IntFieldUpdateOperationsInput | number
    executedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    error?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GenerationStepResultCreateManyInput = {
    id?: string
    jobId: string
    step: $Enums.GenerationStep
    status?: $Enums.StepStatus
    input?: NullableJsonNullValueInput | InputJsonValue
    output?: NullableJsonNullValueInput | InputJsonValue
    tokensUsed?: number
    executedAt?: Date | string
    error?: string | null
  }

  export type GenerationStepResultUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    step?: EnumGenerationStepFieldUpdateOperationsInput | $Enums.GenerationStep
    status?: EnumStepStatusFieldUpdateOperationsInput | $Enums.StepStatus
    input?: NullableJsonNullValueInput | InputJsonValue
    output?: NullableJsonNullValueInput | InputJsonValue
    tokensUsed?: IntFieldUpdateOperationsInput | number
    executedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    error?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GenerationStepResultUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    step?: EnumGenerationStepFieldUpdateOperationsInput | $Enums.GenerationStep
    status?: EnumStepStatusFieldUpdateOperationsInput | $Enums.StepStatus
    input?: NullableJsonNullValueInput | InputJsonValue
    output?: NullableJsonNullValueInput | InputJsonValue
    tokensUsed?: IntFieldUpdateOperationsInput | number
    executedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    error?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContentVersionCreateInput = {
    id?: string
    versionNumber: number
    finalImageUrl?: string | null
    embeddedText?: string | null
    publicationText?: string | null
    hashtags?: ContentVersionCreatehashtagsInput | string[]
    cta?: string | null
    createdAt?: Date | string
    post: PostCreateNestedOneWithoutContentVersionsInput
  }

  export type ContentVersionUncheckedCreateInput = {
    id?: string
    postId: string
    versionNumber: number
    finalImageUrl?: string | null
    embeddedText?: string | null
    publicationText?: string | null
    hashtags?: ContentVersionCreatehashtagsInput | string[]
    cta?: string | null
    createdAt?: Date | string
  }

  export type ContentVersionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    versionNumber?: IntFieldUpdateOperationsInput | number
    finalImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    embeddedText?: NullableStringFieldUpdateOperationsInput | string | null
    publicationText?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: ContentVersionUpdatehashtagsInput | string[]
    cta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostUpdateOneRequiredWithoutContentVersionsNestedInput
  }

  export type ContentVersionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    versionNumber?: IntFieldUpdateOperationsInput | number
    finalImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    embeddedText?: NullableStringFieldUpdateOperationsInput | string | null
    publicationText?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: ContentVersionUpdatehashtagsInput | string[]
    cta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContentVersionCreateManyInput = {
    id?: string
    postId: string
    versionNumber: number
    finalImageUrl?: string | null
    embeddedText?: string | null
    publicationText?: string | null
    hashtags?: ContentVersionCreatehashtagsInput | string[]
    cta?: string | null
    createdAt?: Date | string
  }

  export type ContentVersionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    versionNumber?: IntFieldUpdateOperationsInput | number
    finalImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    embeddedText?: NullableStringFieldUpdateOperationsInput | string | null
    publicationText?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: ContentVersionUpdatehashtagsInput | string[]
    cta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContentVersionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    versionNumber?: IntFieldUpdateOperationsInput | number
    finalImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    embeddedText?: NullableStringFieldUpdateOperationsInput | string | null
    publicationText?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: ContentVersionUpdatehashtagsInput | string[]
    cta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SocialAccountCreateInput = {
    id?: string
    platform: $Enums.SocialPlatform
    accountId: string
    accountName?: string | null
    accessToken: string
    refreshToken?: string | null
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutSocialAccountsInput
    publications?: PublicationResultCreateNestedManyWithoutSocialAccountInput
  }

  export type SocialAccountUncheckedCreateInput = {
    id?: string
    clientId: string
    platform: $Enums.SocialPlatform
    accountId: string
    accountName?: string | null
    accessToken: string
    refreshToken?: string | null
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    publications?: PublicationResultUncheckedCreateNestedManyWithoutSocialAccountInput
  }

  export type SocialAccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: EnumSocialPlatformFieldUpdateOperationsInput | $Enums.SocialPlatform
    accountId?: StringFieldUpdateOperationsInput | string
    accountName?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutSocialAccountsNestedInput
    publications?: PublicationResultUpdateManyWithoutSocialAccountNestedInput
  }

  export type SocialAccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    platform?: EnumSocialPlatformFieldUpdateOperationsInput | $Enums.SocialPlatform
    accountId?: StringFieldUpdateOperationsInput | string
    accountName?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publications?: PublicationResultUncheckedUpdateManyWithoutSocialAccountNestedInput
  }

  export type SocialAccountCreateManyInput = {
    id?: string
    clientId: string
    platform: $Enums.SocialPlatform
    accountId: string
    accountName?: string | null
    accessToken: string
    refreshToken?: string | null
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SocialAccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: EnumSocialPlatformFieldUpdateOperationsInput | $Enums.SocialPlatform
    accountId?: StringFieldUpdateOperationsInput | string
    accountName?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SocialAccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    platform?: EnumSocialPlatformFieldUpdateOperationsInput | $Enums.SocialPlatform
    accountId?: StringFieldUpdateOperationsInput | string
    accountName?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublicationResultCreateInput = {
    id?: string
    platformPostId?: string | null
    status?: $Enums.PublicationStatus
    publishedAt?: Date | string | null
    error?: string | null
    createdAt?: Date | string
    post: PostCreateNestedOneWithoutPublicationResultsInput
    socialAccount: SocialAccountCreateNestedOneWithoutPublicationsInput
  }

  export type PublicationResultUncheckedCreateInput = {
    id?: string
    postId: string
    socialAccountId: string
    platformPostId?: string | null
    status?: $Enums.PublicationStatus
    publishedAt?: Date | string | null
    error?: string | null
    createdAt?: Date | string
  }

  export type PublicationResultUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    platformPostId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPublicationStatusFieldUpdateOperationsInput | $Enums.PublicationStatus
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostUpdateOneRequiredWithoutPublicationResultsNestedInput
    socialAccount?: SocialAccountUpdateOneRequiredWithoutPublicationsNestedInput
  }

  export type PublicationResultUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    socialAccountId?: StringFieldUpdateOperationsInput | string
    platformPostId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPublicationStatusFieldUpdateOperationsInput | $Enums.PublicationStatus
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublicationResultCreateManyInput = {
    id?: string
    postId: string
    socialAccountId: string
    platformPostId?: string | null
    status?: $Enums.PublicationStatus
    publishedAt?: Date | string | null
    error?: string | null
    createdAt?: Date | string
  }

  export type PublicationResultUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    platformPostId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPublicationStatusFieldUpdateOperationsInput | $Enums.PublicationStatus
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublicationResultUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    socialAccountId?: StringFieldUpdateOperationsInput | string
    platformPostId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPublicationStatusFieldUpdateOperationsInput | $Enums.PublicationStatus
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenTransactionCreateInput = {
    id?: string
    amount: number
    type?: $Enums.TokenTransactionType
    description: string
    reference?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    agency: AgencyCreateNestedOneWithoutTokenTransactionsInput
    user?: UserCreateNestedOneWithoutTokenTransactionsInput
  }

  export type TokenTransactionUncheckedCreateInput = {
    id?: string
    agencyId: string
    userId?: string | null
    amount: number
    type?: $Enums.TokenTransactionType
    description: string
    reference?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type TokenTransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    type?: EnumTokenTransactionTypeFieldUpdateOperationsInput | $Enums.TokenTransactionType
    description?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutTokenTransactionsNestedInput
    user?: UserUpdateOneWithoutTokenTransactionsNestedInput
  }

  export type TokenTransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    type?: EnumTokenTransactionTypeFieldUpdateOperationsInput | $Enums.TokenTransactionType
    description?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenTransactionCreateManyInput = {
    id?: string
    agencyId: string
    userId?: string | null
    amount: number
    type?: $Enums.TokenTransactionType
    description: string
    reference?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type TokenTransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    type?: EnumTokenTransactionTypeFieldUpdateOperationsInput | $Enums.TokenTransactionType
    description?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenTransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    type?: EnumTokenTransactionTypeFieldUpdateOperationsInput | $Enums.TokenTransactionType
    description?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateInput = {
    id?: string
    action: string
    resource: string
    resourceId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    agency: AgencyCreateNestedOneWithoutAuditLogsInput
    user?: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    agencyId: string
    userId?: string | null
    action: string
    resource: string
    resourceId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutAuditLogsNestedInput
    user?: UserUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    agencyId: string
    userId?: string | null
    action: string
    resource: string
    resourceId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiKeyCreateInput = {
    id?: string
    name: string
    keyPrefix: string
    hashedKey: string
    permissions?: ApiKeyCreatepermissionsInput | string[]
    isActive?: boolean
    lastUsedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutApiKeysInput
    usage?: ApiKeyUsageCreateNestedManyWithoutApiKeyInput
  }

  export type ApiKeyUncheckedCreateInput = {
    id?: string
    name: string
    keyPrefix: string
    hashedKey: string
    clientId: string
    permissions?: ApiKeyCreatepermissionsInput | string[]
    isActive?: boolean
    lastUsedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usage?: ApiKeyUsageUncheckedCreateNestedManyWithoutApiKeyInput
  }

  export type ApiKeyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    keyPrefix?: StringFieldUpdateOperationsInput | string
    hashedKey?: StringFieldUpdateOperationsInput | string
    permissions?: ApiKeyUpdatepermissionsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutApiKeysNestedInput
    usage?: ApiKeyUsageUpdateManyWithoutApiKeyNestedInput
  }

  export type ApiKeyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    keyPrefix?: StringFieldUpdateOperationsInput | string
    hashedKey?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    permissions?: ApiKeyUpdatepermissionsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usage?: ApiKeyUsageUncheckedUpdateManyWithoutApiKeyNestedInput
  }

  export type ApiKeyCreateManyInput = {
    id?: string
    name: string
    keyPrefix: string
    hashedKey: string
    clientId: string
    permissions?: ApiKeyCreatepermissionsInput | string[]
    isActive?: boolean
    lastUsedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApiKeyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    keyPrefix?: StringFieldUpdateOperationsInput | string
    hashedKey?: StringFieldUpdateOperationsInput | string
    permissions?: ApiKeyUpdatepermissionsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiKeyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    keyPrefix?: StringFieldUpdateOperationsInput | string
    hashedKey?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    permissions?: ApiKeyUpdatepermissionsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiKeyUsageCreateInput = {
    id?: string
    endpoint: string
    method: string
    statusCode: number
    tokensConsumed?: number | null
    ipAddress?: string | null
    userAgent?: string | null
    requestBody?: NullableJsonNullValueInput | InputJsonValue
    responseTime?: number | null
    createdAt?: Date | string
    apiKey: ApiKeyCreateNestedOneWithoutUsageInput
  }

  export type ApiKeyUsageUncheckedCreateInput = {
    id?: string
    apiKeyId: string
    endpoint: string
    method: string
    statusCode: number
    tokensConsumed?: number | null
    ipAddress?: string | null
    userAgent?: string | null
    requestBody?: NullableJsonNullValueInput | InputJsonValue
    responseTime?: number | null
    createdAt?: Date | string
  }

  export type ApiKeyUsageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    statusCode?: IntFieldUpdateOperationsInput | number
    tokensConsumed?: NullableIntFieldUpdateOperationsInput | number | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    requestBody?: NullableJsonNullValueInput | InputJsonValue
    responseTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    apiKey?: ApiKeyUpdateOneRequiredWithoutUsageNestedInput
  }

  export type ApiKeyUsageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    apiKeyId?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    statusCode?: IntFieldUpdateOperationsInput | number
    tokensConsumed?: NullableIntFieldUpdateOperationsInput | number | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    requestBody?: NullableJsonNullValueInput | InputJsonValue
    responseTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiKeyUsageCreateManyInput = {
    id?: string
    apiKeyId: string
    endpoint: string
    method: string
    statusCode: number
    tokensConsumed?: number | null
    ipAddress?: string | null
    userAgent?: string | null
    requestBody?: NullableJsonNullValueInput | InputJsonValue
    responseTime?: number | null
    createdAt?: Date | string
  }

  export type ApiKeyUsageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    statusCode?: IntFieldUpdateOperationsInput | number
    tokensConsumed?: NullableIntFieldUpdateOperationsInput | number | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    requestBody?: NullableJsonNullValueInput | InputJsonValue
    responseTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiKeyUsageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    apiKeyId?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    statusCode?: IntFieldUpdateOperationsInput | number
    tokensConsumed?: NullableIntFieldUpdateOperationsInput | number | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    requestBody?: NullableJsonNullValueInput | InputJsonValue
    responseTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemLogCreateInput = {
    id?: string
    level: string
    message: string
    context?: NullableJsonNullValueInput | InputJsonValue
    error?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type SystemLogUncheckedCreateInput = {
    id?: string
    level: string
    message: string
    context?: NullableJsonNullValueInput | InputJsonValue
    error?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type SystemLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    context?: NullableJsonNullValueInput | InputJsonValue
    error?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    context?: NullableJsonNullValueInput | InputJsonValue
    error?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemLogCreateManyInput = {
    id?: string
    level: string
    message: string
    context?: NullableJsonNullValueInput | InputJsonValue
    error?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type SystemLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    context?: NullableJsonNullValueInput | InputJsonValue
    error?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    context?: NullableJsonNullValueInput | InputJsonValue
    error?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumSubscriptionPlanFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionPlan | EnumSubscriptionPlanFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionPlan[] | ListEnumSubscriptionPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionPlan[] | ListEnumSubscriptionPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionPlanFilter<$PrismaModel> | $Enums.SubscriptionPlan
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type ClientListRelationFilter = {
    every?: ClientWhereInput
    some?: ClientWhereInput
    none?: ClientWhereInput
  }

  export type UserInvitationListRelationFilter = {
    every?: UserInvitationWhereInput
    some?: UserInvitationWhereInput
    none?: UserInvitationWhereInput
  }

  export type TokenTransactionListRelationFilter = {
    every?: TokenTransactionWhereInput
    some?: TokenTransactionWhereInput
    none?: TokenTransactionWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserInvitationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TokenTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AgencyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subscriptionPlan?: SortOrder
    tokenBalance?: SortOrder
    stripeCustomerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AgencyAvgOrderByAggregateInput = {
    tokenBalance?: SortOrder
  }

  export type AgencyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subscriptionPlan?: SortOrder
    tokenBalance?: SortOrder
    stripeCustomerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AgencyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subscriptionPlan?: SortOrder
    tokenBalance?: SortOrder
    stripeCustomerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AgencySumOrderByAggregateInput = {
    tokenBalance?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumSubscriptionPlanWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionPlan | EnumSubscriptionPlanFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionPlan[] | ListEnumSubscriptionPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionPlan[] | ListEnumSubscriptionPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionPlanWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionPlan
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionPlanFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionPlanFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AgencyRelationFilter = {
    is?: AgencyWhereInput
    isNot?: AgencyWhereInput
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    emailVerified?: SortOrder
    emailVerificationToken?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetExpires?: SortOrder
    agencyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    emailVerified?: SortOrder
    emailVerificationToken?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetExpires?: SortOrder
    agencyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    emailVerified?: SortOrder
    emailVerificationToken?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetExpires?: SortOrder
    agencyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserInvitationCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    role?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrder
    senderId?: SortOrder
    agencyId?: SortOrder
    clientIds?: SortOrder
    createdAt?: SortOrder
  }

  export type UserInvitationMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    role?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrder
    senderId?: SortOrder
    agencyId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserInvitationMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    role?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrder
    senderId?: SortOrder
    agencyId?: SortOrder
    createdAt?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type CampaignListRelationFilter = {
    every?: CampaignWhereInput
    some?: CampaignWhereInput
    none?: CampaignWhereInput
  }

  export type BrandAssetListRelationFilter = {
    every?: BrandAssetWhereInput
    some?: BrandAssetWhereInput
    none?: BrandAssetWhereInput
  }

  export type SocialAccountListRelationFilter = {
    every?: SocialAccountWhereInput
    some?: SocialAccountWhereInput
    none?: SocialAccountWhereInput
  }

  export type SocialMediaLinkListRelationFilter = {
    every?: SocialMediaLinkWhereInput
    some?: SocialMediaLinkWhereInput
    none?: SocialMediaLinkWhereInput
  }

  export type ApiKeyListRelationFilter = {
    every?: ApiKeyWhereInput
    some?: ApiKeyWhereInput
    none?: ApiKeyWhereInput
  }

  export type CampaignOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BrandAssetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SocialAccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SocialMediaLinkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApiKeyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClientCountOrderByAggregateInput = {
    id?: SortOrder
    agencyId?: SortOrder
    brandName?: SortOrder
    brandColors?: SortOrder
    typography?: SortOrder
    description?: SortOrder
    logoUrl?: SortOrder
    whatsappNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClientMaxOrderByAggregateInput = {
    id?: SortOrder
    agencyId?: SortOrder
    brandName?: SortOrder
    description?: SortOrder
    logoUrl?: SortOrder
    whatsappNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClientMinOrderByAggregateInput = {
    id?: SortOrder
    agencyId?: SortOrder
    brandName?: SortOrder
    description?: SortOrder
    logoUrl?: SortOrder
    whatsappNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type ClientRelationFilter = {
    is?: ClientWhereInput
    isNot?: ClientWhereInput
  }

  export type SocialMediaLinkCountOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    platform?: SortOrder
    url?: SortOrder
    username?: SortOrder
  }

  export type SocialMediaLinkMaxOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    platform?: SortOrder
    url?: SortOrder
    username?: SortOrder
  }

  export type SocialMediaLinkMinOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    platform?: SortOrder
    url?: SortOrder
    username?: SortOrder
  }

  export type EnumAssetTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetType | EnumAssetTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AssetType[] | ListEnumAssetTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssetType[] | ListEnumAssetTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAssetTypeFilter<$PrismaModel> | $Enums.AssetType
  }

  export type BrandAssetCountOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    url?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type BrandAssetMaxOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
  }

  export type BrandAssetMinOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumAssetTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetType | EnumAssetTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AssetType[] | ListEnumAssetTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssetType[] | ListEnumAssetTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAssetTypeWithAggregatesFilter<$PrismaModel> | $Enums.AssetType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssetTypeFilter<$PrismaModel>
    _max?: NestedEnumAssetTypeFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type EnumCampaignStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CampaignStatus | EnumCampaignStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCampaignStatusFilter<$PrismaModel> | $Enums.CampaignStatus
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput
    some?: PostWhereInput
    none?: PostWhereInput
  }

  export type PostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CampaignCountOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    name?: SortOrder
    objective?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    brandTone?: SortOrder
    publicationFrequency?: SortOrder
    templateIds?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CampaignMaxOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    name?: SortOrder
    objective?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    brandTone?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CampaignMinOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    name?: SortOrder
    objective?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    brandTone?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type EnumCampaignStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CampaignStatus | EnumCampaignStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCampaignStatusWithAggregatesFilter<$PrismaModel> | $Enums.CampaignStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCampaignStatusFilter<$PrismaModel>
    _max?: NestedEnumCampaignStatusFilter<$PrismaModel>
  }

  export type EnumPostStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PostStatus | EnumPostStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PostStatus[] | ListEnumPostStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostStatus[] | ListEnumPostStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPostStatusFilter<$PrismaModel> | $Enums.PostStatus
  }

  export type CampaignRelationFilter = {
    is?: CampaignWhereInput
    isNot?: CampaignWhereInput
  }

  export type ContentGenerationJobNullableRelationFilter = {
    is?: ContentGenerationJobWhereInput | null
    isNot?: ContentGenerationJobWhereInput | null
  }

  export type PublicationResultListRelationFilter = {
    every?: PublicationResultWhereInput
    some?: PublicationResultWhereInput
    none?: PublicationResultWhereInput
  }

  export type ContentVersionListRelationFilter = {
    every?: ContentVersionWhereInput
    some?: ContentVersionWhereInput
    none?: ContentVersionWhereInput
  }

  export type PublicationResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContentVersionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    scheduledDate?: SortOrder
    status?: SortOrder
    finalImageUrl?: SortOrder
    embeddedText?: SortOrder
    publicationText?: SortOrder
    hashtags?: SortOrder
    cta?: SortOrder
    generationJobId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    scheduledDate?: SortOrder
    status?: SortOrder
    finalImageUrl?: SortOrder
    embeddedText?: SortOrder
    publicationText?: SortOrder
    cta?: SortOrder
    generationJobId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    scheduledDate?: SortOrder
    status?: SortOrder
    finalImageUrl?: SortOrder
    embeddedText?: SortOrder
    publicationText?: SortOrder
    cta?: SortOrder
    generationJobId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumPostStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PostStatus | EnumPostStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PostStatus[] | ListEnumPostStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostStatus[] | ListEnumPostStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPostStatusWithAggregatesFilter<$PrismaModel> | $Enums.PostStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPostStatusFilter<$PrismaModel>
    _max?: NestedEnumPostStatusFilter<$PrismaModel>
  }

  export type EnumJobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusFilter<$PrismaModel> | $Enums.JobStatus
  }

  export type PostNullableRelationFilter = {
    is?: PostWhereInput | null
    isNot?: PostWhereInput | null
  }

  export type GenerationStepResultListRelationFilter = {
    every?: GenerationStepResultWhereInput
    some?: GenerationStepResultWhereInput
    none?: GenerationStepResultWhereInput
  }

  export type GenerationStepResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContentGenerationJobCountOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    status?: SortOrder
    tokensConsumed?: SortOrder
    brandContext?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
  }

  export type ContentGenerationJobAvgOrderByAggregateInput = {
    tokensConsumed?: SortOrder
  }

  export type ContentGenerationJobMaxOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    status?: SortOrder
    tokensConsumed?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
  }

  export type ContentGenerationJobMinOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    status?: SortOrder
    tokensConsumed?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
  }

  export type ContentGenerationJobSumOrderByAggregateInput = {
    tokensConsumed?: SortOrder
  }

  export type EnumJobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusWithAggregatesFilter<$PrismaModel> | $Enums.JobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobStatusFilter<$PrismaModel>
    _max?: NestedEnumJobStatusFilter<$PrismaModel>
  }

  export type EnumGenerationStepFilter<$PrismaModel = never> = {
    equals?: $Enums.GenerationStep | EnumGenerationStepFieldRefInput<$PrismaModel>
    in?: $Enums.GenerationStep[] | ListEnumGenerationStepFieldRefInput<$PrismaModel>
    notIn?: $Enums.GenerationStep[] | ListEnumGenerationStepFieldRefInput<$PrismaModel>
    not?: NestedEnumGenerationStepFilter<$PrismaModel> | $Enums.GenerationStep
  }

  export type EnumStepStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.StepStatus | EnumStepStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StepStatus[] | ListEnumStepStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.StepStatus[] | ListEnumStepStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStepStatusFilter<$PrismaModel> | $Enums.StepStatus
  }

  export type ContentGenerationJobRelationFilter = {
    is?: ContentGenerationJobWhereInput
    isNot?: ContentGenerationJobWhereInput
  }

  export type GenerationStepResultCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    step?: SortOrder
    status?: SortOrder
    input?: SortOrder
    output?: SortOrder
    tokensUsed?: SortOrder
    executedAt?: SortOrder
    error?: SortOrder
  }

  export type GenerationStepResultAvgOrderByAggregateInput = {
    tokensUsed?: SortOrder
  }

  export type GenerationStepResultMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    step?: SortOrder
    status?: SortOrder
    tokensUsed?: SortOrder
    executedAt?: SortOrder
    error?: SortOrder
  }

  export type GenerationStepResultMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    step?: SortOrder
    status?: SortOrder
    tokensUsed?: SortOrder
    executedAt?: SortOrder
    error?: SortOrder
  }

  export type GenerationStepResultSumOrderByAggregateInput = {
    tokensUsed?: SortOrder
  }

  export type EnumGenerationStepWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GenerationStep | EnumGenerationStepFieldRefInput<$PrismaModel>
    in?: $Enums.GenerationStep[] | ListEnumGenerationStepFieldRefInput<$PrismaModel>
    notIn?: $Enums.GenerationStep[] | ListEnumGenerationStepFieldRefInput<$PrismaModel>
    not?: NestedEnumGenerationStepWithAggregatesFilter<$PrismaModel> | $Enums.GenerationStep
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenerationStepFilter<$PrismaModel>
    _max?: NestedEnumGenerationStepFilter<$PrismaModel>
  }

  export type EnumStepStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StepStatus | EnumStepStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StepStatus[] | ListEnumStepStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.StepStatus[] | ListEnumStepStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStepStatusWithAggregatesFilter<$PrismaModel> | $Enums.StepStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStepStatusFilter<$PrismaModel>
    _max?: NestedEnumStepStatusFilter<$PrismaModel>
  }

  export type PostRelationFilter = {
    is?: PostWhereInput
    isNot?: PostWhereInput
  }

  export type ContentVersionPostIdVersionNumberCompoundUniqueInput = {
    postId: string
    versionNumber: number
  }

  export type ContentVersionCountOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    versionNumber?: SortOrder
    finalImageUrl?: SortOrder
    embeddedText?: SortOrder
    publicationText?: SortOrder
    hashtags?: SortOrder
    cta?: SortOrder
    createdAt?: SortOrder
  }

  export type ContentVersionAvgOrderByAggregateInput = {
    versionNumber?: SortOrder
  }

  export type ContentVersionMaxOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    versionNumber?: SortOrder
    finalImageUrl?: SortOrder
    embeddedText?: SortOrder
    publicationText?: SortOrder
    cta?: SortOrder
    createdAt?: SortOrder
  }

  export type ContentVersionMinOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    versionNumber?: SortOrder
    finalImageUrl?: SortOrder
    embeddedText?: SortOrder
    publicationText?: SortOrder
    cta?: SortOrder
    createdAt?: SortOrder
  }

  export type ContentVersionSumOrderByAggregateInput = {
    versionNumber?: SortOrder
  }

  export type EnumSocialPlatformFilter<$PrismaModel = never> = {
    equals?: $Enums.SocialPlatform | EnumSocialPlatformFieldRefInput<$PrismaModel>
    in?: $Enums.SocialPlatform[] | ListEnumSocialPlatformFieldRefInput<$PrismaModel>
    notIn?: $Enums.SocialPlatform[] | ListEnumSocialPlatformFieldRefInput<$PrismaModel>
    not?: NestedEnumSocialPlatformFilter<$PrismaModel> | $Enums.SocialPlatform
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type SocialAccountClientIdPlatformAccountIdCompoundUniqueInput = {
    clientId: string
    platform: $Enums.SocialPlatform
    accountId: string
  }

  export type SocialAccountCountOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    platform?: SortOrder
    accountId?: SortOrder
    accountName?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SocialAccountMaxOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    platform?: SortOrder
    accountId?: SortOrder
    accountName?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SocialAccountMinOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    platform?: SortOrder
    accountId?: SortOrder
    accountName?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumSocialPlatformWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SocialPlatform | EnumSocialPlatformFieldRefInput<$PrismaModel>
    in?: $Enums.SocialPlatform[] | ListEnumSocialPlatformFieldRefInput<$PrismaModel>
    notIn?: $Enums.SocialPlatform[] | ListEnumSocialPlatformFieldRefInput<$PrismaModel>
    not?: NestedEnumSocialPlatformWithAggregatesFilter<$PrismaModel> | $Enums.SocialPlatform
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSocialPlatformFilter<$PrismaModel>
    _max?: NestedEnumSocialPlatformFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumPublicationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PublicationStatus | EnumPublicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PublicationStatus[] | ListEnumPublicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PublicationStatus[] | ListEnumPublicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPublicationStatusFilter<$PrismaModel> | $Enums.PublicationStatus
  }

  export type SocialAccountRelationFilter = {
    is?: SocialAccountWhereInput
    isNot?: SocialAccountWhereInput
  }

  export type PublicationResultCountOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    socialAccountId?: SortOrder
    platformPostId?: SortOrder
    status?: SortOrder
    publishedAt?: SortOrder
    error?: SortOrder
    createdAt?: SortOrder
  }

  export type PublicationResultMaxOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    socialAccountId?: SortOrder
    platformPostId?: SortOrder
    status?: SortOrder
    publishedAt?: SortOrder
    error?: SortOrder
    createdAt?: SortOrder
  }

  export type PublicationResultMinOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    socialAccountId?: SortOrder
    platformPostId?: SortOrder
    status?: SortOrder
    publishedAt?: SortOrder
    error?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumPublicationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PublicationStatus | EnumPublicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PublicationStatus[] | ListEnumPublicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PublicationStatus[] | ListEnumPublicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPublicationStatusWithAggregatesFilter<$PrismaModel> | $Enums.PublicationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPublicationStatusFilter<$PrismaModel>
    _max?: NestedEnumPublicationStatusFilter<$PrismaModel>
  }

  export type EnumTokenTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenTransactionType | EnumTokenTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenTransactionType[] | ListEnumTokenTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenTransactionType[] | ListEnumTokenTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTransactionTypeFilter<$PrismaModel> | $Enums.TokenTransactionType
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type TokenTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    agencyId?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    description?: SortOrder
    reference?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type TokenTransactionAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type TokenTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    agencyId?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    description?: SortOrder
    reference?: SortOrder
    createdAt?: SortOrder
  }

  export type TokenTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    agencyId?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    description?: SortOrder
    reference?: SortOrder
    createdAt?: SortOrder
  }

  export type TokenTransactionSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumTokenTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenTransactionType | EnumTokenTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenTransactionType[] | ListEnumTokenTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenTransactionType[] | ListEnumTokenTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.TokenTransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTokenTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumTokenTransactionTypeFilter<$PrismaModel>
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    agencyId?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    agencyId?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    agencyId?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type ApiKeyUsageListRelationFilter = {
    every?: ApiKeyUsageWhereInput
    some?: ApiKeyUsageWhereInput
    none?: ApiKeyUsageWhereInput
  }

  export type ApiKeyUsageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApiKeyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    keyPrefix?: SortOrder
    hashedKey?: SortOrder
    clientId?: SortOrder
    permissions?: SortOrder
    isActive?: SortOrder
    lastUsedAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApiKeyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    keyPrefix?: SortOrder
    hashedKey?: SortOrder
    clientId?: SortOrder
    isActive?: SortOrder
    lastUsedAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApiKeyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    keyPrefix?: SortOrder
    hashedKey?: SortOrder
    clientId?: SortOrder
    isActive?: SortOrder
    lastUsedAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ApiKeyRelationFilter = {
    is?: ApiKeyWhereInput
    isNot?: ApiKeyWhereInput
  }

  export type ApiKeyUsageCountOrderByAggregateInput = {
    id?: SortOrder
    apiKeyId?: SortOrder
    endpoint?: SortOrder
    method?: SortOrder
    statusCode?: SortOrder
    tokensConsumed?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    requestBody?: SortOrder
    responseTime?: SortOrder
    createdAt?: SortOrder
  }

  export type ApiKeyUsageAvgOrderByAggregateInput = {
    statusCode?: SortOrder
    tokensConsumed?: SortOrder
    responseTime?: SortOrder
  }

  export type ApiKeyUsageMaxOrderByAggregateInput = {
    id?: SortOrder
    apiKeyId?: SortOrder
    endpoint?: SortOrder
    method?: SortOrder
    statusCode?: SortOrder
    tokensConsumed?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    responseTime?: SortOrder
    createdAt?: SortOrder
  }

  export type ApiKeyUsageMinOrderByAggregateInput = {
    id?: SortOrder
    apiKeyId?: SortOrder
    endpoint?: SortOrder
    method?: SortOrder
    statusCode?: SortOrder
    tokensConsumed?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    responseTime?: SortOrder
    createdAt?: SortOrder
  }

  export type ApiKeyUsageSumOrderByAggregateInput = {
    statusCode?: SortOrder
    tokensConsumed?: SortOrder
    responseTime?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SystemLogCountOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    message?: SortOrder
    context?: SortOrder
    error?: SortOrder
    timestamp?: SortOrder
  }

  export type SystemLogMaxOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    message?: SortOrder
    timestamp?: SortOrder
  }

  export type SystemLogMinOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    message?: SortOrder
    timestamp?: SortOrder
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type UserCreateNestedManyWithoutAgencyInput = {
    create?: XOR<UserCreateWithoutAgencyInput, UserUncheckedCreateWithoutAgencyInput> | UserCreateWithoutAgencyInput[] | UserUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAgencyInput | UserCreateOrConnectWithoutAgencyInput[]
    createMany?: UserCreateManyAgencyInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ClientCreateNestedManyWithoutAgencyInput = {
    create?: XOR<ClientCreateWithoutAgencyInput, ClientUncheckedCreateWithoutAgencyInput> | ClientCreateWithoutAgencyInput[] | ClientUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutAgencyInput | ClientCreateOrConnectWithoutAgencyInput[]
    createMany?: ClientCreateManyAgencyInputEnvelope
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
  }

  export type UserInvitationCreateNestedManyWithoutAgencyInput = {
    create?: XOR<UserInvitationCreateWithoutAgencyInput, UserInvitationUncheckedCreateWithoutAgencyInput> | UserInvitationCreateWithoutAgencyInput[] | UserInvitationUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: UserInvitationCreateOrConnectWithoutAgencyInput | UserInvitationCreateOrConnectWithoutAgencyInput[]
    createMany?: UserInvitationCreateManyAgencyInputEnvelope
    connect?: UserInvitationWhereUniqueInput | UserInvitationWhereUniqueInput[]
  }

  export type TokenTransactionCreateNestedManyWithoutAgencyInput = {
    create?: XOR<TokenTransactionCreateWithoutAgencyInput, TokenTransactionUncheckedCreateWithoutAgencyInput> | TokenTransactionCreateWithoutAgencyInput[] | TokenTransactionUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: TokenTransactionCreateOrConnectWithoutAgencyInput | TokenTransactionCreateOrConnectWithoutAgencyInput[]
    createMany?: TokenTransactionCreateManyAgencyInputEnvelope
    connect?: TokenTransactionWhereUniqueInput | TokenTransactionWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutAgencyInput = {
    create?: XOR<AuditLogCreateWithoutAgencyInput, AuditLogUncheckedCreateWithoutAgencyInput> | AuditLogCreateWithoutAgencyInput[] | AuditLogUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutAgencyInput | AuditLogCreateOrConnectWithoutAgencyInput[]
    createMany?: AuditLogCreateManyAgencyInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutAgencyInput = {
    create?: XOR<UserCreateWithoutAgencyInput, UserUncheckedCreateWithoutAgencyInput> | UserCreateWithoutAgencyInput[] | UserUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAgencyInput | UserCreateOrConnectWithoutAgencyInput[]
    createMany?: UserCreateManyAgencyInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ClientUncheckedCreateNestedManyWithoutAgencyInput = {
    create?: XOR<ClientCreateWithoutAgencyInput, ClientUncheckedCreateWithoutAgencyInput> | ClientCreateWithoutAgencyInput[] | ClientUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutAgencyInput | ClientCreateOrConnectWithoutAgencyInput[]
    createMany?: ClientCreateManyAgencyInputEnvelope
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
  }

  export type UserInvitationUncheckedCreateNestedManyWithoutAgencyInput = {
    create?: XOR<UserInvitationCreateWithoutAgencyInput, UserInvitationUncheckedCreateWithoutAgencyInput> | UserInvitationCreateWithoutAgencyInput[] | UserInvitationUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: UserInvitationCreateOrConnectWithoutAgencyInput | UserInvitationCreateOrConnectWithoutAgencyInput[]
    createMany?: UserInvitationCreateManyAgencyInputEnvelope
    connect?: UserInvitationWhereUniqueInput | UserInvitationWhereUniqueInput[]
  }

  export type TokenTransactionUncheckedCreateNestedManyWithoutAgencyInput = {
    create?: XOR<TokenTransactionCreateWithoutAgencyInput, TokenTransactionUncheckedCreateWithoutAgencyInput> | TokenTransactionCreateWithoutAgencyInput[] | TokenTransactionUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: TokenTransactionCreateOrConnectWithoutAgencyInput | TokenTransactionCreateOrConnectWithoutAgencyInput[]
    createMany?: TokenTransactionCreateManyAgencyInputEnvelope
    connect?: TokenTransactionWhereUniqueInput | TokenTransactionWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutAgencyInput = {
    create?: XOR<AuditLogCreateWithoutAgencyInput, AuditLogUncheckedCreateWithoutAgencyInput> | AuditLogCreateWithoutAgencyInput[] | AuditLogUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutAgencyInput | AuditLogCreateOrConnectWithoutAgencyInput[]
    createMany?: AuditLogCreateManyAgencyInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumSubscriptionPlanFieldUpdateOperationsInput = {
    set?: $Enums.SubscriptionPlan
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<UserCreateWithoutAgencyInput, UserUncheckedCreateWithoutAgencyInput> | UserCreateWithoutAgencyInput[] | UserUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAgencyInput | UserCreateOrConnectWithoutAgencyInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAgencyInput | UserUpsertWithWhereUniqueWithoutAgencyInput[]
    createMany?: UserCreateManyAgencyInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAgencyInput | UserUpdateWithWhereUniqueWithoutAgencyInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAgencyInput | UserUpdateManyWithWhereWithoutAgencyInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ClientUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<ClientCreateWithoutAgencyInput, ClientUncheckedCreateWithoutAgencyInput> | ClientCreateWithoutAgencyInput[] | ClientUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutAgencyInput | ClientCreateOrConnectWithoutAgencyInput[]
    upsert?: ClientUpsertWithWhereUniqueWithoutAgencyInput | ClientUpsertWithWhereUniqueWithoutAgencyInput[]
    createMany?: ClientCreateManyAgencyInputEnvelope
    set?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    disconnect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    delete?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    update?: ClientUpdateWithWhereUniqueWithoutAgencyInput | ClientUpdateWithWhereUniqueWithoutAgencyInput[]
    updateMany?: ClientUpdateManyWithWhereWithoutAgencyInput | ClientUpdateManyWithWhereWithoutAgencyInput[]
    deleteMany?: ClientScalarWhereInput | ClientScalarWhereInput[]
  }

  export type UserInvitationUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<UserInvitationCreateWithoutAgencyInput, UserInvitationUncheckedCreateWithoutAgencyInput> | UserInvitationCreateWithoutAgencyInput[] | UserInvitationUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: UserInvitationCreateOrConnectWithoutAgencyInput | UserInvitationCreateOrConnectWithoutAgencyInput[]
    upsert?: UserInvitationUpsertWithWhereUniqueWithoutAgencyInput | UserInvitationUpsertWithWhereUniqueWithoutAgencyInput[]
    createMany?: UserInvitationCreateManyAgencyInputEnvelope
    set?: UserInvitationWhereUniqueInput | UserInvitationWhereUniqueInput[]
    disconnect?: UserInvitationWhereUniqueInput | UserInvitationWhereUniqueInput[]
    delete?: UserInvitationWhereUniqueInput | UserInvitationWhereUniqueInput[]
    connect?: UserInvitationWhereUniqueInput | UserInvitationWhereUniqueInput[]
    update?: UserInvitationUpdateWithWhereUniqueWithoutAgencyInput | UserInvitationUpdateWithWhereUniqueWithoutAgencyInput[]
    updateMany?: UserInvitationUpdateManyWithWhereWithoutAgencyInput | UserInvitationUpdateManyWithWhereWithoutAgencyInput[]
    deleteMany?: UserInvitationScalarWhereInput | UserInvitationScalarWhereInput[]
  }

  export type TokenTransactionUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<TokenTransactionCreateWithoutAgencyInput, TokenTransactionUncheckedCreateWithoutAgencyInput> | TokenTransactionCreateWithoutAgencyInput[] | TokenTransactionUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: TokenTransactionCreateOrConnectWithoutAgencyInput | TokenTransactionCreateOrConnectWithoutAgencyInput[]
    upsert?: TokenTransactionUpsertWithWhereUniqueWithoutAgencyInput | TokenTransactionUpsertWithWhereUniqueWithoutAgencyInput[]
    createMany?: TokenTransactionCreateManyAgencyInputEnvelope
    set?: TokenTransactionWhereUniqueInput | TokenTransactionWhereUniqueInput[]
    disconnect?: TokenTransactionWhereUniqueInput | TokenTransactionWhereUniqueInput[]
    delete?: TokenTransactionWhereUniqueInput | TokenTransactionWhereUniqueInput[]
    connect?: TokenTransactionWhereUniqueInput | TokenTransactionWhereUniqueInput[]
    update?: TokenTransactionUpdateWithWhereUniqueWithoutAgencyInput | TokenTransactionUpdateWithWhereUniqueWithoutAgencyInput[]
    updateMany?: TokenTransactionUpdateManyWithWhereWithoutAgencyInput | TokenTransactionUpdateManyWithWhereWithoutAgencyInput[]
    deleteMany?: TokenTransactionScalarWhereInput | TokenTransactionScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<AuditLogCreateWithoutAgencyInput, AuditLogUncheckedCreateWithoutAgencyInput> | AuditLogCreateWithoutAgencyInput[] | AuditLogUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutAgencyInput | AuditLogCreateOrConnectWithoutAgencyInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutAgencyInput | AuditLogUpsertWithWhereUniqueWithoutAgencyInput[]
    createMany?: AuditLogCreateManyAgencyInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutAgencyInput | AuditLogUpdateWithWhereUniqueWithoutAgencyInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutAgencyInput | AuditLogUpdateManyWithWhereWithoutAgencyInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<UserCreateWithoutAgencyInput, UserUncheckedCreateWithoutAgencyInput> | UserCreateWithoutAgencyInput[] | UserUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAgencyInput | UserCreateOrConnectWithoutAgencyInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAgencyInput | UserUpsertWithWhereUniqueWithoutAgencyInput[]
    createMany?: UserCreateManyAgencyInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAgencyInput | UserUpdateWithWhereUniqueWithoutAgencyInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAgencyInput | UserUpdateManyWithWhereWithoutAgencyInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ClientUncheckedUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<ClientCreateWithoutAgencyInput, ClientUncheckedCreateWithoutAgencyInput> | ClientCreateWithoutAgencyInput[] | ClientUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutAgencyInput | ClientCreateOrConnectWithoutAgencyInput[]
    upsert?: ClientUpsertWithWhereUniqueWithoutAgencyInput | ClientUpsertWithWhereUniqueWithoutAgencyInput[]
    createMany?: ClientCreateManyAgencyInputEnvelope
    set?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    disconnect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    delete?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    update?: ClientUpdateWithWhereUniqueWithoutAgencyInput | ClientUpdateWithWhereUniqueWithoutAgencyInput[]
    updateMany?: ClientUpdateManyWithWhereWithoutAgencyInput | ClientUpdateManyWithWhereWithoutAgencyInput[]
    deleteMany?: ClientScalarWhereInput | ClientScalarWhereInput[]
  }

  export type UserInvitationUncheckedUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<UserInvitationCreateWithoutAgencyInput, UserInvitationUncheckedCreateWithoutAgencyInput> | UserInvitationCreateWithoutAgencyInput[] | UserInvitationUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: UserInvitationCreateOrConnectWithoutAgencyInput | UserInvitationCreateOrConnectWithoutAgencyInput[]
    upsert?: UserInvitationUpsertWithWhereUniqueWithoutAgencyInput | UserInvitationUpsertWithWhereUniqueWithoutAgencyInput[]
    createMany?: UserInvitationCreateManyAgencyInputEnvelope
    set?: UserInvitationWhereUniqueInput | UserInvitationWhereUniqueInput[]
    disconnect?: UserInvitationWhereUniqueInput | UserInvitationWhereUniqueInput[]
    delete?: UserInvitationWhereUniqueInput | UserInvitationWhereUniqueInput[]
    connect?: UserInvitationWhereUniqueInput | UserInvitationWhereUniqueInput[]
    update?: UserInvitationUpdateWithWhereUniqueWithoutAgencyInput | UserInvitationUpdateWithWhereUniqueWithoutAgencyInput[]
    updateMany?: UserInvitationUpdateManyWithWhereWithoutAgencyInput | UserInvitationUpdateManyWithWhereWithoutAgencyInput[]
    deleteMany?: UserInvitationScalarWhereInput | UserInvitationScalarWhereInput[]
  }

  export type TokenTransactionUncheckedUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<TokenTransactionCreateWithoutAgencyInput, TokenTransactionUncheckedCreateWithoutAgencyInput> | TokenTransactionCreateWithoutAgencyInput[] | TokenTransactionUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: TokenTransactionCreateOrConnectWithoutAgencyInput | TokenTransactionCreateOrConnectWithoutAgencyInput[]
    upsert?: TokenTransactionUpsertWithWhereUniqueWithoutAgencyInput | TokenTransactionUpsertWithWhereUniqueWithoutAgencyInput[]
    createMany?: TokenTransactionCreateManyAgencyInputEnvelope
    set?: TokenTransactionWhereUniqueInput | TokenTransactionWhereUniqueInput[]
    disconnect?: TokenTransactionWhereUniqueInput | TokenTransactionWhereUniqueInput[]
    delete?: TokenTransactionWhereUniqueInput | TokenTransactionWhereUniqueInput[]
    connect?: TokenTransactionWhereUniqueInput | TokenTransactionWhereUniqueInput[]
    update?: TokenTransactionUpdateWithWhereUniqueWithoutAgencyInput | TokenTransactionUpdateWithWhereUniqueWithoutAgencyInput[]
    updateMany?: TokenTransactionUpdateManyWithWhereWithoutAgencyInput | TokenTransactionUpdateManyWithWhereWithoutAgencyInput[]
    deleteMany?: TokenTransactionScalarWhereInput | TokenTransactionScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutAgencyNestedInput = {
    create?: XOR<AuditLogCreateWithoutAgencyInput, AuditLogUncheckedCreateWithoutAgencyInput> | AuditLogCreateWithoutAgencyInput[] | AuditLogUncheckedCreateWithoutAgencyInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutAgencyInput | AuditLogCreateOrConnectWithoutAgencyInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutAgencyInput | AuditLogUpsertWithWhereUniqueWithoutAgencyInput[]
    createMany?: AuditLogCreateManyAgencyInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutAgencyInput | AuditLogUpdateWithWhereUniqueWithoutAgencyInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutAgencyInput | AuditLogUpdateManyWithWhereWithoutAgencyInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type AgencyCreateNestedOneWithoutUsersInput = {
    create?: XOR<AgencyCreateWithoutUsersInput, AgencyUncheckedCreateWithoutUsersInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutUsersInput
    connect?: AgencyWhereUniqueInput
  }

  export type ClientCreateNestedManyWithoutAssignedUsersInput = {
    create?: XOR<ClientCreateWithoutAssignedUsersInput, ClientUncheckedCreateWithoutAssignedUsersInput> | ClientCreateWithoutAssignedUsersInput[] | ClientUncheckedCreateWithoutAssignedUsersInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutAssignedUsersInput | ClientCreateOrConnectWithoutAssignedUsersInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
  }

  export type UserInvitationCreateNestedManyWithoutSenderInput = {
    create?: XOR<UserInvitationCreateWithoutSenderInput, UserInvitationUncheckedCreateWithoutSenderInput> | UserInvitationCreateWithoutSenderInput[] | UserInvitationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: UserInvitationCreateOrConnectWithoutSenderInput | UserInvitationCreateOrConnectWithoutSenderInput[]
    createMany?: UserInvitationCreateManySenderInputEnvelope
    connect?: UserInvitationWhereUniqueInput | UserInvitationWhereUniqueInput[]
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type TokenTransactionCreateNestedManyWithoutUserInput = {
    create?: XOR<TokenTransactionCreateWithoutUserInput, TokenTransactionUncheckedCreateWithoutUserInput> | TokenTransactionCreateWithoutUserInput[] | TokenTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokenTransactionCreateOrConnectWithoutUserInput | TokenTransactionCreateOrConnectWithoutUserInput[]
    createMany?: TokenTransactionCreateManyUserInputEnvelope
    connect?: TokenTransactionWhereUniqueInput | TokenTransactionWhereUniqueInput[]
  }

  export type ClientUncheckedCreateNestedManyWithoutAssignedUsersInput = {
    create?: XOR<ClientCreateWithoutAssignedUsersInput, ClientUncheckedCreateWithoutAssignedUsersInput> | ClientCreateWithoutAssignedUsersInput[] | ClientUncheckedCreateWithoutAssignedUsersInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutAssignedUsersInput | ClientCreateOrConnectWithoutAssignedUsersInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
  }

  export type UserInvitationUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<UserInvitationCreateWithoutSenderInput, UserInvitationUncheckedCreateWithoutSenderInput> | UserInvitationCreateWithoutSenderInput[] | UserInvitationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: UserInvitationCreateOrConnectWithoutSenderInput | UserInvitationCreateOrConnectWithoutSenderInput[]
    createMany?: UserInvitationCreateManySenderInputEnvelope
    connect?: UserInvitationWhereUniqueInput | UserInvitationWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type TokenTransactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TokenTransactionCreateWithoutUserInput, TokenTransactionUncheckedCreateWithoutUserInput> | TokenTransactionCreateWithoutUserInput[] | TokenTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokenTransactionCreateOrConnectWithoutUserInput | TokenTransactionCreateOrConnectWithoutUserInput[]
    createMany?: TokenTransactionCreateManyUserInputEnvelope
    connect?: TokenTransactionWhereUniqueInput | TokenTransactionWhereUniqueInput[]
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type AgencyUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<AgencyCreateWithoutUsersInput, AgencyUncheckedCreateWithoutUsersInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutUsersInput
    upsert?: AgencyUpsertWithoutUsersInput
    connect?: AgencyWhereUniqueInput
    update?: XOR<XOR<AgencyUpdateToOneWithWhereWithoutUsersInput, AgencyUpdateWithoutUsersInput>, AgencyUncheckedUpdateWithoutUsersInput>
  }

  export type ClientUpdateManyWithoutAssignedUsersNestedInput = {
    create?: XOR<ClientCreateWithoutAssignedUsersInput, ClientUncheckedCreateWithoutAssignedUsersInput> | ClientCreateWithoutAssignedUsersInput[] | ClientUncheckedCreateWithoutAssignedUsersInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutAssignedUsersInput | ClientCreateOrConnectWithoutAssignedUsersInput[]
    upsert?: ClientUpsertWithWhereUniqueWithoutAssignedUsersInput | ClientUpsertWithWhereUniqueWithoutAssignedUsersInput[]
    set?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    disconnect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    delete?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    update?: ClientUpdateWithWhereUniqueWithoutAssignedUsersInput | ClientUpdateWithWhereUniqueWithoutAssignedUsersInput[]
    updateMany?: ClientUpdateManyWithWhereWithoutAssignedUsersInput | ClientUpdateManyWithWhereWithoutAssignedUsersInput[]
    deleteMany?: ClientScalarWhereInput | ClientScalarWhereInput[]
  }

  export type UserInvitationUpdateManyWithoutSenderNestedInput = {
    create?: XOR<UserInvitationCreateWithoutSenderInput, UserInvitationUncheckedCreateWithoutSenderInput> | UserInvitationCreateWithoutSenderInput[] | UserInvitationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: UserInvitationCreateOrConnectWithoutSenderInput | UserInvitationCreateOrConnectWithoutSenderInput[]
    upsert?: UserInvitationUpsertWithWhereUniqueWithoutSenderInput | UserInvitationUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: UserInvitationCreateManySenderInputEnvelope
    set?: UserInvitationWhereUniqueInput | UserInvitationWhereUniqueInput[]
    disconnect?: UserInvitationWhereUniqueInput | UserInvitationWhereUniqueInput[]
    delete?: UserInvitationWhereUniqueInput | UserInvitationWhereUniqueInput[]
    connect?: UserInvitationWhereUniqueInput | UserInvitationWhereUniqueInput[]
    update?: UserInvitationUpdateWithWhereUniqueWithoutSenderInput | UserInvitationUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: UserInvitationUpdateManyWithWhereWithoutSenderInput | UserInvitationUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: UserInvitationScalarWhereInput | UserInvitationScalarWhereInput[]
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type TokenTransactionUpdateManyWithoutUserNestedInput = {
    create?: XOR<TokenTransactionCreateWithoutUserInput, TokenTransactionUncheckedCreateWithoutUserInput> | TokenTransactionCreateWithoutUserInput[] | TokenTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokenTransactionCreateOrConnectWithoutUserInput | TokenTransactionCreateOrConnectWithoutUserInput[]
    upsert?: TokenTransactionUpsertWithWhereUniqueWithoutUserInput | TokenTransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TokenTransactionCreateManyUserInputEnvelope
    set?: TokenTransactionWhereUniqueInput | TokenTransactionWhereUniqueInput[]
    disconnect?: TokenTransactionWhereUniqueInput | TokenTransactionWhereUniqueInput[]
    delete?: TokenTransactionWhereUniqueInput | TokenTransactionWhereUniqueInput[]
    connect?: TokenTransactionWhereUniqueInput | TokenTransactionWhereUniqueInput[]
    update?: TokenTransactionUpdateWithWhereUniqueWithoutUserInput | TokenTransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TokenTransactionUpdateManyWithWhereWithoutUserInput | TokenTransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TokenTransactionScalarWhereInput | TokenTransactionScalarWhereInput[]
  }

  export type ClientUncheckedUpdateManyWithoutAssignedUsersNestedInput = {
    create?: XOR<ClientCreateWithoutAssignedUsersInput, ClientUncheckedCreateWithoutAssignedUsersInput> | ClientCreateWithoutAssignedUsersInput[] | ClientUncheckedCreateWithoutAssignedUsersInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutAssignedUsersInput | ClientCreateOrConnectWithoutAssignedUsersInput[]
    upsert?: ClientUpsertWithWhereUniqueWithoutAssignedUsersInput | ClientUpsertWithWhereUniqueWithoutAssignedUsersInput[]
    set?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    disconnect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    delete?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    update?: ClientUpdateWithWhereUniqueWithoutAssignedUsersInput | ClientUpdateWithWhereUniqueWithoutAssignedUsersInput[]
    updateMany?: ClientUpdateManyWithWhereWithoutAssignedUsersInput | ClientUpdateManyWithWhereWithoutAssignedUsersInput[]
    deleteMany?: ClientScalarWhereInput | ClientScalarWhereInput[]
  }

  export type UserInvitationUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<UserInvitationCreateWithoutSenderInput, UserInvitationUncheckedCreateWithoutSenderInput> | UserInvitationCreateWithoutSenderInput[] | UserInvitationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: UserInvitationCreateOrConnectWithoutSenderInput | UserInvitationCreateOrConnectWithoutSenderInput[]
    upsert?: UserInvitationUpsertWithWhereUniqueWithoutSenderInput | UserInvitationUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: UserInvitationCreateManySenderInputEnvelope
    set?: UserInvitationWhereUniqueInput | UserInvitationWhereUniqueInput[]
    disconnect?: UserInvitationWhereUniqueInput | UserInvitationWhereUniqueInput[]
    delete?: UserInvitationWhereUniqueInput | UserInvitationWhereUniqueInput[]
    connect?: UserInvitationWhereUniqueInput | UserInvitationWhereUniqueInput[]
    update?: UserInvitationUpdateWithWhereUniqueWithoutSenderInput | UserInvitationUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: UserInvitationUpdateManyWithWhereWithoutSenderInput | UserInvitationUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: UserInvitationScalarWhereInput | UserInvitationScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type TokenTransactionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TokenTransactionCreateWithoutUserInput, TokenTransactionUncheckedCreateWithoutUserInput> | TokenTransactionCreateWithoutUserInput[] | TokenTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokenTransactionCreateOrConnectWithoutUserInput | TokenTransactionCreateOrConnectWithoutUserInput[]
    upsert?: TokenTransactionUpsertWithWhereUniqueWithoutUserInput | TokenTransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TokenTransactionCreateManyUserInputEnvelope
    set?: TokenTransactionWhereUniqueInput | TokenTransactionWhereUniqueInput[]
    disconnect?: TokenTransactionWhereUniqueInput | TokenTransactionWhereUniqueInput[]
    delete?: TokenTransactionWhereUniqueInput | TokenTransactionWhereUniqueInput[]
    connect?: TokenTransactionWhereUniqueInput | TokenTransactionWhereUniqueInput[]
    update?: TokenTransactionUpdateWithWhereUniqueWithoutUserInput | TokenTransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TokenTransactionUpdateManyWithWhereWithoutUserInput | TokenTransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TokenTransactionScalarWhereInput | TokenTransactionScalarWhereInput[]
  }

  export type UserInvitationCreateclientIdsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutInvitationsSentInput = {
    create?: XOR<UserCreateWithoutInvitationsSentInput, UserUncheckedCreateWithoutInvitationsSentInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvitationsSentInput
    connect?: UserWhereUniqueInput
  }

  export type AgencyCreateNestedOneWithoutUserInvitationsInput = {
    create?: XOR<AgencyCreateWithoutUserInvitationsInput, AgencyUncheckedCreateWithoutUserInvitationsInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutUserInvitationsInput
    connect?: AgencyWhereUniqueInput
  }

  export type UserInvitationUpdateclientIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutInvitationsSentNestedInput = {
    create?: XOR<UserCreateWithoutInvitationsSentInput, UserUncheckedCreateWithoutInvitationsSentInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvitationsSentInput
    upsert?: UserUpsertWithoutInvitationsSentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInvitationsSentInput, UserUpdateWithoutInvitationsSentInput>, UserUncheckedUpdateWithoutInvitationsSentInput>
  }

  export type AgencyUpdateOneRequiredWithoutUserInvitationsNestedInput = {
    create?: XOR<AgencyCreateWithoutUserInvitationsInput, AgencyUncheckedCreateWithoutUserInvitationsInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutUserInvitationsInput
    upsert?: AgencyUpsertWithoutUserInvitationsInput
    connect?: AgencyWhereUniqueInput
    update?: XOR<XOR<AgencyUpdateToOneWithWhereWithoutUserInvitationsInput, AgencyUpdateWithoutUserInvitationsInput>, AgencyUncheckedUpdateWithoutUserInvitationsInput>
  }

  export type ClientCreatebrandColorsInput = {
    set: string[]
  }

  export type AgencyCreateNestedOneWithoutClientsInput = {
    create?: XOR<AgencyCreateWithoutClientsInput, AgencyUncheckedCreateWithoutClientsInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutClientsInput
    connect?: AgencyWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutAssignedClientsInput = {
    create?: XOR<UserCreateWithoutAssignedClientsInput, UserUncheckedCreateWithoutAssignedClientsInput> | UserCreateWithoutAssignedClientsInput[] | UserUncheckedCreateWithoutAssignedClientsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAssignedClientsInput | UserCreateOrConnectWithoutAssignedClientsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CampaignCreateNestedManyWithoutClientInput = {
    create?: XOR<CampaignCreateWithoutClientInput, CampaignUncheckedCreateWithoutClientInput> | CampaignCreateWithoutClientInput[] | CampaignUncheckedCreateWithoutClientInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutClientInput | CampaignCreateOrConnectWithoutClientInput[]
    createMany?: CampaignCreateManyClientInputEnvelope
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
  }

  export type BrandAssetCreateNestedManyWithoutClientInput = {
    create?: XOR<BrandAssetCreateWithoutClientInput, BrandAssetUncheckedCreateWithoutClientInput> | BrandAssetCreateWithoutClientInput[] | BrandAssetUncheckedCreateWithoutClientInput[]
    connectOrCreate?: BrandAssetCreateOrConnectWithoutClientInput | BrandAssetCreateOrConnectWithoutClientInput[]
    createMany?: BrandAssetCreateManyClientInputEnvelope
    connect?: BrandAssetWhereUniqueInput | BrandAssetWhereUniqueInput[]
  }

  export type SocialAccountCreateNestedManyWithoutClientInput = {
    create?: XOR<SocialAccountCreateWithoutClientInput, SocialAccountUncheckedCreateWithoutClientInput> | SocialAccountCreateWithoutClientInput[] | SocialAccountUncheckedCreateWithoutClientInput[]
    connectOrCreate?: SocialAccountCreateOrConnectWithoutClientInput | SocialAccountCreateOrConnectWithoutClientInput[]
    createMany?: SocialAccountCreateManyClientInputEnvelope
    connect?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
  }

  export type SocialMediaLinkCreateNestedManyWithoutClientInput = {
    create?: XOR<SocialMediaLinkCreateWithoutClientInput, SocialMediaLinkUncheckedCreateWithoutClientInput> | SocialMediaLinkCreateWithoutClientInput[] | SocialMediaLinkUncheckedCreateWithoutClientInput[]
    connectOrCreate?: SocialMediaLinkCreateOrConnectWithoutClientInput | SocialMediaLinkCreateOrConnectWithoutClientInput[]
    createMany?: SocialMediaLinkCreateManyClientInputEnvelope
    connect?: SocialMediaLinkWhereUniqueInput | SocialMediaLinkWhereUniqueInput[]
  }

  export type ApiKeyCreateNestedManyWithoutClientInput = {
    create?: XOR<ApiKeyCreateWithoutClientInput, ApiKeyUncheckedCreateWithoutClientInput> | ApiKeyCreateWithoutClientInput[] | ApiKeyUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ApiKeyCreateOrConnectWithoutClientInput | ApiKeyCreateOrConnectWithoutClientInput[]
    createMany?: ApiKeyCreateManyClientInputEnvelope
    connect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutAssignedClientsInput = {
    create?: XOR<UserCreateWithoutAssignedClientsInput, UserUncheckedCreateWithoutAssignedClientsInput> | UserCreateWithoutAssignedClientsInput[] | UserUncheckedCreateWithoutAssignedClientsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAssignedClientsInput | UserCreateOrConnectWithoutAssignedClientsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CampaignUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<CampaignCreateWithoutClientInput, CampaignUncheckedCreateWithoutClientInput> | CampaignCreateWithoutClientInput[] | CampaignUncheckedCreateWithoutClientInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutClientInput | CampaignCreateOrConnectWithoutClientInput[]
    createMany?: CampaignCreateManyClientInputEnvelope
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
  }

  export type BrandAssetUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<BrandAssetCreateWithoutClientInput, BrandAssetUncheckedCreateWithoutClientInput> | BrandAssetCreateWithoutClientInput[] | BrandAssetUncheckedCreateWithoutClientInput[]
    connectOrCreate?: BrandAssetCreateOrConnectWithoutClientInput | BrandAssetCreateOrConnectWithoutClientInput[]
    createMany?: BrandAssetCreateManyClientInputEnvelope
    connect?: BrandAssetWhereUniqueInput | BrandAssetWhereUniqueInput[]
  }

  export type SocialAccountUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<SocialAccountCreateWithoutClientInput, SocialAccountUncheckedCreateWithoutClientInput> | SocialAccountCreateWithoutClientInput[] | SocialAccountUncheckedCreateWithoutClientInput[]
    connectOrCreate?: SocialAccountCreateOrConnectWithoutClientInput | SocialAccountCreateOrConnectWithoutClientInput[]
    createMany?: SocialAccountCreateManyClientInputEnvelope
    connect?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
  }

  export type SocialMediaLinkUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<SocialMediaLinkCreateWithoutClientInput, SocialMediaLinkUncheckedCreateWithoutClientInput> | SocialMediaLinkCreateWithoutClientInput[] | SocialMediaLinkUncheckedCreateWithoutClientInput[]
    connectOrCreate?: SocialMediaLinkCreateOrConnectWithoutClientInput | SocialMediaLinkCreateOrConnectWithoutClientInput[]
    createMany?: SocialMediaLinkCreateManyClientInputEnvelope
    connect?: SocialMediaLinkWhereUniqueInput | SocialMediaLinkWhereUniqueInput[]
  }

  export type ApiKeyUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<ApiKeyCreateWithoutClientInput, ApiKeyUncheckedCreateWithoutClientInput> | ApiKeyCreateWithoutClientInput[] | ApiKeyUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ApiKeyCreateOrConnectWithoutClientInput | ApiKeyCreateOrConnectWithoutClientInput[]
    createMany?: ApiKeyCreateManyClientInputEnvelope
    connect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
  }

  export type ClientUpdatebrandColorsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type AgencyUpdateOneRequiredWithoutClientsNestedInput = {
    create?: XOR<AgencyCreateWithoutClientsInput, AgencyUncheckedCreateWithoutClientsInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutClientsInput
    upsert?: AgencyUpsertWithoutClientsInput
    connect?: AgencyWhereUniqueInput
    update?: XOR<XOR<AgencyUpdateToOneWithWhereWithoutClientsInput, AgencyUpdateWithoutClientsInput>, AgencyUncheckedUpdateWithoutClientsInput>
  }

  export type UserUpdateManyWithoutAssignedClientsNestedInput = {
    create?: XOR<UserCreateWithoutAssignedClientsInput, UserUncheckedCreateWithoutAssignedClientsInput> | UserCreateWithoutAssignedClientsInput[] | UserUncheckedCreateWithoutAssignedClientsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAssignedClientsInput | UserCreateOrConnectWithoutAssignedClientsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAssignedClientsInput | UserUpsertWithWhereUniqueWithoutAssignedClientsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAssignedClientsInput | UserUpdateWithWhereUniqueWithoutAssignedClientsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAssignedClientsInput | UserUpdateManyWithWhereWithoutAssignedClientsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CampaignUpdateManyWithoutClientNestedInput = {
    create?: XOR<CampaignCreateWithoutClientInput, CampaignUncheckedCreateWithoutClientInput> | CampaignCreateWithoutClientInput[] | CampaignUncheckedCreateWithoutClientInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutClientInput | CampaignCreateOrConnectWithoutClientInput[]
    upsert?: CampaignUpsertWithWhereUniqueWithoutClientInput | CampaignUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: CampaignCreateManyClientInputEnvelope
    set?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    disconnect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    delete?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    update?: CampaignUpdateWithWhereUniqueWithoutClientInput | CampaignUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: CampaignUpdateManyWithWhereWithoutClientInput | CampaignUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
  }

  export type BrandAssetUpdateManyWithoutClientNestedInput = {
    create?: XOR<BrandAssetCreateWithoutClientInput, BrandAssetUncheckedCreateWithoutClientInput> | BrandAssetCreateWithoutClientInput[] | BrandAssetUncheckedCreateWithoutClientInput[]
    connectOrCreate?: BrandAssetCreateOrConnectWithoutClientInput | BrandAssetCreateOrConnectWithoutClientInput[]
    upsert?: BrandAssetUpsertWithWhereUniqueWithoutClientInput | BrandAssetUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: BrandAssetCreateManyClientInputEnvelope
    set?: BrandAssetWhereUniqueInput | BrandAssetWhereUniqueInput[]
    disconnect?: BrandAssetWhereUniqueInput | BrandAssetWhereUniqueInput[]
    delete?: BrandAssetWhereUniqueInput | BrandAssetWhereUniqueInput[]
    connect?: BrandAssetWhereUniqueInput | BrandAssetWhereUniqueInput[]
    update?: BrandAssetUpdateWithWhereUniqueWithoutClientInput | BrandAssetUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: BrandAssetUpdateManyWithWhereWithoutClientInput | BrandAssetUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: BrandAssetScalarWhereInput | BrandAssetScalarWhereInput[]
  }

  export type SocialAccountUpdateManyWithoutClientNestedInput = {
    create?: XOR<SocialAccountCreateWithoutClientInput, SocialAccountUncheckedCreateWithoutClientInput> | SocialAccountCreateWithoutClientInput[] | SocialAccountUncheckedCreateWithoutClientInput[]
    connectOrCreate?: SocialAccountCreateOrConnectWithoutClientInput | SocialAccountCreateOrConnectWithoutClientInput[]
    upsert?: SocialAccountUpsertWithWhereUniqueWithoutClientInput | SocialAccountUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: SocialAccountCreateManyClientInputEnvelope
    set?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
    disconnect?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
    delete?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
    connect?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
    update?: SocialAccountUpdateWithWhereUniqueWithoutClientInput | SocialAccountUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: SocialAccountUpdateManyWithWhereWithoutClientInput | SocialAccountUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: SocialAccountScalarWhereInput | SocialAccountScalarWhereInput[]
  }

  export type SocialMediaLinkUpdateManyWithoutClientNestedInput = {
    create?: XOR<SocialMediaLinkCreateWithoutClientInput, SocialMediaLinkUncheckedCreateWithoutClientInput> | SocialMediaLinkCreateWithoutClientInput[] | SocialMediaLinkUncheckedCreateWithoutClientInput[]
    connectOrCreate?: SocialMediaLinkCreateOrConnectWithoutClientInput | SocialMediaLinkCreateOrConnectWithoutClientInput[]
    upsert?: SocialMediaLinkUpsertWithWhereUniqueWithoutClientInput | SocialMediaLinkUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: SocialMediaLinkCreateManyClientInputEnvelope
    set?: SocialMediaLinkWhereUniqueInput | SocialMediaLinkWhereUniqueInput[]
    disconnect?: SocialMediaLinkWhereUniqueInput | SocialMediaLinkWhereUniqueInput[]
    delete?: SocialMediaLinkWhereUniqueInput | SocialMediaLinkWhereUniqueInput[]
    connect?: SocialMediaLinkWhereUniqueInput | SocialMediaLinkWhereUniqueInput[]
    update?: SocialMediaLinkUpdateWithWhereUniqueWithoutClientInput | SocialMediaLinkUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: SocialMediaLinkUpdateManyWithWhereWithoutClientInput | SocialMediaLinkUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: SocialMediaLinkScalarWhereInput | SocialMediaLinkScalarWhereInput[]
  }

  export type ApiKeyUpdateManyWithoutClientNestedInput = {
    create?: XOR<ApiKeyCreateWithoutClientInput, ApiKeyUncheckedCreateWithoutClientInput> | ApiKeyCreateWithoutClientInput[] | ApiKeyUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ApiKeyCreateOrConnectWithoutClientInput | ApiKeyCreateOrConnectWithoutClientInput[]
    upsert?: ApiKeyUpsertWithWhereUniqueWithoutClientInput | ApiKeyUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: ApiKeyCreateManyClientInputEnvelope
    set?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    disconnect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    delete?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    connect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    update?: ApiKeyUpdateWithWhereUniqueWithoutClientInput | ApiKeyUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: ApiKeyUpdateManyWithWhereWithoutClientInput | ApiKeyUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: ApiKeyScalarWhereInput | ApiKeyScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutAssignedClientsNestedInput = {
    create?: XOR<UserCreateWithoutAssignedClientsInput, UserUncheckedCreateWithoutAssignedClientsInput> | UserCreateWithoutAssignedClientsInput[] | UserUncheckedCreateWithoutAssignedClientsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAssignedClientsInput | UserCreateOrConnectWithoutAssignedClientsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAssignedClientsInput | UserUpsertWithWhereUniqueWithoutAssignedClientsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAssignedClientsInput | UserUpdateWithWhereUniqueWithoutAssignedClientsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAssignedClientsInput | UserUpdateManyWithWhereWithoutAssignedClientsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CampaignUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<CampaignCreateWithoutClientInput, CampaignUncheckedCreateWithoutClientInput> | CampaignCreateWithoutClientInput[] | CampaignUncheckedCreateWithoutClientInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutClientInput | CampaignCreateOrConnectWithoutClientInput[]
    upsert?: CampaignUpsertWithWhereUniqueWithoutClientInput | CampaignUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: CampaignCreateManyClientInputEnvelope
    set?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    disconnect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    delete?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    update?: CampaignUpdateWithWhereUniqueWithoutClientInput | CampaignUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: CampaignUpdateManyWithWhereWithoutClientInput | CampaignUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
  }

  export type BrandAssetUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<BrandAssetCreateWithoutClientInput, BrandAssetUncheckedCreateWithoutClientInput> | BrandAssetCreateWithoutClientInput[] | BrandAssetUncheckedCreateWithoutClientInput[]
    connectOrCreate?: BrandAssetCreateOrConnectWithoutClientInput | BrandAssetCreateOrConnectWithoutClientInput[]
    upsert?: BrandAssetUpsertWithWhereUniqueWithoutClientInput | BrandAssetUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: BrandAssetCreateManyClientInputEnvelope
    set?: BrandAssetWhereUniqueInput | BrandAssetWhereUniqueInput[]
    disconnect?: BrandAssetWhereUniqueInput | BrandAssetWhereUniqueInput[]
    delete?: BrandAssetWhereUniqueInput | BrandAssetWhereUniqueInput[]
    connect?: BrandAssetWhereUniqueInput | BrandAssetWhereUniqueInput[]
    update?: BrandAssetUpdateWithWhereUniqueWithoutClientInput | BrandAssetUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: BrandAssetUpdateManyWithWhereWithoutClientInput | BrandAssetUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: BrandAssetScalarWhereInput | BrandAssetScalarWhereInput[]
  }

  export type SocialAccountUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<SocialAccountCreateWithoutClientInput, SocialAccountUncheckedCreateWithoutClientInput> | SocialAccountCreateWithoutClientInput[] | SocialAccountUncheckedCreateWithoutClientInput[]
    connectOrCreate?: SocialAccountCreateOrConnectWithoutClientInput | SocialAccountCreateOrConnectWithoutClientInput[]
    upsert?: SocialAccountUpsertWithWhereUniqueWithoutClientInput | SocialAccountUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: SocialAccountCreateManyClientInputEnvelope
    set?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
    disconnect?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
    delete?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
    connect?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
    update?: SocialAccountUpdateWithWhereUniqueWithoutClientInput | SocialAccountUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: SocialAccountUpdateManyWithWhereWithoutClientInput | SocialAccountUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: SocialAccountScalarWhereInput | SocialAccountScalarWhereInput[]
  }

  export type SocialMediaLinkUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<SocialMediaLinkCreateWithoutClientInput, SocialMediaLinkUncheckedCreateWithoutClientInput> | SocialMediaLinkCreateWithoutClientInput[] | SocialMediaLinkUncheckedCreateWithoutClientInput[]
    connectOrCreate?: SocialMediaLinkCreateOrConnectWithoutClientInput | SocialMediaLinkCreateOrConnectWithoutClientInput[]
    upsert?: SocialMediaLinkUpsertWithWhereUniqueWithoutClientInput | SocialMediaLinkUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: SocialMediaLinkCreateManyClientInputEnvelope
    set?: SocialMediaLinkWhereUniqueInput | SocialMediaLinkWhereUniqueInput[]
    disconnect?: SocialMediaLinkWhereUniqueInput | SocialMediaLinkWhereUniqueInput[]
    delete?: SocialMediaLinkWhereUniqueInput | SocialMediaLinkWhereUniqueInput[]
    connect?: SocialMediaLinkWhereUniqueInput | SocialMediaLinkWhereUniqueInput[]
    update?: SocialMediaLinkUpdateWithWhereUniqueWithoutClientInput | SocialMediaLinkUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: SocialMediaLinkUpdateManyWithWhereWithoutClientInput | SocialMediaLinkUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: SocialMediaLinkScalarWhereInput | SocialMediaLinkScalarWhereInput[]
  }

  export type ApiKeyUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<ApiKeyCreateWithoutClientInput, ApiKeyUncheckedCreateWithoutClientInput> | ApiKeyCreateWithoutClientInput[] | ApiKeyUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ApiKeyCreateOrConnectWithoutClientInput | ApiKeyCreateOrConnectWithoutClientInput[]
    upsert?: ApiKeyUpsertWithWhereUniqueWithoutClientInput | ApiKeyUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: ApiKeyCreateManyClientInputEnvelope
    set?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    disconnect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    delete?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    connect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    update?: ApiKeyUpdateWithWhereUniqueWithoutClientInput | ApiKeyUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: ApiKeyUpdateManyWithWhereWithoutClientInput | ApiKeyUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: ApiKeyScalarWhereInput | ApiKeyScalarWhereInput[]
  }

  export type ClientCreateNestedOneWithoutSocialMediaLinksInput = {
    create?: XOR<ClientCreateWithoutSocialMediaLinksInput, ClientUncheckedCreateWithoutSocialMediaLinksInput>
    connectOrCreate?: ClientCreateOrConnectWithoutSocialMediaLinksInput
    connect?: ClientWhereUniqueInput
  }

  export type ClientUpdateOneRequiredWithoutSocialMediaLinksNestedInput = {
    create?: XOR<ClientCreateWithoutSocialMediaLinksInput, ClientUncheckedCreateWithoutSocialMediaLinksInput>
    connectOrCreate?: ClientCreateOrConnectWithoutSocialMediaLinksInput
    upsert?: ClientUpsertWithoutSocialMediaLinksInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutSocialMediaLinksInput, ClientUpdateWithoutSocialMediaLinksInput>, ClientUncheckedUpdateWithoutSocialMediaLinksInput>
  }

  export type ClientCreateNestedOneWithoutBrandAssetsInput = {
    create?: XOR<ClientCreateWithoutBrandAssetsInput, ClientUncheckedCreateWithoutBrandAssetsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutBrandAssetsInput
    connect?: ClientWhereUniqueInput
  }

  export type EnumAssetTypeFieldUpdateOperationsInput = {
    set?: $Enums.AssetType
  }

  export type ClientUpdateOneRequiredWithoutBrandAssetsNestedInput = {
    create?: XOR<ClientCreateWithoutBrandAssetsInput, ClientUncheckedCreateWithoutBrandAssetsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutBrandAssetsInput
    upsert?: ClientUpsertWithoutBrandAssetsInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutBrandAssetsInput, ClientUpdateWithoutBrandAssetsInput>, ClientUncheckedUpdateWithoutBrandAssetsInput>
  }

  export type CampaignCreatetemplateIdsInput = {
    set: string[]
  }

  export type ClientCreateNestedOneWithoutCampaignsInput = {
    create?: XOR<ClientCreateWithoutCampaignsInput, ClientUncheckedCreateWithoutCampaignsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutCampaignsInput
    connect?: ClientWhereUniqueInput
  }

  export type PostCreateNestedManyWithoutCampaignInput = {
    create?: XOR<PostCreateWithoutCampaignInput, PostUncheckedCreateWithoutCampaignInput> | PostCreateWithoutCampaignInput[] | PostUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: PostCreateOrConnectWithoutCampaignInput | PostCreateOrConnectWithoutCampaignInput[]
    createMany?: PostCreateManyCampaignInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedManyWithoutCampaignInput = {
    create?: XOR<PostCreateWithoutCampaignInput, PostUncheckedCreateWithoutCampaignInput> | PostCreateWithoutCampaignInput[] | PostUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: PostCreateOrConnectWithoutCampaignInput | PostCreateOrConnectWithoutCampaignInput[]
    createMany?: PostCreateManyCampaignInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type CampaignUpdatetemplateIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumCampaignStatusFieldUpdateOperationsInput = {
    set?: $Enums.CampaignStatus
  }

  export type ClientUpdateOneRequiredWithoutCampaignsNestedInput = {
    create?: XOR<ClientCreateWithoutCampaignsInput, ClientUncheckedCreateWithoutCampaignsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutCampaignsInput
    upsert?: ClientUpsertWithoutCampaignsInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutCampaignsInput, ClientUpdateWithoutCampaignsInput>, ClientUncheckedUpdateWithoutCampaignsInput>
  }

  export type PostUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<PostCreateWithoutCampaignInput, PostUncheckedCreateWithoutCampaignInput> | PostCreateWithoutCampaignInput[] | PostUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: PostCreateOrConnectWithoutCampaignInput | PostCreateOrConnectWithoutCampaignInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutCampaignInput | PostUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: PostCreateManyCampaignInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutCampaignInput | PostUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: PostUpdateManyWithWhereWithoutCampaignInput | PostUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type PostUncheckedUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<PostCreateWithoutCampaignInput, PostUncheckedCreateWithoutCampaignInput> | PostCreateWithoutCampaignInput[] | PostUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: PostCreateOrConnectWithoutCampaignInput | PostCreateOrConnectWithoutCampaignInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutCampaignInput | PostUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: PostCreateManyCampaignInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutCampaignInput | PostUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: PostUpdateManyWithWhereWithoutCampaignInput | PostUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type PostCreatehashtagsInput = {
    set: string[]
  }

  export type CampaignCreateNestedOneWithoutPostsInput = {
    create?: XOR<CampaignCreateWithoutPostsInput, CampaignUncheckedCreateWithoutPostsInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutPostsInput
    connect?: CampaignWhereUniqueInput
  }

  export type ContentGenerationJobCreateNestedOneWithoutPostInput = {
    create?: XOR<ContentGenerationJobCreateWithoutPostInput, ContentGenerationJobUncheckedCreateWithoutPostInput>
    connectOrCreate?: ContentGenerationJobCreateOrConnectWithoutPostInput
    connect?: ContentGenerationJobWhereUniqueInput
  }

  export type PublicationResultCreateNestedManyWithoutPostInput = {
    create?: XOR<PublicationResultCreateWithoutPostInput, PublicationResultUncheckedCreateWithoutPostInput> | PublicationResultCreateWithoutPostInput[] | PublicationResultUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PublicationResultCreateOrConnectWithoutPostInput | PublicationResultCreateOrConnectWithoutPostInput[]
    createMany?: PublicationResultCreateManyPostInputEnvelope
    connect?: PublicationResultWhereUniqueInput | PublicationResultWhereUniqueInput[]
  }

  export type ContentVersionCreateNestedManyWithoutPostInput = {
    create?: XOR<ContentVersionCreateWithoutPostInput, ContentVersionUncheckedCreateWithoutPostInput> | ContentVersionCreateWithoutPostInput[] | ContentVersionUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ContentVersionCreateOrConnectWithoutPostInput | ContentVersionCreateOrConnectWithoutPostInput[]
    createMany?: ContentVersionCreateManyPostInputEnvelope
    connect?: ContentVersionWhereUniqueInput | ContentVersionWhereUniqueInput[]
  }

  export type PublicationResultUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<PublicationResultCreateWithoutPostInput, PublicationResultUncheckedCreateWithoutPostInput> | PublicationResultCreateWithoutPostInput[] | PublicationResultUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PublicationResultCreateOrConnectWithoutPostInput | PublicationResultCreateOrConnectWithoutPostInput[]
    createMany?: PublicationResultCreateManyPostInputEnvelope
    connect?: PublicationResultWhereUniqueInput | PublicationResultWhereUniqueInput[]
  }

  export type ContentVersionUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<ContentVersionCreateWithoutPostInput, ContentVersionUncheckedCreateWithoutPostInput> | ContentVersionCreateWithoutPostInput[] | ContentVersionUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ContentVersionCreateOrConnectWithoutPostInput | ContentVersionCreateOrConnectWithoutPostInput[]
    createMany?: ContentVersionCreateManyPostInputEnvelope
    connect?: ContentVersionWhereUniqueInput | ContentVersionWhereUniqueInput[]
  }

  export type EnumPostStatusFieldUpdateOperationsInput = {
    set?: $Enums.PostStatus
  }

  export type PostUpdatehashtagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CampaignUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<CampaignCreateWithoutPostsInput, CampaignUncheckedCreateWithoutPostsInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutPostsInput
    upsert?: CampaignUpsertWithoutPostsInput
    connect?: CampaignWhereUniqueInput
    update?: XOR<XOR<CampaignUpdateToOneWithWhereWithoutPostsInput, CampaignUpdateWithoutPostsInput>, CampaignUncheckedUpdateWithoutPostsInput>
  }

  export type ContentGenerationJobUpdateOneWithoutPostNestedInput = {
    create?: XOR<ContentGenerationJobCreateWithoutPostInput, ContentGenerationJobUncheckedCreateWithoutPostInput>
    connectOrCreate?: ContentGenerationJobCreateOrConnectWithoutPostInput
    upsert?: ContentGenerationJobUpsertWithoutPostInput
    disconnect?: ContentGenerationJobWhereInput | boolean
    delete?: ContentGenerationJobWhereInput | boolean
    connect?: ContentGenerationJobWhereUniqueInput
    update?: XOR<XOR<ContentGenerationJobUpdateToOneWithWhereWithoutPostInput, ContentGenerationJobUpdateWithoutPostInput>, ContentGenerationJobUncheckedUpdateWithoutPostInput>
  }

  export type PublicationResultUpdateManyWithoutPostNestedInput = {
    create?: XOR<PublicationResultCreateWithoutPostInput, PublicationResultUncheckedCreateWithoutPostInput> | PublicationResultCreateWithoutPostInput[] | PublicationResultUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PublicationResultCreateOrConnectWithoutPostInput | PublicationResultCreateOrConnectWithoutPostInput[]
    upsert?: PublicationResultUpsertWithWhereUniqueWithoutPostInput | PublicationResultUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: PublicationResultCreateManyPostInputEnvelope
    set?: PublicationResultWhereUniqueInput | PublicationResultWhereUniqueInput[]
    disconnect?: PublicationResultWhereUniqueInput | PublicationResultWhereUniqueInput[]
    delete?: PublicationResultWhereUniqueInput | PublicationResultWhereUniqueInput[]
    connect?: PublicationResultWhereUniqueInput | PublicationResultWhereUniqueInput[]
    update?: PublicationResultUpdateWithWhereUniqueWithoutPostInput | PublicationResultUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PublicationResultUpdateManyWithWhereWithoutPostInput | PublicationResultUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PublicationResultScalarWhereInput | PublicationResultScalarWhereInput[]
  }

  export type ContentVersionUpdateManyWithoutPostNestedInput = {
    create?: XOR<ContentVersionCreateWithoutPostInput, ContentVersionUncheckedCreateWithoutPostInput> | ContentVersionCreateWithoutPostInput[] | ContentVersionUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ContentVersionCreateOrConnectWithoutPostInput | ContentVersionCreateOrConnectWithoutPostInput[]
    upsert?: ContentVersionUpsertWithWhereUniqueWithoutPostInput | ContentVersionUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ContentVersionCreateManyPostInputEnvelope
    set?: ContentVersionWhereUniqueInput | ContentVersionWhereUniqueInput[]
    disconnect?: ContentVersionWhereUniqueInput | ContentVersionWhereUniqueInput[]
    delete?: ContentVersionWhereUniqueInput | ContentVersionWhereUniqueInput[]
    connect?: ContentVersionWhereUniqueInput | ContentVersionWhereUniqueInput[]
    update?: ContentVersionUpdateWithWhereUniqueWithoutPostInput | ContentVersionUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ContentVersionUpdateManyWithWhereWithoutPostInput | ContentVersionUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ContentVersionScalarWhereInput | ContentVersionScalarWhereInput[]
  }

  export type PublicationResultUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<PublicationResultCreateWithoutPostInput, PublicationResultUncheckedCreateWithoutPostInput> | PublicationResultCreateWithoutPostInput[] | PublicationResultUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PublicationResultCreateOrConnectWithoutPostInput | PublicationResultCreateOrConnectWithoutPostInput[]
    upsert?: PublicationResultUpsertWithWhereUniqueWithoutPostInput | PublicationResultUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: PublicationResultCreateManyPostInputEnvelope
    set?: PublicationResultWhereUniqueInput | PublicationResultWhereUniqueInput[]
    disconnect?: PublicationResultWhereUniqueInput | PublicationResultWhereUniqueInput[]
    delete?: PublicationResultWhereUniqueInput | PublicationResultWhereUniqueInput[]
    connect?: PublicationResultWhereUniqueInput | PublicationResultWhereUniqueInput[]
    update?: PublicationResultUpdateWithWhereUniqueWithoutPostInput | PublicationResultUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PublicationResultUpdateManyWithWhereWithoutPostInput | PublicationResultUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PublicationResultScalarWhereInput | PublicationResultScalarWhereInput[]
  }

  export type ContentVersionUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<ContentVersionCreateWithoutPostInput, ContentVersionUncheckedCreateWithoutPostInput> | ContentVersionCreateWithoutPostInput[] | ContentVersionUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ContentVersionCreateOrConnectWithoutPostInput | ContentVersionCreateOrConnectWithoutPostInput[]
    upsert?: ContentVersionUpsertWithWhereUniqueWithoutPostInput | ContentVersionUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ContentVersionCreateManyPostInputEnvelope
    set?: ContentVersionWhereUniqueInput | ContentVersionWhereUniqueInput[]
    disconnect?: ContentVersionWhereUniqueInput | ContentVersionWhereUniqueInput[]
    delete?: ContentVersionWhereUniqueInput | ContentVersionWhereUniqueInput[]
    connect?: ContentVersionWhereUniqueInput | ContentVersionWhereUniqueInput[]
    update?: ContentVersionUpdateWithWhereUniqueWithoutPostInput | ContentVersionUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ContentVersionUpdateManyWithWhereWithoutPostInput | ContentVersionUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ContentVersionScalarWhereInput | ContentVersionScalarWhereInput[]
  }

  export type PostCreateNestedOneWithoutGenerationJobInput = {
    create?: XOR<PostCreateWithoutGenerationJobInput, PostUncheckedCreateWithoutGenerationJobInput>
    connectOrCreate?: PostCreateOrConnectWithoutGenerationJobInput
    connect?: PostWhereUniqueInput
  }

  export type GenerationStepResultCreateNestedManyWithoutJobInput = {
    create?: XOR<GenerationStepResultCreateWithoutJobInput, GenerationStepResultUncheckedCreateWithoutJobInput> | GenerationStepResultCreateWithoutJobInput[] | GenerationStepResultUncheckedCreateWithoutJobInput[]
    connectOrCreate?: GenerationStepResultCreateOrConnectWithoutJobInput | GenerationStepResultCreateOrConnectWithoutJobInput[]
    createMany?: GenerationStepResultCreateManyJobInputEnvelope
    connect?: GenerationStepResultWhereUniqueInput | GenerationStepResultWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedOneWithoutGenerationJobInput = {
    create?: XOR<PostCreateWithoutGenerationJobInput, PostUncheckedCreateWithoutGenerationJobInput>
    connectOrCreate?: PostCreateOrConnectWithoutGenerationJobInput
    connect?: PostWhereUniqueInput
  }

  export type GenerationStepResultUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<GenerationStepResultCreateWithoutJobInput, GenerationStepResultUncheckedCreateWithoutJobInput> | GenerationStepResultCreateWithoutJobInput[] | GenerationStepResultUncheckedCreateWithoutJobInput[]
    connectOrCreate?: GenerationStepResultCreateOrConnectWithoutJobInput | GenerationStepResultCreateOrConnectWithoutJobInput[]
    createMany?: GenerationStepResultCreateManyJobInputEnvelope
    connect?: GenerationStepResultWhereUniqueInput | GenerationStepResultWhereUniqueInput[]
  }

  export type EnumJobStatusFieldUpdateOperationsInput = {
    set?: $Enums.JobStatus
  }

  export type PostUpdateOneWithoutGenerationJobNestedInput = {
    create?: XOR<PostCreateWithoutGenerationJobInput, PostUncheckedCreateWithoutGenerationJobInput>
    connectOrCreate?: PostCreateOrConnectWithoutGenerationJobInput
    upsert?: PostUpsertWithoutGenerationJobInput
    disconnect?: PostWhereInput | boolean
    delete?: PostWhereInput | boolean
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutGenerationJobInput, PostUpdateWithoutGenerationJobInput>, PostUncheckedUpdateWithoutGenerationJobInput>
  }

  export type GenerationStepResultUpdateManyWithoutJobNestedInput = {
    create?: XOR<GenerationStepResultCreateWithoutJobInput, GenerationStepResultUncheckedCreateWithoutJobInput> | GenerationStepResultCreateWithoutJobInput[] | GenerationStepResultUncheckedCreateWithoutJobInput[]
    connectOrCreate?: GenerationStepResultCreateOrConnectWithoutJobInput | GenerationStepResultCreateOrConnectWithoutJobInput[]
    upsert?: GenerationStepResultUpsertWithWhereUniqueWithoutJobInput | GenerationStepResultUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: GenerationStepResultCreateManyJobInputEnvelope
    set?: GenerationStepResultWhereUniqueInput | GenerationStepResultWhereUniqueInput[]
    disconnect?: GenerationStepResultWhereUniqueInput | GenerationStepResultWhereUniqueInput[]
    delete?: GenerationStepResultWhereUniqueInput | GenerationStepResultWhereUniqueInput[]
    connect?: GenerationStepResultWhereUniqueInput | GenerationStepResultWhereUniqueInput[]
    update?: GenerationStepResultUpdateWithWhereUniqueWithoutJobInput | GenerationStepResultUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: GenerationStepResultUpdateManyWithWhereWithoutJobInput | GenerationStepResultUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: GenerationStepResultScalarWhereInput | GenerationStepResultScalarWhereInput[]
  }

  export type PostUncheckedUpdateOneWithoutGenerationJobNestedInput = {
    create?: XOR<PostCreateWithoutGenerationJobInput, PostUncheckedCreateWithoutGenerationJobInput>
    connectOrCreate?: PostCreateOrConnectWithoutGenerationJobInput
    upsert?: PostUpsertWithoutGenerationJobInput
    disconnect?: PostWhereInput | boolean
    delete?: PostWhereInput | boolean
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutGenerationJobInput, PostUpdateWithoutGenerationJobInput>, PostUncheckedUpdateWithoutGenerationJobInput>
  }

  export type GenerationStepResultUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<GenerationStepResultCreateWithoutJobInput, GenerationStepResultUncheckedCreateWithoutJobInput> | GenerationStepResultCreateWithoutJobInput[] | GenerationStepResultUncheckedCreateWithoutJobInput[]
    connectOrCreate?: GenerationStepResultCreateOrConnectWithoutJobInput | GenerationStepResultCreateOrConnectWithoutJobInput[]
    upsert?: GenerationStepResultUpsertWithWhereUniqueWithoutJobInput | GenerationStepResultUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: GenerationStepResultCreateManyJobInputEnvelope
    set?: GenerationStepResultWhereUniqueInput | GenerationStepResultWhereUniqueInput[]
    disconnect?: GenerationStepResultWhereUniqueInput | GenerationStepResultWhereUniqueInput[]
    delete?: GenerationStepResultWhereUniqueInput | GenerationStepResultWhereUniqueInput[]
    connect?: GenerationStepResultWhereUniqueInput | GenerationStepResultWhereUniqueInput[]
    update?: GenerationStepResultUpdateWithWhereUniqueWithoutJobInput | GenerationStepResultUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: GenerationStepResultUpdateManyWithWhereWithoutJobInput | GenerationStepResultUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: GenerationStepResultScalarWhereInput | GenerationStepResultScalarWhereInput[]
  }

  export type ContentGenerationJobCreateNestedOneWithoutStepsInput = {
    create?: XOR<ContentGenerationJobCreateWithoutStepsInput, ContentGenerationJobUncheckedCreateWithoutStepsInput>
    connectOrCreate?: ContentGenerationJobCreateOrConnectWithoutStepsInput
    connect?: ContentGenerationJobWhereUniqueInput
  }

  export type EnumGenerationStepFieldUpdateOperationsInput = {
    set?: $Enums.GenerationStep
  }

  export type EnumStepStatusFieldUpdateOperationsInput = {
    set?: $Enums.StepStatus
  }

  export type ContentGenerationJobUpdateOneRequiredWithoutStepsNestedInput = {
    create?: XOR<ContentGenerationJobCreateWithoutStepsInput, ContentGenerationJobUncheckedCreateWithoutStepsInput>
    connectOrCreate?: ContentGenerationJobCreateOrConnectWithoutStepsInput
    upsert?: ContentGenerationJobUpsertWithoutStepsInput
    connect?: ContentGenerationJobWhereUniqueInput
    update?: XOR<XOR<ContentGenerationJobUpdateToOneWithWhereWithoutStepsInput, ContentGenerationJobUpdateWithoutStepsInput>, ContentGenerationJobUncheckedUpdateWithoutStepsInput>
  }

  export type ContentVersionCreatehashtagsInput = {
    set: string[]
  }

  export type PostCreateNestedOneWithoutContentVersionsInput = {
    create?: XOR<PostCreateWithoutContentVersionsInput, PostUncheckedCreateWithoutContentVersionsInput>
    connectOrCreate?: PostCreateOrConnectWithoutContentVersionsInput
    connect?: PostWhereUniqueInput
  }

  export type ContentVersionUpdatehashtagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type PostUpdateOneRequiredWithoutContentVersionsNestedInput = {
    create?: XOR<PostCreateWithoutContentVersionsInput, PostUncheckedCreateWithoutContentVersionsInput>
    connectOrCreate?: PostCreateOrConnectWithoutContentVersionsInput
    upsert?: PostUpsertWithoutContentVersionsInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutContentVersionsInput, PostUpdateWithoutContentVersionsInput>, PostUncheckedUpdateWithoutContentVersionsInput>
  }

  export type ClientCreateNestedOneWithoutSocialAccountsInput = {
    create?: XOR<ClientCreateWithoutSocialAccountsInput, ClientUncheckedCreateWithoutSocialAccountsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutSocialAccountsInput
    connect?: ClientWhereUniqueInput
  }

  export type PublicationResultCreateNestedManyWithoutSocialAccountInput = {
    create?: XOR<PublicationResultCreateWithoutSocialAccountInput, PublicationResultUncheckedCreateWithoutSocialAccountInput> | PublicationResultCreateWithoutSocialAccountInput[] | PublicationResultUncheckedCreateWithoutSocialAccountInput[]
    connectOrCreate?: PublicationResultCreateOrConnectWithoutSocialAccountInput | PublicationResultCreateOrConnectWithoutSocialAccountInput[]
    createMany?: PublicationResultCreateManySocialAccountInputEnvelope
    connect?: PublicationResultWhereUniqueInput | PublicationResultWhereUniqueInput[]
  }

  export type PublicationResultUncheckedCreateNestedManyWithoutSocialAccountInput = {
    create?: XOR<PublicationResultCreateWithoutSocialAccountInput, PublicationResultUncheckedCreateWithoutSocialAccountInput> | PublicationResultCreateWithoutSocialAccountInput[] | PublicationResultUncheckedCreateWithoutSocialAccountInput[]
    connectOrCreate?: PublicationResultCreateOrConnectWithoutSocialAccountInput | PublicationResultCreateOrConnectWithoutSocialAccountInput[]
    createMany?: PublicationResultCreateManySocialAccountInputEnvelope
    connect?: PublicationResultWhereUniqueInput | PublicationResultWhereUniqueInput[]
  }

  export type EnumSocialPlatformFieldUpdateOperationsInput = {
    set?: $Enums.SocialPlatform
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ClientUpdateOneRequiredWithoutSocialAccountsNestedInput = {
    create?: XOR<ClientCreateWithoutSocialAccountsInput, ClientUncheckedCreateWithoutSocialAccountsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutSocialAccountsInput
    upsert?: ClientUpsertWithoutSocialAccountsInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutSocialAccountsInput, ClientUpdateWithoutSocialAccountsInput>, ClientUncheckedUpdateWithoutSocialAccountsInput>
  }

  export type PublicationResultUpdateManyWithoutSocialAccountNestedInput = {
    create?: XOR<PublicationResultCreateWithoutSocialAccountInput, PublicationResultUncheckedCreateWithoutSocialAccountInput> | PublicationResultCreateWithoutSocialAccountInput[] | PublicationResultUncheckedCreateWithoutSocialAccountInput[]
    connectOrCreate?: PublicationResultCreateOrConnectWithoutSocialAccountInput | PublicationResultCreateOrConnectWithoutSocialAccountInput[]
    upsert?: PublicationResultUpsertWithWhereUniqueWithoutSocialAccountInput | PublicationResultUpsertWithWhereUniqueWithoutSocialAccountInput[]
    createMany?: PublicationResultCreateManySocialAccountInputEnvelope
    set?: PublicationResultWhereUniqueInput | PublicationResultWhereUniqueInput[]
    disconnect?: PublicationResultWhereUniqueInput | PublicationResultWhereUniqueInput[]
    delete?: PublicationResultWhereUniqueInput | PublicationResultWhereUniqueInput[]
    connect?: PublicationResultWhereUniqueInput | PublicationResultWhereUniqueInput[]
    update?: PublicationResultUpdateWithWhereUniqueWithoutSocialAccountInput | PublicationResultUpdateWithWhereUniqueWithoutSocialAccountInput[]
    updateMany?: PublicationResultUpdateManyWithWhereWithoutSocialAccountInput | PublicationResultUpdateManyWithWhereWithoutSocialAccountInput[]
    deleteMany?: PublicationResultScalarWhereInput | PublicationResultScalarWhereInput[]
  }

  export type PublicationResultUncheckedUpdateManyWithoutSocialAccountNestedInput = {
    create?: XOR<PublicationResultCreateWithoutSocialAccountInput, PublicationResultUncheckedCreateWithoutSocialAccountInput> | PublicationResultCreateWithoutSocialAccountInput[] | PublicationResultUncheckedCreateWithoutSocialAccountInput[]
    connectOrCreate?: PublicationResultCreateOrConnectWithoutSocialAccountInput | PublicationResultCreateOrConnectWithoutSocialAccountInput[]
    upsert?: PublicationResultUpsertWithWhereUniqueWithoutSocialAccountInput | PublicationResultUpsertWithWhereUniqueWithoutSocialAccountInput[]
    createMany?: PublicationResultCreateManySocialAccountInputEnvelope
    set?: PublicationResultWhereUniqueInput | PublicationResultWhereUniqueInput[]
    disconnect?: PublicationResultWhereUniqueInput | PublicationResultWhereUniqueInput[]
    delete?: PublicationResultWhereUniqueInput | PublicationResultWhereUniqueInput[]
    connect?: PublicationResultWhereUniqueInput | PublicationResultWhereUniqueInput[]
    update?: PublicationResultUpdateWithWhereUniqueWithoutSocialAccountInput | PublicationResultUpdateWithWhereUniqueWithoutSocialAccountInput[]
    updateMany?: PublicationResultUpdateManyWithWhereWithoutSocialAccountInput | PublicationResultUpdateManyWithWhereWithoutSocialAccountInput[]
    deleteMany?: PublicationResultScalarWhereInput | PublicationResultScalarWhereInput[]
  }

  export type PostCreateNestedOneWithoutPublicationResultsInput = {
    create?: XOR<PostCreateWithoutPublicationResultsInput, PostUncheckedCreateWithoutPublicationResultsInput>
    connectOrCreate?: PostCreateOrConnectWithoutPublicationResultsInput
    connect?: PostWhereUniqueInput
  }

  export type SocialAccountCreateNestedOneWithoutPublicationsInput = {
    create?: XOR<SocialAccountCreateWithoutPublicationsInput, SocialAccountUncheckedCreateWithoutPublicationsInput>
    connectOrCreate?: SocialAccountCreateOrConnectWithoutPublicationsInput
    connect?: SocialAccountWhereUniqueInput
  }

  export type EnumPublicationStatusFieldUpdateOperationsInput = {
    set?: $Enums.PublicationStatus
  }

  export type PostUpdateOneRequiredWithoutPublicationResultsNestedInput = {
    create?: XOR<PostCreateWithoutPublicationResultsInput, PostUncheckedCreateWithoutPublicationResultsInput>
    connectOrCreate?: PostCreateOrConnectWithoutPublicationResultsInput
    upsert?: PostUpsertWithoutPublicationResultsInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutPublicationResultsInput, PostUpdateWithoutPublicationResultsInput>, PostUncheckedUpdateWithoutPublicationResultsInput>
  }

  export type SocialAccountUpdateOneRequiredWithoutPublicationsNestedInput = {
    create?: XOR<SocialAccountCreateWithoutPublicationsInput, SocialAccountUncheckedCreateWithoutPublicationsInput>
    connectOrCreate?: SocialAccountCreateOrConnectWithoutPublicationsInput
    upsert?: SocialAccountUpsertWithoutPublicationsInput
    connect?: SocialAccountWhereUniqueInput
    update?: XOR<XOR<SocialAccountUpdateToOneWithWhereWithoutPublicationsInput, SocialAccountUpdateWithoutPublicationsInput>, SocialAccountUncheckedUpdateWithoutPublicationsInput>
  }

  export type AgencyCreateNestedOneWithoutTokenTransactionsInput = {
    create?: XOR<AgencyCreateWithoutTokenTransactionsInput, AgencyUncheckedCreateWithoutTokenTransactionsInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutTokenTransactionsInput
    connect?: AgencyWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTokenTransactionsInput = {
    create?: XOR<UserCreateWithoutTokenTransactionsInput, UserUncheckedCreateWithoutTokenTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTokenTransactionsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumTokenTransactionTypeFieldUpdateOperationsInput = {
    set?: $Enums.TokenTransactionType
  }

  export type AgencyUpdateOneRequiredWithoutTokenTransactionsNestedInput = {
    create?: XOR<AgencyCreateWithoutTokenTransactionsInput, AgencyUncheckedCreateWithoutTokenTransactionsInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutTokenTransactionsInput
    upsert?: AgencyUpsertWithoutTokenTransactionsInput
    connect?: AgencyWhereUniqueInput
    update?: XOR<XOR<AgencyUpdateToOneWithWhereWithoutTokenTransactionsInput, AgencyUpdateWithoutTokenTransactionsInput>, AgencyUncheckedUpdateWithoutTokenTransactionsInput>
  }

  export type UserUpdateOneWithoutTokenTransactionsNestedInput = {
    create?: XOR<UserCreateWithoutTokenTransactionsInput, UserUncheckedCreateWithoutTokenTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTokenTransactionsInput
    upsert?: UserUpsertWithoutTokenTransactionsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTokenTransactionsInput, UserUpdateWithoutTokenTransactionsInput>, UserUncheckedUpdateWithoutTokenTransactionsInput>
  }

  export type AgencyCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<AgencyCreateWithoutAuditLogsInput, AgencyUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutAuditLogsInput
    connect?: AgencyWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type AgencyUpdateOneRequiredWithoutAuditLogsNestedInput = {
    create?: XOR<AgencyCreateWithoutAuditLogsInput, AgencyUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: AgencyCreateOrConnectWithoutAuditLogsInput
    upsert?: AgencyUpsertWithoutAuditLogsInput
    connect?: AgencyWhereUniqueInput
    update?: XOR<XOR<AgencyUpdateToOneWithWhereWithoutAuditLogsInput, AgencyUpdateWithoutAuditLogsInput>, AgencyUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type ApiKeyCreatepermissionsInput = {
    set: string[]
  }

  export type ClientCreateNestedOneWithoutApiKeysInput = {
    create?: XOR<ClientCreateWithoutApiKeysInput, ClientUncheckedCreateWithoutApiKeysInput>
    connectOrCreate?: ClientCreateOrConnectWithoutApiKeysInput
    connect?: ClientWhereUniqueInput
  }

  export type ApiKeyUsageCreateNestedManyWithoutApiKeyInput = {
    create?: XOR<ApiKeyUsageCreateWithoutApiKeyInput, ApiKeyUsageUncheckedCreateWithoutApiKeyInput> | ApiKeyUsageCreateWithoutApiKeyInput[] | ApiKeyUsageUncheckedCreateWithoutApiKeyInput[]
    connectOrCreate?: ApiKeyUsageCreateOrConnectWithoutApiKeyInput | ApiKeyUsageCreateOrConnectWithoutApiKeyInput[]
    createMany?: ApiKeyUsageCreateManyApiKeyInputEnvelope
    connect?: ApiKeyUsageWhereUniqueInput | ApiKeyUsageWhereUniqueInput[]
  }

  export type ApiKeyUsageUncheckedCreateNestedManyWithoutApiKeyInput = {
    create?: XOR<ApiKeyUsageCreateWithoutApiKeyInput, ApiKeyUsageUncheckedCreateWithoutApiKeyInput> | ApiKeyUsageCreateWithoutApiKeyInput[] | ApiKeyUsageUncheckedCreateWithoutApiKeyInput[]
    connectOrCreate?: ApiKeyUsageCreateOrConnectWithoutApiKeyInput | ApiKeyUsageCreateOrConnectWithoutApiKeyInput[]
    createMany?: ApiKeyUsageCreateManyApiKeyInputEnvelope
    connect?: ApiKeyUsageWhereUniqueInput | ApiKeyUsageWhereUniqueInput[]
  }

  export type ApiKeyUpdatepermissionsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ClientUpdateOneRequiredWithoutApiKeysNestedInput = {
    create?: XOR<ClientCreateWithoutApiKeysInput, ClientUncheckedCreateWithoutApiKeysInput>
    connectOrCreate?: ClientCreateOrConnectWithoutApiKeysInput
    upsert?: ClientUpsertWithoutApiKeysInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutApiKeysInput, ClientUpdateWithoutApiKeysInput>, ClientUncheckedUpdateWithoutApiKeysInput>
  }

  export type ApiKeyUsageUpdateManyWithoutApiKeyNestedInput = {
    create?: XOR<ApiKeyUsageCreateWithoutApiKeyInput, ApiKeyUsageUncheckedCreateWithoutApiKeyInput> | ApiKeyUsageCreateWithoutApiKeyInput[] | ApiKeyUsageUncheckedCreateWithoutApiKeyInput[]
    connectOrCreate?: ApiKeyUsageCreateOrConnectWithoutApiKeyInput | ApiKeyUsageCreateOrConnectWithoutApiKeyInput[]
    upsert?: ApiKeyUsageUpsertWithWhereUniqueWithoutApiKeyInput | ApiKeyUsageUpsertWithWhereUniqueWithoutApiKeyInput[]
    createMany?: ApiKeyUsageCreateManyApiKeyInputEnvelope
    set?: ApiKeyUsageWhereUniqueInput | ApiKeyUsageWhereUniqueInput[]
    disconnect?: ApiKeyUsageWhereUniqueInput | ApiKeyUsageWhereUniqueInput[]
    delete?: ApiKeyUsageWhereUniqueInput | ApiKeyUsageWhereUniqueInput[]
    connect?: ApiKeyUsageWhereUniqueInput | ApiKeyUsageWhereUniqueInput[]
    update?: ApiKeyUsageUpdateWithWhereUniqueWithoutApiKeyInput | ApiKeyUsageUpdateWithWhereUniqueWithoutApiKeyInput[]
    updateMany?: ApiKeyUsageUpdateManyWithWhereWithoutApiKeyInput | ApiKeyUsageUpdateManyWithWhereWithoutApiKeyInput[]
    deleteMany?: ApiKeyUsageScalarWhereInput | ApiKeyUsageScalarWhereInput[]
  }

  export type ApiKeyUsageUncheckedUpdateManyWithoutApiKeyNestedInput = {
    create?: XOR<ApiKeyUsageCreateWithoutApiKeyInput, ApiKeyUsageUncheckedCreateWithoutApiKeyInput> | ApiKeyUsageCreateWithoutApiKeyInput[] | ApiKeyUsageUncheckedCreateWithoutApiKeyInput[]
    connectOrCreate?: ApiKeyUsageCreateOrConnectWithoutApiKeyInput | ApiKeyUsageCreateOrConnectWithoutApiKeyInput[]
    upsert?: ApiKeyUsageUpsertWithWhereUniqueWithoutApiKeyInput | ApiKeyUsageUpsertWithWhereUniqueWithoutApiKeyInput[]
    createMany?: ApiKeyUsageCreateManyApiKeyInputEnvelope
    set?: ApiKeyUsageWhereUniqueInput | ApiKeyUsageWhereUniqueInput[]
    disconnect?: ApiKeyUsageWhereUniqueInput | ApiKeyUsageWhereUniqueInput[]
    delete?: ApiKeyUsageWhereUniqueInput | ApiKeyUsageWhereUniqueInput[]
    connect?: ApiKeyUsageWhereUniqueInput | ApiKeyUsageWhereUniqueInput[]
    update?: ApiKeyUsageUpdateWithWhereUniqueWithoutApiKeyInput | ApiKeyUsageUpdateWithWhereUniqueWithoutApiKeyInput[]
    updateMany?: ApiKeyUsageUpdateManyWithWhereWithoutApiKeyInput | ApiKeyUsageUpdateManyWithWhereWithoutApiKeyInput[]
    deleteMany?: ApiKeyUsageScalarWhereInput | ApiKeyUsageScalarWhereInput[]
  }

  export type ApiKeyCreateNestedOneWithoutUsageInput = {
    create?: XOR<ApiKeyCreateWithoutUsageInput, ApiKeyUncheckedCreateWithoutUsageInput>
    connectOrCreate?: ApiKeyCreateOrConnectWithoutUsageInput
    connect?: ApiKeyWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ApiKeyUpdateOneRequiredWithoutUsageNestedInput = {
    create?: XOR<ApiKeyCreateWithoutUsageInput, ApiKeyUncheckedCreateWithoutUsageInput>
    connectOrCreate?: ApiKeyCreateOrConnectWithoutUsageInput
    upsert?: ApiKeyUpsertWithoutUsageInput
    connect?: ApiKeyWhereUniqueInput
    update?: XOR<XOR<ApiKeyUpdateToOneWithWhereWithoutUsageInput, ApiKeyUpdateWithoutUsageInput>, ApiKeyUncheckedUpdateWithoutUsageInput>
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumSubscriptionPlanFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionPlan | EnumSubscriptionPlanFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionPlan[] | ListEnumSubscriptionPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionPlan[] | ListEnumSubscriptionPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionPlanFilter<$PrismaModel> | $Enums.SubscriptionPlan
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumSubscriptionPlanWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionPlan | EnumSubscriptionPlanFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionPlan[] | ListEnumSubscriptionPlanFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionPlan[] | ListEnumSubscriptionPlanFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionPlanWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionPlan
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionPlanFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionPlanFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumAssetTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetType | EnumAssetTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AssetType[] | ListEnumAssetTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssetType[] | ListEnumAssetTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAssetTypeFilter<$PrismaModel> | $Enums.AssetType
  }

  export type NestedEnumAssetTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssetType | EnumAssetTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AssetType[] | ListEnumAssetTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssetType[] | ListEnumAssetTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAssetTypeWithAggregatesFilter<$PrismaModel> | $Enums.AssetType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssetTypeFilter<$PrismaModel>
    _max?: NestedEnumAssetTypeFilter<$PrismaModel>
  }

  export type NestedEnumCampaignStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CampaignStatus | EnumCampaignStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCampaignStatusFilter<$PrismaModel> | $Enums.CampaignStatus
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumCampaignStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CampaignStatus | EnumCampaignStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCampaignStatusWithAggregatesFilter<$PrismaModel> | $Enums.CampaignStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCampaignStatusFilter<$PrismaModel>
    _max?: NestedEnumCampaignStatusFilter<$PrismaModel>
  }

  export type NestedEnumPostStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PostStatus | EnumPostStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PostStatus[] | ListEnumPostStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostStatus[] | ListEnumPostStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPostStatusFilter<$PrismaModel> | $Enums.PostStatus
  }

  export type NestedEnumPostStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PostStatus | EnumPostStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PostStatus[] | ListEnumPostStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostStatus[] | ListEnumPostStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPostStatusWithAggregatesFilter<$PrismaModel> | $Enums.PostStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPostStatusFilter<$PrismaModel>
    _max?: NestedEnumPostStatusFilter<$PrismaModel>
  }

  export type NestedEnumJobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusFilter<$PrismaModel> | $Enums.JobStatus
  }

  export type NestedEnumJobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusWithAggregatesFilter<$PrismaModel> | $Enums.JobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobStatusFilter<$PrismaModel>
    _max?: NestedEnumJobStatusFilter<$PrismaModel>
  }

  export type NestedEnumGenerationStepFilter<$PrismaModel = never> = {
    equals?: $Enums.GenerationStep | EnumGenerationStepFieldRefInput<$PrismaModel>
    in?: $Enums.GenerationStep[] | ListEnumGenerationStepFieldRefInput<$PrismaModel>
    notIn?: $Enums.GenerationStep[] | ListEnumGenerationStepFieldRefInput<$PrismaModel>
    not?: NestedEnumGenerationStepFilter<$PrismaModel> | $Enums.GenerationStep
  }

  export type NestedEnumStepStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.StepStatus | EnumStepStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StepStatus[] | ListEnumStepStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.StepStatus[] | ListEnumStepStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStepStatusFilter<$PrismaModel> | $Enums.StepStatus
  }

  export type NestedEnumGenerationStepWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GenerationStep | EnumGenerationStepFieldRefInput<$PrismaModel>
    in?: $Enums.GenerationStep[] | ListEnumGenerationStepFieldRefInput<$PrismaModel>
    notIn?: $Enums.GenerationStep[] | ListEnumGenerationStepFieldRefInput<$PrismaModel>
    not?: NestedEnumGenerationStepWithAggregatesFilter<$PrismaModel> | $Enums.GenerationStep
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenerationStepFilter<$PrismaModel>
    _max?: NestedEnumGenerationStepFilter<$PrismaModel>
  }

  export type NestedEnumStepStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StepStatus | EnumStepStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StepStatus[] | ListEnumStepStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.StepStatus[] | ListEnumStepStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStepStatusWithAggregatesFilter<$PrismaModel> | $Enums.StepStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStepStatusFilter<$PrismaModel>
    _max?: NestedEnumStepStatusFilter<$PrismaModel>
  }

  export type NestedEnumSocialPlatformFilter<$PrismaModel = never> = {
    equals?: $Enums.SocialPlatform | EnumSocialPlatformFieldRefInput<$PrismaModel>
    in?: $Enums.SocialPlatform[] | ListEnumSocialPlatformFieldRefInput<$PrismaModel>
    notIn?: $Enums.SocialPlatform[] | ListEnumSocialPlatformFieldRefInput<$PrismaModel>
    not?: NestedEnumSocialPlatformFilter<$PrismaModel> | $Enums.SocialPlatform
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumSocialPlatformWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SocialPlatform | EnumSocialPlatformFieldRefInput<$PrismaModel>
    in?: $Enums.SocialPlatform[] | ListEnumSocialPlatformFieldRefInput<$PrismaModel>
    notIn?: $Enums.SocialPlatform[] | ListEnumSocialPlatformFieldRefInput<$PrismaModel>
    not?: NestedEnumSocialPlatformWithAggregatesFilter<$PrismaModel> | $Enums.SocialPlatform
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSocialPlatformFilter<$PrismaModel>
    _max?: NestedEnumSocialPlatformFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumPublicationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PublicationStatus | EnumPublicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PublicationStatus[] | ListEnumPublicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PublicationStatus[] | ListEnumPublicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPublicationStatusFilter<$PrismaModel> | $Enums.PublicationStatus
  }

  export type NestedEnumPublicationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PublicationStatus | EnumPublicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PublicationStatus[] | ListEnumPublicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PublicationStatus[] | ListEnumPublicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPublicationStatusWithAggregatesFilter<$PrismaModel> | $Enums.PublicationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPublicationStatusFilter<$PrismaModel>
    _max?: NestedEnumPublicationStatusFilter<$PrismaModel>
  }

  export type NestedEnumTokenTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenTransactionType | EnumTokenTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenTransactionType[] | ListEnumTokenTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenTransactionType[] | ListEnumTokenTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTransactionTypeFilter<$PrismaModel> | $Enums.TokenTransactionType
  }

  export type NestedEnumTokenTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenTransactionType | EnumTokenTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenTransactionType[] | ListEnumTokenTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenTransactionType[] | ListEnumTokenTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.TokenTransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTokenTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumTokenTransactionTypeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type UserCreateWithoutAgencyInput = {
    id?: string
    email: string
    name: string
    password?: string | null
    role: $Enums.UserRole
    emailVerified?: Date | string | null
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedClients?: ClientCreateNestedManyWithoutAssignedUsersInput
    invitationsSent?: UserInvitationCreateNestedManyWithoutSenderInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    tokenTransactions?: TokenTransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAgencyInput = {
    id?: string
    email: string
    name: string
    password?: string | null
    role: $Enums.UserRole
    emailVerified?: Date | string | null
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedClients?: ClientUncheckedCreateNestedManyWithoutAssignedUsersInput
    invitationsSent?: UserInvitationUncheckedCreateNestedManyWithoutSenderInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    tokenTransactions?: TokenTransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAgencyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAgencyInput, UserUncheckedCreateWithoutAgencyInput>
  }

  export type UserCreateManyAgencyInputEnvelope = {
    data: UserCreateManyAgencyInput | UserCreateManyAgencyInput[]
    skipDuplicates?: boolean
  }

  export type ClientCreateWithoutAgencyInput = {
    id?: string
    brandName: string
    brandColors?: ClientCreatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    logoUrl?: string | null
    whatsappNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedUsers?: UserCreateNestedManyWithoutAssignedClientsInput
    campaigns?: CampaignCreateNestedManyWithoutClientInput
    brandAssets?: BrandAssetCreateNestedManyWithoutClientInput
    socialAccounts?: SocialAccountCreateNestedManyWithoutClientInput
    socialMediaLinks?: SocialMediaLinkCreateNestedManyWithoutClientInput
    apiKeys?: ApiKeyCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutAgencyInput = {
    id?: string
    brandName: string
    brandColors?: ClientCreatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    logoUrl?: string | null
    whatsappNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedUsers?: UserUncheckedCreateNestedManyWithoutAssignedClientsInput
    campaigns?: CampaignUncheckedCreateNestedManyWithoutClientInput
    brandAssets?: BrandAssetUncheckedCreateNestedManyWithoutClientInput
    socialAccounts?: SocialAccountUncheckedCreateNestedManyWithoutClientInput
    socialMediaLinks?: SocialMediaLinkUncheckedCreateNestedManyWithoutClientInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutAgencyInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutAgencyInput, ClientUncheckedCreateWithoutAgencyInput>
  }

  export type ClientCreateManyAgencyInputEnvelope = {
    data: ClientCreateManyAgencyInput | ClientCreateManyAgencyInput[]
    skipDuplicates?: boolean
  }

  export type UserInvitationCreateWithoutAgencyInput = {
    id?: string
    email: string
    role: $Enums.UserRole
    token: string
    expiresAt: Date | string
    usedAt?: Date | string | null
    clientIds?: UserInvitationCreateclientIdsInput | string[]
    createdAt?: Date | string
    sender: UserCreateNestedOneWithoutInvitationsSentInput
  }

  export type UserInvitationUncheckedCreateWithoutAgencyInput = {
    id?: string
    email: string
    role: $Enums.UserRole
    token: string
    expiresAt: Date | string
    usedAt?: Date | string | null
    senderId: string
    clientIds?: UserInvitationCreateclientIdsInput | string[]
    createdAt?: Date | string
  }

  export type UserInvitationCreateOrConnectWithoutAgencyInput = {
    where: UserInvitationWhereUniqueInput
    create: XOR<UserInvitationCreateWithoutAgencyInput, UserInvitationUncheckedCreateWithoutAgencyInput>
  }

  export type UserInvitationCreateManyAgencyInputEnvelope = {
    data: UserInvitationCreateManyAgencyInput | UserInvitationCreateManyAgencyInput[]
    skipDuplicates?: boolean
  }

  export type TokenTransactionCreateWithoutAgencyInput = {
    id?: string
    amount: number
    type?: $Enums.TokenTransactionType
    description: string
    reference?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutTokenTransactionsInput
  }

  export type TokenTransactionUncheckedCreateWithoutAgencyInput = {
    id?: string
    userId?: string | null
    amount: number
    type?: $Enums.TokenTransactionType
    description: string
    reference?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type TokenTransactionCreateOrConnectWithoutAgencyInput = {
    where: TokenTransactionWhereUniqueInput
    create: XOR<TokenTransactionCreateWithoutAgencyInput, TokenTransactionUncheckedCreateWithoutAgencyInput>
  }

  export type TokenTransactionCreateManyAgencyInputEnvelope = {
    data: TokenTransactionCreateManyAgencyInput | TokenTransactionCreateManyAgencyInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutAgencyInput = {
    id?: string
    action: string
    resource: string
    resourceId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateWithoutAgencyInput = {
    id?: string
    userId?: string | null
    action: string
    resource: string
    resourceId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutAgencyInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutAgencyInput, AuditLogUncheckedCreateWithoutAgencyInput>
  }

  export type AuditLogCreateManyAgencyInputEnvelope = {
    data: AuditLogCreateManyAgencyInput | AuditLogCreateManyAgencyInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutAgencyInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutAgencyInput, UserUncheckedUpdateWithoutAgencyInput>
    create: XOR<UserCreateWithoutAgencyInput, UserUncheckedCreateWithoutAgencyInput>
  }

  export type UserUpdateWithWhereUniqueWithoutAgencyInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutAgencyInput, UserUncheckedUpdateWithoutAgencyInput>
  }

  export type UserUpdateManyWithWhereWithoutAgencyInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutAgencyInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    emailVerificationToken?: StringNullableFilter<"User"> | string | null
    passwordResetToken?: StringNullableFilter<"User"> | string | null
    passwordResetExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    agencyId?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type ClientUpsertWithWhereUniqueWithoutAgencyInput = {
    where: ClientWhereUniqueInput
    update: XOR<ClientUpdateWithoutAgencyInput, ClientUncheckedUpdateWithoutAgencyInput>
    create: XOR<ClientCreateWithoutAgencyInput, ClientUncheckedCreateWithoutAgencyInput>
  }

  export type ClientUpdateWithWhereUniqueWithoutAgencyInput = {
    where: ClientWhereUniqueInput
    data: XOR<ClientUpdateWithoutAgencyInput, ClientUncheckedUpdateWithoutAgencyInput>
  }

  export type ClientUpdateManyWithWhereWithoutAgencyInput = {
    where: ClientScalarWhereInput
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyWithoutAgencyInput>
  }

  export type ClientScalarWhereInput = {
    AND?: ClientScalarWhereInput | ClientScalarWhereInput[]
    OR?: ClientScalarWhereInput[]
    NOT?: ClientScalarWhereInput | ClientScalarWhereInput[]
    id?: StringFilter<"Client"> | string
    agencyId?: StringFilter<"Client"> | string
    brandName?: StringFilter<"Client"> | string
    brandColors?: StringNullableListFilter<"Client">
    typography?: JsonNullableFilter<"Client">
    description?: StringNullableFilter<"Client"> | string | null
    logoUrl?: StringNullableFilter<"Client"> | string | null
    whatsappNumber?: StringNullableFilter<"Client"> | string | null
    createdAt?: DateTimeFilter<"Client"> | Date | string
    updatedAt?: DateTimeFilter<"Client"> | Date | string
  }

  export type UserInvitationUpsertWithWhereUniqueWithoutAgencyInput = {
    where: UserInvitationWhereUniqueInput
    update: XOR<UserInvitationUpdateWithoutAgencyInput, UserInvitationUncheckedUpdateWithoutAgencyInput>
    create: XOR<UserInvitationCreateWithoutAgencyInput, UserInvitationUncheckedCreateWithoutAgencyInput>
  }

  export type UserInvitationUpdateWithWhereUniqueWithoutAgencyInput = {
    where: UserInvitationWhereUniqueInput
    data: XOR<UserInvitationUpdateWithoutAgencyInput, UserInvitationUncheckedUpdateWithoutAgencyInput>
  }

  export type UserInvitationUpdateManyWithWhereWithoutAgencyInput = {
    where: UserInvitationScalarWhereInput
    data: XOR<UserInvitationUpdateManyMutationInput, UserInvitationUncheckedUpdateManyWithoutAgencyInput>
  }

  export type UserInvitationScalarWhereInput = {
    AND?: UserInvitationScalarWhereInput | UserInvitationScalarWhereInput[]
    OR?: UserInvitationScalarWhereInput[]
    NOT?: UserInvitationScalarWhereInput | UserInvitationScalarWhereInput[]
    id?: StringFilter<"UserInvitation"> | string
    email?: StringFilter<"UserInvitation"> | string
    role?: EnumUserRoleFilter<"UserInvitation"> | $Enums.UserRole
    token?: StringFilter<"UserInvitation"> | string
    expiresAt?: DateTimeFilter<"UserInvitation"> | Date | string
    usedAt?: DateTimeNullableFilter<"UserInvitation"> | Date | string | null
    senderId?: StringFilter<"UserInvitation"> | string
    agencyId?: StringFilter<"UserInvitation"> | string
    clientIds?: StringNullableListFilter<"UserInvitation">
    createdAt?: DateTimeFilter<"UserInvitation"> | Date | string
  }

  export type TokenTransactionUpsertWithWhereUniqueWithoutAgencyInput = {
    where: TokenTransactionWhereUniqueInput
    update: XOR<TokenTransactionUpdateWithoutAgencyInput, TokenTransactionUncheckedUpdateWithoutAgencyInput>
    create: XOR<TokenTransactionCreateWithoutAgencyInput, TokenTransactionUncheckedCreateWithoutAgencyInput>
  }

  export type TokenTransactionUpdateWithWhereUniqueWithoutAgencyInput = {
    where: TokenTransactionWhereUniqueInput
    data: XOR<TokenTransactionUpdateWithoutAgencyInput, TokenTransactionUncheckedUpdateWithoutAgencyInput>
  }

  export type TokenTransactionUpdateManyWithWhereWithoutAgencyInput = {
    where: TokenTransactionScalarWhereInput
    data: XOR<TokenTransactionUpdateManyMutationInput, TokenTransactionUncheckedUpdateManyWithoutAgencyInput>
  }

  export type TokenTransactionScalarWhereInput = {
    AND?: TokenTransactionScalarWhereInput | TokenTransactionScalarWhereInput[]
    OR?: TokenTransactionScalarWhereInput[]
    NOT?: TokenTransactionScalarWhereInput | TokenTransactionScalarWhereInput[]
    id?: StringFilter<"TokenTransaction"> | string
    agencyId?: StringFilter<"TokenTransaction"> | string
    userId?: StringNullableFilter<"TokenTransaction"> | string | null
    amount?: IntFilter<"TokenTransaction"> | number
    type?: EnumTokenTransactionTypeFilter<"TokenTransaction"> | $Enums.TokenTransactionType
    description?: StringFilter<"TokenTransaction"> | string
    reference?: StringNullableFilter<"TokenTransaction"> | string | null
    metadata?: JsonNullableFilter<"TokenTransaction">
    createdAt?: DateTimeFilter<"TokenTransaction"> | Date | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutAgencyInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutAgencyInput, AuditLogUncheckedUpdateWithoutAgencyInput>
    create: XOR<AuditLogCreateWithoutAgencyInput, AuditLogUncheckedCreateWithoutAgencyInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutAgencyInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutAgencyInput, AuditLogUncheckedUpdateWithoutAgencyInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutAgencyInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutAgencyInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    agencyId?: StringFilter<"AuditLog"> | string
    userId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    resource?: StringFilter<"AuditLog"> | string
    resourceId?: StringNullableFilter<"AuditLog"> | string | null
    details?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type AgencyCreateWithoutUsersInput = {
    id?: string
    name: string
    subscriptionPlan?: $Enums.SubscriptionPlan
    tokenBalance?: number
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clients?: ClientCreateNestedManyWithoutAgencyInput
    userInvitations?: UserInvitationCreateNestedManyWithoutAgencyInput
    tokenTransactions?: TokenTransactionCreateNestedManyWithoutAgencyInput
    auditLogs?: AuditLogCreateNestedManyWithoutAgencyInput
  }

  export type AgencyUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    subscriptionPlan?: $Enums.SubscriptionPlan
    tokenBalance?: number
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clients?: ClientUncheckedCreateNestedManyWithoutAgencyInput
    userInvitations?: UserInvitationUncheckedCreateNestedManyWithoutAgencyInput
    tokenTransactions?: TokenTransactionUncheckedCreateNestedManyWithoutAgencyInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutAgencyInput
  }

  export type AgencyCreateOrConnectWithoutUsersInput = {
    where: AgencyWhereUniqueInput
    create: XOR<AgencyCreateWithoutUsersInput, AgencyUncheckedCreateWithoutUsersInput>
  }

  export type ClientCreateWithoutAssignedUsersInput = {
    id?: string
    brandName: string
    brandColors?: ClientCreatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    logoUrl?: string | null
    whatsappNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutClientsInput
    campaigns?: CampaignCreateNestedManyWithoutClientInput
    brandAssets?: BrandAssetCreateNestedManyWithoutClientInput
    socialAccounts?: SocialAccountCreateNestedManyWithoutClientInput
    socialMediaLinks?: SocialMediaLinkCreateNestedManyWithoutClientInput
    apiKeys?: ApiKeyCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutAssignedUsersInput = {
    id?: string
    agencyId: string
    brandName: string
    brandColors?: ClientCreatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    logoUrl?: string | null
    whatsappNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    campaigns?: CampaignUncheckedCreateNestedManyWithoutClientInput
    brandAssets?: BrandAssetUncheckedCreateNestedManyWithoutClientInput
    socialAccounts?: SocialAccountUncheckedCreateNestedManyWithoutClientInput
    socialMediaLinks?: SocialMediaLinkUncheckedCreateNestedManyWithoutClientInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutAssignedUsersInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutAssignedUsersInput, ClientUncheckedCreateWithoutAssignedUsersInput>
  }

  export type UserInvitationCreateWithoutSenderInput = {
    id?: string
    email: string
    role: $Enums.UserRole
    token: string
    expiresAt: Date | string
    usedAt?: Date | string | null
    clientIds?: UserInvitationCreateclientIdsInput | string[]
    createdAt?: Date | string
    agency: AgencyCreateNestedOneWithoutUserInvitationsInput
  }

  export type UserInvitationUncheckedCreateWithoutSenderInput = {
    id?: string
    email: string
    role: $Enums.UserRole
    token: string
    expiresAt: Date | string
    usedAt?: Date | string | null
    agencyId: string
    clientIds?: UserInvitationCreateclientIdsInput | string[]
    createdAt?: Date | string
  }

  export type UserInvitationCreateOrConnectWithoutSenderInput = {
    where: UserInvitationWhereUniqueInput
    create: XOR<UserInvitationCreateWithoutSenderInput, UserInvitationUncheckedCreateWithoutSenderInput>
  }

  export type UserInvitationCreateManySenderInputEnvelope = {
    data: UserInvitationCreateManySenderInput | UserInvitationCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutUserInput = {
    id?: string
    action: string
    resource: string
    resourceId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    agency: AgencyCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: string
    agencyId: string
    action: string
    resource: string
    resourceId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TokenTransactionCreateWithoutUserInput = {
    id?: string
    amount: number
    type?: $Enums.TokenTransactionType
    description: string
    reference?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    agency: AgencyCreateNestedOneWithoutTokenTransactionsInput
  }

  export type TokenTransactionUncheckedCreateWithoutUserInput = {
    id?: string
    agencyId: string
    amount: number
    type?: $Enums.TokenTransactionType
    description: string
    reference?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type TokenTransactionCreateOrConnectWithoutUserInput = {
    where: TokenTransactionWhereUniqueInput
    create: XOR<TokenTransactionCreateWithoutUserInput, TokenTransactionUncheckedCreateWithoutUserInput>
  }

  export type TokenTransactionCreateManyUserInputEnvelope = {
    data: TokenTransactionCreateManyUserInput | TokenTransactionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AgencyUpsertWithoutUsersInput = {
    update: XOR<AgencyUpdateWithoutUsersInput, AgencyUncheckedUpdateWithoutUsersInput>
    create: XOR<AgencyCreateWithoutUsersInput, AgencyUncheckedCreateWithoutUsersInput>
    where?: AgencyWhereInput
  }

  export type AgencyUpdateToOneWithWhereWithoutUsersInput = {
    where?: AgencyWhereInput
    data: XOR<AgencyUpdateWithoutUsersInput, AgencyUncheckedUpdateWithoutUsersInput>
  }

  export type AgencyUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    tokenBalance?: IntFieldUpdateOperationsInput | number
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clients?: ClientUpdateManyWithoutAgencyNestedInput
    userInvitations?: UserInvitationUpdateManyWithoutAgencyNestedInput
    tokenTransactions?: TokenTransactionUpdateManyWithoutAgencyNestedInput
    auditLogs?: AuditLogUpdateManyWithoutAgencyNestedInput
  }

  export type AgencyUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    tokenBalance?: IntFieldUpdateOperationsInput | number
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clients?: ClientUncheckedUpdateManyWithoutAgencyNestedInput
    userInvitations?: UserInvitationUncheckedUpdateManyWithoutAgencyNestedInput
    tokenTransactions?: TokenTransactionUncheckedUpdateManyWithoutAgencyNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutAgencyNestedInput
  }

  export type ClientUpsertWithWhereUniqueWithoutAssignedUsersInput = {
    where: ClientWhereUniqueInput
    update: XOR<ClientUpdateWithoutAssignedUsersInput, ClientUncheckedUpdateWithoutAssignedUsersInput>
    create: XOR<ClientCreateWithoutAssignedUsersInput, ClientUncheckedCreateWithoutAssignedUsersInput>
  }

  export type ClientUpdateWithWhereUniqueWithoutAssignedUsersInput = {
    where: ClientWhereUniqueInput
    data: XOR<ClientUpdateWithoutAssignedUsersInput, ClientUncheckedUpdateWithoutAssignedUsersInput>
  }

  export type ClientUpdateManyWithWhereWithoutAssignedUsersInput = {
    where: ClientScalarWhereInput
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyWithoutAssignedUsersInput>
  }

  export type UserInvitationUpsertWithWhereUniqueWithoutSenderInput = {
    where: UserInvitationWhereUniqueInput
    update: XOR<UserInvitationUpdateWithoutSenderInput, UserInvitationUncheckedUpdateWithoutSenderInput>
    create: XOR<UserInvitationCreateWithoutSenderInput, UserInvitationUncheckedCreateWithoutSenderInput>
  }

  export type UserInvitationUpdateWithWhereUniqueWithoutSenderInput = {
    where: UserInvitationWhereUniqueInput
    data: XOR<UserInvitationUpdateWithoutSenderInput, UserInvitationUncheckedUpdateWithoutSenderInput>
  }

  export type UserInvitationUpdateManyWithWhereWithoutSenderInput = {
    where: UserInvitationScalarWhereInput
    data: XOR<UserInvitationUpdateManyMutationInput, UserInvitationUncheckedUpdateManyWithoutSenderInput>
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type TokenTransactionUpsertWithWhereUniqueWithoutUserInput = {
    where: TokenTransactionWhereUniqueInput
    update: XOR<TokenTransactionUpdateWithoutUserInput, TokenTransactionUncheckedUpdateWithoutUserInput>
    create: XOR<TokenTransactionCreateWithoutUserInput, TokenTransactionUncheckedCreateWithoutUserInput>
  }

  export type TokenTransactionUpdateWithWhereUniqueWithoutUserInput = {
    where: TokenTransactionWhereUniqueInput
    data: XOR<TokenTransactionUpdateWithoutUserInput, TokenTransactionUncheckedUpdateWithoutUserInput>
  }

  export type TokenTransactionUpdateManyWithWhereWithoutUserInput = {
    where: TokenTransactionScalarWhereInput
    data: XOR<TokenTransactionUpdateManyMutationInput, TokenTransactionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserCreateWithoutInvitationsSentInput = {
    id?: string
    email: string
    name: string
    password?: string | null
    role: $Enums.UserRole
    emailVerified?: Date | string | null
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutUsersInput
    assignedClients?: ClientCreateNestedManyWithoutAssignedUsersInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    tokenTransactions?: TokenTransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInvitationsSentInput = {
    id?: string
    email: string
    name: string
    password?: string | null
    role: $Enums.UserRole
    emailVerified?: Date | string | null
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    agencyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedClients?: ClientUncheckedCreateNestedManyWithoutAssignedUsersInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    tokenTransactions?: TokenTransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInvitationsSentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInvitationsSentInput, UserUncheckedCreateWithoutInvitationsSentInput>
  }

  export type AgencyCreateWithoutUserInvitationsInput = {
    id?: string
    name: string
    subscriptionPlan?: $Enums.SubscriptionPlan
    tokenBalance?: number
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutAgencyInput
    clients?: ClientCreateNestedManyWithoutAgencyInput
    tokenTransactions?: TokenTransactionCreateNestedManyWithoutAgencyInput
    auditLogs?: AuditLogCreateNestedManyWithoutAgencyInput
  }

  export type AgencyUncheckedCreateWithoutUserInvitationsInput = {
    id?: string
    name: string
    subscriptionPlan?: $Enums.SubscriptionPlan
    tokenBalance?: number
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutAgencyInput
    clients?: ClientUncheckedCreateNestedManyWithoutAgencyInput
    tokenTransactions?: TokenTransactionUncheckedCreateNestedManyWithoutAgencyInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutAgencyInput
  }

  export type AgencyCreateOrConnectWithoutUserInvitationsInput = {
    where: AgencyWhereUniqueInput
    create: XOR<AgencyCreateWithoutUserInvitationsInput, AgencyUncheckedCreateWithoutUserInvitationsInput>
  }

  export type UserUpsertWithoutInvitationsSentInput = {
    update: XOR<UserUpdateWithoutInvitationsSentInput, UserUncheckedUpdateWithoutInvitationsSentInput>
    create: XOR<UserCreateWithoutInvitationsSentInput, UserUncheckedCreateWithoutInvitationsSentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInvitationsSentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInvitationsSentInput, UserUncheckedUpdateWithoutInvitationsSentInput>
  }

  export type UserUpdateWithoutInvitationsSentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutUsersNestedInput
    assignedClients?: ClientUpdateManyWithoutAssignedUsersNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    tokenTransactions?: TokenTransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInvitationsSentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedClients?: ClientUncheckedUpdateManyWithoutAssignedUsersNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    tokenTransactions?: TokenTransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AgencyUpsertWithoutUserInvitationsInput = {
    update: XOR<AgencyUpdateWithoutUserInvitationsInput, AgencyUncheckedUpdateWithoutUserInvitationsInput>
    create: XOR<AgencyCreateWithoutUserInvitationsInput, AgencyUncheckedCreateWithoutUserInvitationsInput>
    where?: AgencyWhereInput
  }

  export type AgencyUpdateToOneWithWhereWithoutUserInvitationsInput = {
    where?: AgencyWhereInput
    data: XOR<AgencyUpdateWithoutUserInvitationsInput, AgencyUncheckedUpdateWithoutUserInvitationsInput>
  }

  export type AgencyUpdateWithoutUserInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    tokenBalance?: IntFieldUpdateOperationsInput | number
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutAgencyNestedInput
    clients?: ClientUpdateManyWithoutAgencyNestedInput
    tokenTransactions?: TokenTransactionUpdateManyWithoutAgencyNestedInput
    auditLogs?: AuditLogUpdateManyWithoutAgencyNestedInput
  }

  export type AgencyUncheckedUpdateWithoutUserInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    tokenBalance?: IntFieldUpdateOperationsInput | number
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutAgencyNestedInput
    clients?: ClientUncheckedUpdateManyWithoutAgencyNestedInput
    tokenTransactions?: TokenTransactionUncheckedUpdateManyWithoutAgencyNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutAgencyNestedInput
  }

  export type AgencyCreateWithoutClientsInput = {
    id?: string
    name: string
    subscriptionPlan?: $Enums.SubscriptionPlan
    tokenBalance?: number
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutAgencyInput
    userInvitations?: UserInvitationCreateNestedManyWithoutAgencyInput
    tokenTransactions?: TokenTransactionCreateNestedManyWithoutAgencyInput
    auditLogs?: AuditLogCreateNestedManyWithoutAgencyInput
  }

  export type AgencyUncheckedCreateWithoutClientsInput = {
    id?: string
    name: string
    subscriptionPlan?: $Enums.SubscriptionPlan
    tokenBalance?: number
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutAgencyInput
    userInvitations?: UserInvitationUncheckedCreateNestedManyWithoutAgencyInput
    tokenTransactions?: TokenTransactionUncheckedCreateNestedManyWithoutAgencyInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutAgencyInput
  }

  export type AgencyCreateOrConnectWithoutClientsInput = {
    where: AgencyWhereUniqueInput
    create: XOR<AgencyCreateWithoutClientsInput, AgencyUncheckedCreateWithoutClientsInput>
  }

  export type UserCreateWithoutAssignedClientsInput = {
    id?: string
    email: string
    name: string
    password?: string | null
    role: $Enums.UserRole
    emailVerified?: Date | string | null
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutUsersInput
    invitationsSent?: UserInvitationCreateNestedManyWithoutSenderInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    tokenTransactions?: TokenTransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAssignedClientsInput = {
    id?: string
    email: string
    name: string
    password?: string | null
    role: $Enums.UserRole
    emailVerified?: Date | string | null
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    agencyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    invitationsSent?: UserInvitationUncheckedCreateNestedManyWithoutSenderInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    tokenTransactions?: TokenTransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAssignedClientsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedClientsInput, UserUncheckedCreateWithoutAssignedClientsInput>
  }

  export type CampaignCreateWithoutClientInput = {
    id?: string
    name: string
    objective: string
    startDate: Date | string
    endDate: Date | string
    brandTone: string
    publicationFrequency: JsonNullValueInput | InputJsonValue
    templateIds?: CampaignCreatetemplateIdsInput | string[]
    status?: $Enums.CampaignStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUncheckedCreateWithoutClientInput = {
    id?: string
    name: string
    objective: string
    startDate: Date | string
    endDate: Date | string
    brandTone: string
    publicationFrequency: JsonNullValueInput | InputJsonValue
    templateIds?: CampaignCreatetemplateIdsInput | string[]
    status?: $Enums.CampaignStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: PostUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignCreateOrConnectWithoutClientInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutClientInput, CampaignUncheckedCreateWithoutClientInput>
  }

  export type CampaignCreateManyClientInputEnvelope = {
    data: CampaignCreateManyClientInput | CampaignCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type BrandAssetCreateWithoutClientInput = {
    id?: string
    type: $Enums.AssetType
    name: string
    url: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type BrandAssetUncheckedCreateWithoutClientInput = {
    id?: string
    type: $Enums.AssetType
    name: string
    url: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type BrandAssetCreateOrConnectWithoutClientInput = {
    where: BrandAssetWhereUniqueInput
    create: XOR<BrandAssetCreateWithoutClientInput, BrandAssetUncheckedCreateWithoutClientInput>
  }

  export type BrandAssetCreateManyClientInputEnvelope = {
    data: BrandAssetCreateManyClientInput | BrandAssetCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type SocialAccountCreateWithoutClientInput = {
    id?: string
    platform: $Enums.SocialPlatform
    accountId: string
    accountName?: string | null
    accessToken: string
    refreshToken?: string | null
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    publications?: PublicationResultCreateNestedManyWithoutSocialAccountInput
  }

  export type SocialAccountUncheckedCreateWithoutClientInput = {
    id?: string
    platform: $Enums.SocialPlatform
    accountId: string
    accountName?: string | null
    accessToken: string
    refreshToken?: string | null
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    publications?: PublicationResultUncheckedCreateNestedManyWithoutSocialAccountInput
  }

  export type SocialAccountCreateOrConnectWithoutClientInput = {
    where: SocialAccountWhereUniqueInput
    create: XOR<SocialAccountCreateWithoutClientInput, SocialAccountUncheckedCreateWithoutClientInput>
  }

  export type SocialAccountCreateManyClientInputEnvelope = {
    data: SocialAccountCreateManyClientInput | SocialAccountCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type SocialMediaLinkCreateWithoutClientInput = {
    id?: string
    platform: string
    url: string
    username?: string | null
  }

  export type SocialMediaLinkUncheckedCreateWithoutClientInput = {
    id?: string
    platform: string
    url: string
    username?: string | null
  }

  export type SocialMediaLinkCreateOrConnectWithoutClientInput = {
    where: SocialMediaLinkWhereUniqueInput
    create: XOR<SocialMediaLinkCreateWithoutClientInput, SocialMediaLinkUncheckedCreateWithoutClientInput>
  }

  export type SocialMediaLinkCreateManyClientInputEnvelope = {
    data: SocialMediaLinkCreateManyClientInput | SocialMediaLinkCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type ApiKeyCreateWithoutClientInput = {
    id?: string
    name: string
    keyPrefix: string
    hashedKey: string
    permissions?: ApiKeyCreatepermissionsInput | string[]
    isActive?: boolean
    lastUsedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usage?: ApiKeyUsageCreateNestedManyWithoutApiKeyInput
  }

  export type ApiKeyUncheckedCreateWithoutClientInput = {
    id?: string
    name: string
    keyPrefix: string
    hashedKey: string
    permissions?: ApiKeyCreatepermissionsInput | string[]
    isActive?: boolean
    lastUsedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usage?: ApiKeyUsageUncheckedCreateNestedManyWithoutApiKeyInput
  }

  export type ApiKeyCreateOrConnectWithoutClientInput = {
    where: ApiKeyWhereUniqueInput
    create: XOR<ApiKeyCreateWithoutClientInput, ApiKeyUncheckedCreateWithoutClientInput>
  }

  export type ApiKeyCreateManyClientInputEnvelope = {
    data: ApiKeyCreateManyClientInput | ApiKeyCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type AgencyUpsertWithoutClientsInput = {
    update: XOR<AgencyUpdateWithoutClientsInput, AgencyUncheckedUpdateWithoutClientsInput>
    create: XOR<AgencyCreateWithoutClientsInput, AgencyUncheckedCreateWithoutClientsInput>
    where?: AgencyWhereInput
  }

  export type AgencyUpdateToOneWithWhereWithoutClientsInput = {
    where?: AgencyWhereInput
    data: XOR<AgencyUpdateWithoutClientsInput, AgencyUncheckedUpdateWithoutClientsInput>
  }

  export type AgencyUpdateWithoutClientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    tokenBalance?: IntFieldUpdateOperationsInput | number
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutAgencyNestedInput
    userInvitations?: UserInvitationUpdateManyWithoutAgencyNestedInput
    tokenTransactions?: TokenTransactionUpdateManyWithoutAgencyNestedInput
    auditLogs?: AuditLogUpdateManyWithoutAgencyNestedInput
  }

  export type AgencyUncheckedUpdateWithoutClientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    tokenBalance?: IntFieldUpdateOperationsInput | number
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutAgencyNestedInput
    userInvitations?: UserInvitationUncheckedUpdateManyWithoutAgencyNestedInput
    tokenTransactions?: TokenTransactionUncheckedUpdateManyWithoutAgencyNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutAgencyNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutAssignedClientsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutAssignedClientsInput, UserUncheckedUpdateWithoutAssignedClientsInput>
    create: XOR<UserCreateWithoutAssignedClientsInput, UserUncheckedCreateWithoutAssignedClientsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutAssignedClientsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutAssignedClientsInput, UserUncheckedUpdateWithoutAssignedClientsInput>
  }

  export type UserUpdateManyWithWhereWithoutAssignedClientsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutAssignedClientsInput>
  }

  export type CampaignUpsertWithWhereUniqueWithoutClientInput = {
    where: CampaignWhereUniqueInput
    update: XOR<CampaignUpdateWithoutClientInput, CampaignUncheckedUpdateWithoutClientInput>
    create: XOR<CampaignCreateWithoutClientInput, CampaignUncheckedCreateWithoutClientInput>
  }

  export type CampaignUpdateWithWhereUniqueWithoutClientInput = {
    where: CampaignWhereUniqueInput
    data: XOR<CampaignUpdateWithoutClientInput, CampaignUncheckedUpdateWithoutClientInput>
  }

  export type CampaignUpdateManyWithWhereWithoutClientInput = {
    where: CampaignScalarWhereInput
    data: XOR<CampaignUpdateManyMutationInput, CampaignUncheckedUpdateManyWithoutClientInput>
  }

  export type CampaignScalarWhereInput = {
    AND?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
    OR?: CampaignScalarWhereInput[]
    NOT?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
    id?: StringFilter<"Campaign"> | string
    clientId?: StringFilter<"Campaign"> | string
    name?: StringFilter<"Campaign"> | string
    objective?: StringFilter<"Campaign"> | string
    startDate?: DateTimeFilter<"Campaign"> | Date | string
    endDate?: DateTimeFilter<"Campaign"> | Date | string
    brandTone?: StringFilter<"Campaign"> | string
    publicationFrequency?: JsonFilter<"Campaign">
    templateIds?: StringNullableListFilter<"Campaign">
    status?: EnumCampaignStatusFilter<"Campaign"> | $Enums.CampaignStatus
    createdAt?: DateTimeFilter<"Campaign"> | Date | string
    updatedAt?: DateTimeFilter<"Campaign"> | Date | string
  }

  export type BrandAssetUpsertWithWhereUniqueWithoutClientInput = {
    where: BrandAssetWhereUniqueInput
    update: XOR<BrandAssetUpdateWithoutClientInput, BrandAssetUncheckedUpdateWithoutClientInput>
    create: XOR<BrandAssetCreateWithoutClientInput, BrandAssetUncheckedCreateWithoutClientInput>
  }

  export type BrandAssetUpdateWithWhereUniqueWithoutClientInput = {
    where: BrandAssetWhereUniqueInput
    data: XOR<BrandAssetUpdateWithoutClientInput, BrandAssetUncheckedUpdateWithoutClientInput>
  }

  export type BrandAssetUpdateManyWithWhereWithoutClientInput = {
    where: BrandAssetScalarWhereInput
    data: XOR<BrandAssetUpdateManyMutationInput, BrandAssetUncheckedUpdateManyWithoutClientInput>
  }

  export type BrandAssetScalarWhereInput = {
    AND?: BrandAssetScalarWhereInput | BrandAssetScalarWhereInput[]
    OR?: BrandAssetScalarWhereInput[]
    NOT?: BrandAssetScalarWhereInput | BrandAssetScalarWhereInput[]
    id?: StringFilter<"BrandAsset"> | string
    clientId?: StringFilter<"BrandAsset"> | string
    type?: EnumAssetTypeFilter<"BrandAsset"> | $Enums.AssetType
    name?: StringFilter<"BrandAsset"> | string
    url?: StringFilter<"BrandAsset"> | string
    metadata?: JsonNullableFilter<"BrandAsset">
    createdAt?: DateTimeFilter<"BrandAsset"> | Date | string
  }

  export type SocialAccountUpsertWithWhereUniqueWithoutClientInput = {
    where: SocialAccountWhereUniqueInput
    update: XOR<SocialAccountUpdateWithoutClientInput, SocialAccountUncheckedUpdateWithoutClientInput>
    create: XOR<SocialAccountCreateWithoutClientInput, SocialAccountUncheckedCreateWithoutClientInput>
  }

  export type SocialAccountUpdateWithWhereUniqueWithoutClientInput = {
    where: SocialAccountWhereUniqueInput
    data: XOR<SocialAccountUpdateWithoutClientInput, SocialAccountUncheckedUpdateWithoutClientInput>
  }

  export type SocialAccountUpdateManyWithWhereWithoutClientInput = {
    where: SocialAccountScalarWhereInput
    data: XOR<SocialAccountUpdateManyMutationInput, SocialAccountUncheckedUpdateManyWithoutClientInput>
  }

  export type SocialAccountScalarWhereInput = {
    AND?: SocialAccountScalarWhereInput | SocialAccountScalarWhereInput[]
    OR?: SocialAccountScalarWhereInput[]
    NOT?: SocialAccountScalarWhereInput | SocialAccountScalarWhereInput[]
    id?: StringFilter<"SocialAccount"> | string
    clientId?: StringFilter<"SocialAccount"> | string
    platform?: EnumSocialPlatformFilter<"SocialAccount"> | $Enums.SocialPlatform
    accountId?: StringFilter<"SocialAccount"> | string
    accountName?: StringNullableFilter<"SocialAccount"> | string | null
    accessToken?: StringFilter<"SocialAccount"> | string
    refreshToken?: StringNullableFilter<"SocialAccount"> | string | null
    expiresAt?: DateTimeNullableFilter<"SocialAccount"> | Date | string | null
    isActive?: BoolFilter<"SocialAccount"> | boolean
    createdAt?: DateTimeFilter<"SocialAccount"> | Date | string
    updatedAt?: DateTimeFilter<"SocialAccount"> | Date | string
  }

  export type SocialMediaLinkUpsertWithWhereUniqueWithoutClientInput = {
    where: SocialMediaLinkWhereUniqueInput
    update: XOR<SocialMediaLinkUpdateWithoutClientInput, SocialMediaLinkUncheckedUpdateWithoutClientInput>
    create: XOR<SocialMediaLinkCreateWithoutClientInput, SocialMediaLinkUncheckedCreateWithoutClientInput>
  }

  export type SocialMediaLinkUpdateWithWhereUniqueWithoutClientInput = {
    where: SocialMediaLinkWhereUniqueInput
    data: XOR<SocialMediaLinkUpdateWithoutClientInput, SocialMediaLinkUncheckedUpdateWithoutClientInput>
  }

  export type SocialMediaLinkUpdateManyWithWhereWithoutClientInput = {
    where: SocialMediaLinkScalarWhereInput
    data: XOR<SocialMediaLinkUpdateManyMutationInput, SocialMediaLinkUncheckedUpdateManyWithoutClientInput>
  }

  export type SocialMediaLinkScalarWhereInput = {
    AND?: SocialMediaLinkScalarWhereInput | SocialMediaLinkScalarWhereInput[]
    OR?: SocialMediaLinkScalarWhereInput[]
    NOT?: SocialMediaLinkScalarWhereInput | SocialMediaLinkScalarWhereInput[]
    id?: StringFilter<"SocialMediaLink"> | string
    clientId?: StringFilter<"SocialMediaLink"> | string
    platform?: StringFilter<"SocialMediaLink"> | string
    url?: StringFilter<"SocialMediaLink"> | string
    username?: StringNullableFilter<"SocialMediaLink"> | string | null
  }

  export type ApiKeyUpsertWithWhereUniqueWithoutClientInput = {
    where: ApiKeyWhereUniqueInput
    update: XOR<ApiKeyUpdateWithoutClientInput, ApiKeyUncheckedUpdateWithoutClientInput>
    create: XOR<ApiKeyCreateWithoutClientInput, ApiKeyUncheckedCreateWithoutClientInput>
  }

  export type ApiKeyUpdateWithWhereUniqueWithoutClientInput = {
    where: ApiKeyWhereUniqueInput
    data: XOR<ApiKeyUpdateWithoutClientInput, ApiKeyUncheckedUpdateWithoutClientInput>
  }

  export type ApiKeyUpdateManyWithWhereWithoutClientInput = {
    where: ApiKeyScalarWhereInput
    data: XOR<ApiKeyUpdateManyMutationInput, ApiKeyUncheckedUpdateManyWithoutClientInput>
  }

  export type ApiKeyScalarWhereInput = {
    AND?: ApiKeyScalarWhereInput | ApiKeyScalarWhereInput[]
    OR?: ApiKeyScalarWhereInput[]
    NOT?: ApiKeyScalarWhereInput | ApiKeyScalarWhereInput[]
    id?: StringFilter<"ApiKey"> | string
    name?: StringFilter<"ApiKey"> | string
    keyPrefix?: StringFilter<"ApiKey"> | string
    hashedKey?: StringFilter<"ApiKey"> | string
    clientId?: StringFilter<"ApiKey"> | string
    permissions?: StringNullableListFilter<"ApiKey">
    isActive?: BoolFilter<"ApiKey"> | boolean
    lastUsedAt?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
    createdAt?: DateTimeFilter<"ApiKey"> | Date | string
    updatedAt?: DateTimeFilter<"ApiKey"> | Date | string
  }

  export type ClientCreateWithoutSocialMediaLinksInput = {
    id?: string
    brandName: string
    brandColors?: ClientCreatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    logoUrl?: string | null
    whatsappNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutClientsInput
    assignedUsers?: UserCreateNestedManyWithoutAssignedClientsInput
    campaigns?: CampaignCreateNestedManyWithoutClientInput
    brandAssets?: BrandAssetCreateNestedManyWithoutClientInput
    socialAccounts?: SocialAccountCreateNestedManyWithoutClientInput
    apiKeys?: ApiKeyCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutSocialMediaLinksInput = {
    id?: string
    agencyId: string
    brandName: string
    brandColors?: ClientCreatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    logoUrl?: string | null
    whatsappNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedUsers?: UserUncheckedCreateNestedManyWithoutAssignedClientsInput
    campaigns?: CampaignUncheckedCreateNestedManyWithoutClientInput
    brandAssets?: BrandAssetUncheckedCreateNestedManyWithoutClientInput
    socialAccounts?: SocialAccountUncheckedCreateNestedManyWithoutClientInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutSocialMediaLinksInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutSocialMediaLinksInput, ClientUncheckedCreateWithoutSocialMediaLinksInput>
  }

  export type ClientUpsertWithoutSocialMediaLinksInput = {
    update: XOR<ClientUpdateWithoutSocialMediaLinksInput, ClientUncheckedUpdateWithoutSocialMediaLinksInput>
    create: XOR<ClientCreateWithoutSocialMediaLinksInput, ClientUncheckedCreateWithoutSocialMediaLinksInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutSocialMediaLinksInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutSocialMediaLinksInput, ClientUncheckedUpdateWithoutSocialMediaLinksInput>
  }

  export type ClientUpdateWithoutSocialMediaLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandColors?: ClientUpdatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    whatsappNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutClientsNestedInput
    assignedUsers?: UserUpdateManyWithoutAssignedClientsNestedInput
    campaigns?: CampaignUpdateManyWithoutClientNestedInput
    brandAssets?: BrandAssetUpdateManyWithoutClientNestedInput
    socialAccounts?: SocialAccountUpdateManyWithoutClientNestedInput
    apiKeys?: ApiKeyUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutSocialMediaLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandColors?: ClientUpdatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    whatsappNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedUsers?: UserUncheckedUpdateManyWithoutAssignedClientsNestedInput
    campaigns?: CampaignUncheckedUpdateManyWithoutClientNestedInput
    brandAssets?: BrandAssetUncheckedUpdateManyWithoutClientNestedInput
    socialAccounts?: SocialAccountUncheckedUpdateManyWithoutClientNestedInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientCreateWithoutBrandAssetsInput = {
    id?: string
    brandName: string
    brandColors?: ClientCreatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    logoUrl?: string | null
    whatsappNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutClientsInput
    assignedUsers?: UserCreateNestedManyWithoutAssignedClientsInput
    campaigns?: CampaignCreateNestedManyWithoutClientInput
    socialAccounts?: SocialAccountCreateNestedManyWithoutClientInput
    socialMediaLinks?: SocialMediaLinkCreateNestedManyWithoutClientInput
    apiKeys?: ApiKeyCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutBrandAssetsInput = {
    id?: string
    agencyId: string
    brandName: string
    brandColors?: ClientCreatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    logoUrl?: string | null
    whatsappNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedUsers?: UserUncheckedCreateNestedManyWithoutAssignedClientsInput
    campaigns?: CampaignUncheckedCreateNestedManyWithoutClientInput
    socialAccounts?: SocialAccountUncheckedCreateNestedManyWithoutClientInput
    socialMediaLinks?: SocialMediaLinkUncheckedCreateNestedManyWithoutClientInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutBrandAssetsInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutBrandAssetsInput, ClientUncheckedCreateWithoutBrandAssetsInput>
  }

  export type ClientUpsertWithoutBrandAssetsInput = {
    update: XOR<ClientUpdateWithoutBrandAssetsInput, ClientUncheckedUpdateWithoutBrandAssetsInput>
    create: XOR<ClientCreateWithoutBrandAssetsInput, ClientUncheckedCreateWithoutBrandAssetsInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutBrandAssetsInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutBrandAssetsInput, ClientUncheckedUpdateWithoutBrandAssetsInput>
  }

  export type ClientUpdateWithoutBrandAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandColors?: ClientUpdatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    whatsappNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutClientsNestedInput
    assignedUsers?: UserUpdateManyWithoutAssignedClientsNestedInput
    campaigns?: CampaignUpdateManyWithoutClientNestedInput
    socialAccounts?: SocialAccountUpdateManyWithoutClientNestedInput
    socialMediaLinks?: SocialMediaLinkUpdateManyWithoutClientNestedInput
    apiKeys?: ApiKeyUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutBrandAssetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandColors?: ClientUpdatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    whatsappNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedUsers?: UserUncheckedUpdateManyWithoutAssignedClientsNestedInput
    campaigns?: CampaignUncheckedUpdateManyWithoutClientNestedInput
    socialAccounts?: SocialAccountUncheckedUpdateManyWithoutClientNestedInput
    socialMediaLinks?: SocialMediaLinkUncheckedUpdateManyWithoutClientNestedInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientCreateWithoutCampaignsInput = {
    id?: string
    brandName: string
    brandColors?: ClientCreatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    logoUrl?: string | null
    whatsappNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutClientsInput
    assignedUsers?: UserCreateNestedManyWithoutAssignedClientsInput
    brandAssets?: BrandAssetCreateNestedManyWithoutClientInput
    socialAccounts?: SocialAccountCreateNestedManyWithoutClientInput
    socialMediaLinks?: SocialMediaLinkCreateNestedManyWithoutClientInput
    apiKeys?: ApiKeyCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutCampaignsInput = {
    id?: string
    agencyId: string
    brandName: string
    brandColors?: ClientCreatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    logoUrl?: string | null
    whatsappNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedUsers?: UserUncheckedCreateNestedManyWithoutAssignedClientsInput
    brandAssets?: BrandAssetUncheckedCreateNestedManyWithoutClientInput
    socialAccounts?: SocialAccountUncheckedCreateNestedManyWithoutClientInput
    socialMediaLinks?: SocialMediaLinkUncheckedCreateNestedManyWithoutClientInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutCampaignsInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutCampaignsInput, ClientUncheckedCreateWithoutCampaignsInput>
  }

  export type PostCreateWithoutCampaignInput = {
    id?: string
    scheduledDate: Date | string
    status?: $Enums.PostStatus
    finalImageUrl?: string | null
    embeddedText?: string | null
    publicationText?: string | null
    hashtags?: PostCreatehashtagsInput | string[]
    cta?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    generationJob?: ContentGenerationJobCreateNestedOneWithoutPostInput
    publicationResults?: PublicationResultCreateNestedManyWithoutPostInput
    contentVersions?: ContentVersionCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutCampaignInput = {
    id?: string
    scheduledDate: Date | string
    status?: $Enums.PostStatus
    finalImageUrl?: string | null
    embeddedText?: string | null
    publicationText?: string | null
    hashtags?: PostCreatehashtagsInput | string[]
    cta?: string | null
    generationJobId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    publicationResults?: PublicationResultUncheckedCreateNestedManyWithoutPostInput
    contentVersions?: ContentVersionUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutCampaignInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutCampaignInput, PostUncheckedCreateWithoutCampaignInput>
  }

  export type PostCreateManyCampaignInputEnvelope = {
    data: PostCreateManyCampaignInput | PostCreateManyCampaignInput[]
    skipDuplicates?: boolean
  }

  export type ClientUpsertWithoutCampaignsInput = {
    update: XOR<ClientUpdateWithoutCampaignsInput, ClientUncheckedUpdateWithoutCampaignsInput>
    create: XOR<ClientCreateWithoutCampaignsInput, ClientUncheckedCreateWithoutCampaignsInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutCampaignsInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutCampaignsInput, ClientUncheckedUpdateWithoutCampaignsInput>
  }

  export type ClientUpdateWithoutCampaignsInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandColors?: ClientUpdatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    whatsappNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutClientsNestedInput
    assignedUsers?: UserUpdateManyWithoutAssignedClientsNestedInput
    brandAssets?: BrandAssetUpdateManyWithoutClientNestedInput
    socialAccounts?: SocialAccountUpdateManyWithoutClientNestedInput
    socialMediaLinks?: SocialMediaLinkUpdateManyWithoutClientNestedInput
    apiKeys?: ApiKeyUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutCampaignsInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandColors?: ClientUpdatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    whatsappNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedUsers?: UserUncheckedUpdateManyWithoutAssignedClientsNestedInput
    brandAssets?: BrandAssetUncheckedUpdateManyWithoutClientNestedInput
    socialAccounts?: SocialAccountUncheckedUpdateManyWithoutClientNestedInput
    socialMediaLinks?: SocialMediaLinkUncheckedUpdateManyWithoutClientNestedInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutClientNestedInput
  }

  export type PostUpsertWithWhereUniqueWithoutCampaignInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutCampaignInput, PostUncheckedUpdateWithoutCampaignInput>
    create: XOR<PostCreateWithoutCampaignInput, PostUncheckedCreateWithoutCampaignInput>
  }

  export type PostUpdateWithWhereUniqueWithoutCampaignInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutCampaignInput, PostUncheckedUpdateWithoutCampaignInput>
  }

  export type PostUpdateManyWithWhereWithoutCampaignInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutCampaignInput>
  }

  export type PostScalarWhereInput = {
    AND?: PostScalarWhereInput | PostScalarWhereInput[]
    OR?: PostScalarWhereInput[]
    NOT?: PostScalarWhereInput | PostScalarWhereInput[]
    id?: StringFilter<"Post"> | string
    campaignId?: StringFilter<"Post"> | string
    scheduledDate?: DateTimeFilter<"Post"> | Date | string
    status?: EnumPostStatusFilter<"Post"> | $Enums.PostStatus
    finalImageUrl?: StringNullableFilter<"Post"> | string | null
    embeddedText?: StringNullableFilter<"Post"> | string | null
    publicationText?: StringNullableFilter<"Post"> | string | null
    hashtags?: StringNullableListFilter<"Post">
    cta?: StringNullableFilter<"Post"> | string | null
    generationJobId?: StringNullableFilter<"Post"> | string | null
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
  }

  export type CampaignCreateWithoutPostsInput = {
    id?: string
    name: string
    objective: string
    startDate: Date | string
    endDate: Date | string
    brandTone: string
    publicationFrequency: JsonNullValueInput | InputJsonValue
    templateIds?: CampaignCreatetemplateIdsInput | string[]
    status?: $Enums.CampaignStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutCampaignsInput
  }

  export type CampaignUncheckedCreateWithoutPostsInput = {
    id?: string
    clientId: string
    name: string
    objective: string
    startDate: Date | string
    endDate: Date | string
    brandTone: string
    publicationFrequency: JsonNullValueInput | InputJsonValue
    templateIds?: CampaignCreatetemplateIdsInput | string[]
    status?: $Enums.CampaignStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CampaignCreateOrConnectWithoutPostsInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutPostsInput, CampaignUncheckedCreateWithoutPostsInput>
  }

  export type ContentGenerationJobCreateWithoutPostInput = {
    id?: string
    postId?: string | null
    status?: $Enums.JobStatus
    tokensConsumed?: number
    brandContext: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    completedAt?: Date | string | null
    steps?: GenerationStepResultCreateNestedManyWithoutJobInput
  }

  export type ContentGenerationJobUncheckedCreateWithoutPostInput = {
    id?: string
    postId?: string | null
    status?: $Enums.JobStatus
    tokensConsumed?: number
    brandContext: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    completedAt?: Date | string | null
    steps?: GenerationStepResultUncheckedCreateNestedManyWithoutJobInput
  }

  export type ContentGenerationJobCreateOrConnectWithoutPostInput = {
    where: ContentGenerationJobWhereUniqueInput
    create: XOR<ContentGenerationJobCreateWithoutPostInput, ContentGenerationJobUncheckedCreateWithoutPostInput>
  }

  export type PublicationResultCreateWithoutPostInput = {
    id?: string
    platformPostId?: string | null
    status?: $Enums.PublicationStatus
    publishedAt?: Date | string | null
    error?: string | null
    createdAt?: Date | string
    socialAccount: SocialAccountCreateNestedOneWithoutPublicationsInput
  }

  export type PublicationResultUncheckedCreateWithoutPostInput = {
    id?: string
    socialAccountId: string
    platformPostId?: string | null
    status?: $Enums.PublicationStatus
    publishedAt?: Date | string | null
    error?: string | null
    createdAt?: Date | string
  }

  export type PublicationResultCreateOrConnectWithoutPostInput = {
    where: PublicationResultWhereUniqueInput
    create: XOR<PublicationResultCreateWithoutPostInput, PublicationResultUncheckedCreateWithoutPostInput>
  }

  export type PublicationResultCreateManyPostInputEnvelope = {
    data: PublicationResultCreateManyPostInput | PublicationResultCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type ContentVersionCreateWithoutPostInput = {
    id?: string
    versionNumber: number
    finalImageUrl?: string | null
    embeddedText?: string | null
    publicationText?: string | null
    hashtags?: ContentVersionCreatehashtagsInput | string[]
    cta?: string | null
    createdAt?: Date | string
  }

  export type ContentVersionUncheckedCreateWithoutPostInput = {
    id?: string
    versionNumber: number
    finalImageUrl?: string | null
    embeddedText?: string | null
    publicationText?: string | null
    hashtags?: ContentVersionCreatehashtagsInput | string[]
    cta?: string | null
    createdAt?: Date | string
  }

  export type ContentVersionCreateOrConnectWithoutPostInput = {
    where: ContentVersionWhereUniqueInput
    create: XOR<ContentVersionCreateWithoutPostInput, ContentVersionUncheckedCreateWithoutPostInput>
  }

  export type ContentVersionCreateManyPostInputEnvelope = {
    data: ContentVersionCreateManyPostInput | ContentVersionCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type CampaignUpsertWithoutPostsInput = {
    update: XOR<CampaignUpdateWithoutPostsInput, CampaignUncheckedUpdateWithoutPostsInput>
    create: XOR<CampaignCreateWithoutPostsInput, CampaignUncheckedCreateWithoutPostsInput>
    where?: CampaignWhereInput
  }

  export type CampaignUpdateToOneWithWhereWithoutPostsInput = {
    where?: CampaignWhereInput
    data: XOR<CampaignUpdateWithoutPostsInput, CampaignUncheckedUpdateWithoutPostsInput>
  }

  export type CampaignUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    objective?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    brandTone?: StringFieldUpdateOperationsInput | string
    publicationFrequency?: JsonNullValueInput | InputJsonValue
    templateIds?: CampaignUpdatetemplateIdsInput | string[]
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutCampaignsNestedInput
  }

  export type CampaignUncheckedUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    objective?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    brandTone?: StringFieldUpdateOperationsInput | string
    publicationFrequency?: JsonNullValueInput | InputJsonValue
    templateIds?: CampaignUpdatetemplateIdsInput | string[]
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContentGenerationJobUpsertWithoutPostInput = {
    update: XOR<ContentGenerationJobUpdateWithoutPostInput, ContentGenerationJobUncheckedUpdateWithoutPostInput>
    create: XOR<ContentGenerationJobCreateWithoutPostInput, ContentGenerationJobUncheckedCreateWithoutPostInput>
    where?: ContentGenerationJobWhereInput
  }

  export type ContentGenerationJobUpdateToOneWithWhereWithoutPostInput = {
    where?: ContentGenerationJobWhereInput
    data: XOR<ContentGenerationJobUpdateWithoutPostInput, ContentGenerationJobUncheckedUpdateWithoutPostInput>
  }

  export type ContentGenerationJobUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    tokensConsumed?: IntFieldUpdateOperationsInput | number
    brandContext?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    steps?: GenerationStepResultUpdateManyWithoutJobNestedInput
  }

  export type ContentGenerationJobUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    tokensConsumed?: IntFieldUpdateOperationsInput | number
    brandContext?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    steps?: GenerationStepResultUncheckedUpdateManyWithoutJobNestedInput
  }

  export type PublicationResultUpsertWithWhereUniqueWithoutPostInput = {
    where: PublicationResultWhereUniqueInput
    update: XOR<PublicationResultUpdateWithoutPostInput, PublicationResultUncheckedUpdateWithoutPostInput>
    create: XOR<PublicationResultCreateWithoutPostInput, PublicationResultUncheckedCreateWithoutPostInput>
  }

  export type PublicationResultUpdateWithWhereUniqueWithoutPostInput = {
    where: PublicationResultWhereUniqueInput
    data: XOR<PublicationResultUpdateWithoutPostInput, PublicationResultUncheckedUpdateWithoutPostInput>
  }

  export type PublicationResultUpdateManyWithWhereWithoutPostInput = {
    where: PublicationResultScalarWhereInput
    data: XOR<PublicationResultUpdateManyMutationInput, PublicationResultUncheckedUpdateManyWithoutPostInput>
  }

  export type PublicationResultScalarWhereInput = {
    AND?: PublicationResultScalarWhereInput | PublicationResultScalarWhereInput[]
    OR?: PublicationResultScalarWhereInput[]
    NOT?: PublicationResultScalarWhereInput | PublicationResultScalarWhereInput[]
    id?: StringFilter<"PublicationResult"> | string
    postId?: StringFilter<"PublicationResult"> | string
    socialAccountId?: StringFilter<"PublicationResult"> | string
    platformPostId?: StringNullableFilter<"PublicationResult"> | string | null
    status?: EnumPublicationStatusFilter<"PublicationResult"> | $Enums.PublicationStatus
    publishedAt?: DateTimeNullableFilter<"PublicationResult"> | Date | string | null
    error?: StringNullableFilter<"PublicationResult"> | string | null
    createdAt?: DateTimeFilter<"PublicationResult"> | Date | string
  }

  export type ContentVersionUpsertWithWhereUniqueWithoutPostInput = {
    where: ContentVersionWhereUniqueInput
    update: XOR<ContentVersionUpdateWithoutPostInput, ContentVersionUncheckedUpdateWithoutPostInput>
    create: XOR<ContentVersionCreateWithoutPostInput, ContentVersionUncheckedCreateWithoutPostInput>
  }

  export type ContentVersionUpdateWithWhereUniqueWithoutPostInput = {
    where: ContentVersionWhereUniqueInput
    data: XOR<ContentVersionUpdateWithoutPostInput, ContentVersionUncheckedUpdateWithoutPostInput>
  }

  export type ContentVersionUpdateManyWithWhereWithoutPostInput = {
    where: ContentVersionScalarWhereInput
    data: XOR<ContentVersionUpdateManyMutationInput, ContentVersionUncheckedUpdateManyWithoutPostInput>
  }

  export type ContentVersionScalarWhereInput = {
    AND?: ContentVersionScalarWhereInput | ContentVersionScalarWhereInput[]
    OR?: ContentVersionScalarWhereInput[]
    NOT?: ContentVersionScalarWhereInput | ContentVersionScalarWhereInput[]
    id?: StringFilter<"ContentVersion"> | string
    postId?: StringFilter<"ContentVersion"> | string
    versionNumber?: IntFilter<"ContentVersion"> | number
    finalImageUrl?: StringNullableFilter<"ContentVersion"> | string | null
    embeddedText?: StringNullableFilter<"ContentVersion"> | string | null
    publicationText?: StringNullableFilter<"ContentVersion"> | string | null
    hashtags?: StringNullableListFilter<"ContentVersion">
    cta?: StringNullableFilter<"ContentVersion"> | string | null
    createdAt?: DateTimeFilter<"ContentVersion"> | Date | string
  }

  export type PostCreateWithoutGenerationJobInput = {
    id?: string
    scheduledDate: Date | string
    status?: $Enums.PostStatus
    finalImageUrl?: string | null
    embeddedText?: string | null
    publicationText?: string | null
    hashtags?: PostCreatehashtagsInput | string[]
    cta?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    campaign: CampaignCreateNestedOneWithoutPostsInput
    publicationResults?: PublicationResultCreateNestedManyWithoutPostInput
    contentVersions?: ContentVersionCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutGenerationJobInput = {
    id?: string
    campaignId: string
    scheduledDate: Date | string
    status?: $Enums.PostStatus
    finalImageUrl?: string | null
    embeddedText?: string | null
    publicationText?: string | null
    hashtags?: PostCreatehashtagsInput | string[]
    cta?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    publicationResults?: PublicationResultUncheckedCreateNestedManyWithoutPostInput
    contentVersions?: ContentVersionUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutGenerationJobInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutGenerationJobInput, PostUncheckedCreateWithoutGenerationJobInput>
  }

  export type GenerationStepResultCreateWithoutJobInput = {
    id?: string
    step: $Enums.GenerationStep
    status?: $Enums.StepStatus
    input?: NullableJsonNullValueInput | InputJsonValue
    output?: NullableJsonNullValueInput | InputJsonValue
    tokensUsed?: number
    executedAt?: Date | string
    error?: string | null
  }

  export type GenerationStepResultUncheckedCreateWithoutJobInput = {
    id?: string
    step: $Enums.GenerationStep
    status?: $Enums.StepStatus
    input?: NullableJsonNullValueInput | InputJsonValue
    output?: NullableJsonNullValueInput | InputJsonValue
    tokensUsed?: number
    executedAt?: Date | string
    error?: string | null
  }

  export type GenerationStepResultCreateOrConnectWithoutJobInput = {
    where: GenerationStepResultWhereUniqueInput
    create: XOR<GenerationStepResultCreateWithoutJobInput, GenerationStepResultUncheckedCreateWithoutJobInput>
  }

  export type GenerationStepResultCreateManyJobInputEnvelope = {
    data: GenerationStepResultCreateManyJobInput | GenerationStepResultCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type PostUpsertWithoutGenerationJobInput = {
    update: XOR<PostUpdateWithoutGenerationJobInput, PostUncheckedUpdateWithoutGenerationJobInput>
    create: XOR<PostCreateWithoutGenerationJobInput, PostUncheckedCreateWithoutGenerationJobInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutGenerationJobInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutGenerationJobInput, PostUncheckedUpdateWithoutGenerationJobInput>
  }

  export type PostUpdateWithoutGenerationJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    finalImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    embeddedText?: NullableStringFieldUpdateOperationsInput | string | null
    publicationText?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: PostUpdatehashtagsInput | string[]
    cta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUpdateOneRequiredWithoutPostsNestedInput
    publicationResults?: PublicationResultUpdateManyWithoutPostNestedInput
    contentVersions?: ContentVersionUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutGenerationJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    campaignId?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    finalImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    embeddedText?: NullableStringFieldUpdateOperationsInput | string | null
    publicationText?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: PostUpdatehashtagsInput | string[]
    cta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publicationResults?: PublicationResultUncheckedUpdateManyWithoutPostNestedInput
    contentVersions?: ContentVersionUncheckedUpdateManyWithoutPostNestedInput
  }

  export type GenerationStepResultUpsertWithWhereUniqueWithoutJobInput = {
    where: GenerationStepResultWhereUniqueInput
    update: XOR<GenerationStepResultUpdateWithoutJobInput, GenerationStepResultUncheckedUpdateWithoutJobInput>
    create: XOR<GenerationStepResultCreateWithoutJobInput, GenerationStepResultUncheckedCreateWithoutJobInput>
  }

  export type GenerationStepResultUpdateWithWhereUniqueWithoutJobInput = {
    where: GenerationStepResultWhereUniqueInput
    data: XOR<GenerationStepResultUpdateWithoutJobInput, GenerationStepResultUncheckedUpdateWithoutJobInput>
  }

  export type GenerationStepResultUpdateManyWithWhereWithoutJobInput = {
    where: GenerationStepResultScalarWhereInput
    data: XOR<GenerationStepResultUpdateManyMutationInput, GenerationStepResultUncheckedUpdateManyWithoutJobInput>
  }

  export type GenerationStepResultScalarWhereInput = {
    AND?: GenerationStepResultScalarWhereInput | GenerationStepResultScalarWhereInput[]
    OR?: GenerationStepResultScalarWhereInput[]
    NOT?: GenerationStepResultScalarWhereInput | GenerationStepResultScalarWhereInput[]
    id?: StringFilter<"GenerationStepResult"> | string
    jobId?: StringFilter<"GenerationStepResult"> | string
    step?: EnumGenerationStepFilter<"GenerationStepResult"> | $Enums.GenerationStep
    status?: EnumStepStatusFilter<"GenerationStepResult"> | $Enums.StepStatus
    input?: JsonNullableFilter<"GenerationStepResult">
    output?: JsonNullableFilter<"GenerationStepResult">
    tokensUsed?: IntFilter<"GenerationStepResult"> | number
    executedAt?: DateTimeFilter<"GenerationStepResult"> | Date | string
    error?: StringNullableFilter<"GenerationStepResult"> | string | null
  }

  export type ContentGenerationJobCreateWithoutStepsInput = {
    id?: string
    postId?: string | null
    status?: $Enums.JobStatus
    tokensConsumed?: number
    brandContext: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    completedAt?: Date | string | null
    post?: PostCreateNestedOneWithoutGenerationJobInput
  }

  export type ContentGenerationJobUncheckedCreateWithoutStepsInput = {
    id?: string
    postId?: string | null
    status?: $Enums.JobStatus
    tokensConsumed?: number
    brandContext: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    completedAt?: Date | string | null
    post?: PostUncheckedCreateNestedOneWithoutGenerationJobInput
  }

  export type ContentGenerationJobCreateOrConnectWithoutStepsInput = {
    where: ContentGenerationJobWhereUniqueInput
    create: XOR<ContentGenerationJobCreateWithoutStepsInput, ContentGenerationJobUncheckedCreateWithoutStepsInput>
  }

  export type ContentGenerationJobUpsertWithoutStepsInput = {
    update: XOR<ContentGenerationJobUpdateWithoutStepsInput, ContentGenerationJobUncheckedUpdateWithoutStepsInput>
    create: XOR<ContentGenerationJobCreateWithoutStepsInput, ContentGenerationJobUncheckedCreateWithoutStepsInput>
    where?: ContentGenerationJobWhereInput
  }

  export type ContentGenerationJobUpdateToOneWithWhereWithoutStepsInput = {
    where?: ContentGenerationJobWhereInput
    data: XOR<ContentGenerationJobUpdateWithoutStepsInput, ContentGenerationJobUncheckedUpdateWithoutStepsInput>
  }

  export type ContentGenerationJobUpdateWithoutStepsInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    tokensConsumed?: IntFieldUpdateOperationsInput | number
    brandContext?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    post?: PostUpdateOneWithoutGenerationJobNestedInput
  }

  export type ContentGenerationJobUncheckedUpdateWithoutStepsInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    tokensConsumed?: IntFieldUpdateOperationsInput | number
    brandContext?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    post?: PostUncheckedUpdateOneWithoutGenerationJobNestedInput
  }

  export type PostCreateWithoutContentVersionsInput = {
    id?: string
    scheduledDate: Date | string
    status?: $Enums.PostStatus
    finalImageUrl?: string | null
    embeddedText?: string | null
    publicationText?: string | null
    hashtags?: PostCreatehashtagsInput | string[]
    cta?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    campaign: CampaignCreateNestedOneWithoutPostsInput
    generationJob?: ContentGenerationJobCreateNestedOneWithoutPostInput
    publicationResults?: PublicationResultCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutContentVersionsInput = {
    id?: string
    campaignId: string
    scheduledDate: Date | string
    status?: $Enums.PostStatus
    finalImageUrl?: string | null
    embeddedText?: string | null
    publicationText?: string | null
    hashtags?: PostCreatehashtagsInput | string[]
    cta?: string | null
    generationJobId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    publicationResults?: PublicationResultUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutContentVersionsInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutContentVersionsInput, PostUncheckedCreateWithoutContentVersionsInput>
  }

  export type PostUpsertWithoutContentVersionsInput = {
    update: XOR<PostUpdateWithoutContentVersionsInput, PostUncheckedUpdateWithoutContentVersionsInput>
    create: XOR<PostCreateWithoutContentVersionsInput, PostUncheckedCreateWithoutContentVersionsInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutContentVersionsInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutContentVersionsInput, PostUncheckedUpdateWithoutContentVersionsInput>
  }

  export type PostUpdateWithoutContentVersionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    finalImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    embeddedText?: NullableStringFieldUpdateOperationsInput | string | null
    publicationText?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: PostUpdatehashtagsInput | string[]
    cta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUpdateOneRequiredWithoutPostsNestedInput
    generationJob?: ContentGenerationJobUpdateOneWithoutPostNestedInput
    publicationResults?: PublicationResultUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutContentVersionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    campaignId?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    finalImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    embeddedText?: NullableStringFieldUpdateOperationsInput | string | null
    publicationText?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: PostUpdatehashtagsInput | string[]
    cta?: NullableStringFieldUpdateOperationsInput | string | null
    generationJobId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publicationResults?: PublicationResultUncheckedUpdateManyWithoutPostNestedInput
  }

  export type ClientCreateWithoutSocialAccountsInput = {
    id?: string
    brandName: string
    brandColors?: ClientCreatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    logoUrl?: string | null
    whatsappNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutClientsInput
    assignedUsers?: UserCreateNestedManyWithoutAssignedClientsInput
    campaigns?: CampaignCreateNestedManyWithoutClientInput
    brandAssets?: BrandAssetCreateNestedManyWithoutClientInput
    socialMediaLinks?: SocialMediaLinkCreateNestedManyWithoutClientInput
    apiKeys?: ApiKeyCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutSocialAccountsInput = {
    id?: string
    agencyId: string
    brandName: string
    brandColors?: ClientCreatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    logoUrl?: string | null
    whatsappNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedUsers?: UserUncheckedCreateNestedManyWithoutAssignedClientsInput
    campaigns?: CampaignUncheckedCreateNestedManyWithoutClientInput
    brandAssets?: BrandAssetUncheckedCreateNestedManyWithoutClientInput
    socialMediaLinks?: SocialMediaLinkUncheckedCreateNestedManyWithoutClientInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutSocialAccountsInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutSocialAccountsInput, ClientUncheckedCreateWithoutSocialAccountsInput>
  }

  export type PublicationResultCreateWithoutSocialAccountInput = {
    id?: string
    platformPostId?: string | null
    status?: $Enums.PublicationStatus
    publishedAt?: Date | string | null
    error?: string | null
    createdAt?: Date | string
    post: PostCreateNestedOneWithoutPublicationResultsInput
  }

  export type PublicationResultUncheckedCreateWithoutSocialAccountInput = {
    id?: string
    postId: string
    platformPostId?: string | null
    status?: $Enums.PublicationStatus
    publishedAt?: Date | string | null
    error?: string | null
    createdAt?: Date | string
  }

  export type PublicationResultCreateOrConnectWithoutSocialAccountInput = {
    where: PublicationResultWhereUniqueInput
    create: XOR<PublicationResultCreateWithoutSocialAccountInput, PublicationResultUncheckedCreateWithoutSocialAccountInput>
  }

  export type PublicationResultCreateManySocialAccountInputEnvelope = {
    data: PublicationResultCreateManySocialAccountInput | PublicationResultCreateManySocialAccountInput[]
    skipDuplicates?: boolean
  }

  export type ClientUpsertWithoutSocialAccountsInput = {
    update: XOR<ClientUpdateWithoutSocialAccountsInput, ClientUncheckedUpdateWithoutSocialAccountsInput>
    create: XOR<ClientCreateWithoutSocialAccountsInput, ClientUncheckedCreateWithoutSocialAccountsInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutSocialAccountsInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutSocialAccountsInput, ClientUncheckedUpdateWithoutSocialAccountsInput>
  }

  export type ClientUpdateWithoutSocialAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandColors?: ClientUpdatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    whatsappNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutClientsNestedInput
    assignedUsers?: UserUpdateManyWithoutAssignedClientsNestedInput
    campaigns?: CampaignUpdateManyWithoutClientNestedInput
    brandAssets?: BrandAssetUpdateManyWithoutClientNestedInput
    socialMediaLinks?: SocialMediaLinkUpdateManyWithoutClientNestedInput
    apiKeys?: ApiKeyUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutSocialAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandColors?: ClientUpdatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    whatsappNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedUsers?: UserUncheckedUpdateManyWithoutAssignedClientsNestedInput
    campaigns?: CampaignUncheckedUpdateManyWithoutClientNestedInput
    brandAssets?: BrandAssetUncheckedUpdateManyWithoutClientNestedInput
    socialMediaLinks?: SocialMediaLinkUncheckedUpdateManyWithoutClientNestedInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutClientNestedInput
  }

  export type PublicationResultUpsertWithWhereUniqueWithoutSocialAccountInput = {
    where: PublicationResultWhereUniqueInput
    update: XOR<PublicationResultUpdateWithoutSocialAccountInput, PublicationResultUncheckedUpdateWithoutSocialAccountInput>
    create: XOR<PublicationResultCreateWithoutSocialAccountInput, PublicationResultUncheckedCreateWithoutSocialAccountInput>
  }

  export type PublicationResultUpdateWithWhereUniqueWithoutSocialAccountInput = {
    where: PublicationResultWhereUniqueInput
    data: XOR<PublicationResultUpdateWithoutSocialAccountInput, PublicationResultUncheckedUpdateWithoutSocialAccountInput>
  }

  export type PublicationResultUpdateManyWithWhereWithoutSocialAccountInput = {
    where: PublicationResultScalarWhereInput
    data: XOR<PublicationResultUpdateManyMutationInput, PublicationResultUncheckedUpdateManyWithoutSocialAccountInput>
  }

  export type PostCreateWithoutPublicationResultsInput = {
    id?: string
    scheduledDate: Date | string
    status?: $Enums.PostStatus
    finalImageUrl?: string | null
    embeddedText?: string | null
    publicationText?: string | null
    hashtags?: PostCreatehashtagsInput | string[]
    cta?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    campaign: CampaignCreateNestedOneWithoutPostsInput
    generationJob?: ContentGenerationJobCreateNestedOneWithoutPostInput
    contentVersions?: ContentVersionCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutPublicationResultsInput = {
    id?: string
    campaignId: string
    scheduledDate: Date | string
    status?: $Enums.PostStatus
    finalImageUrl?: string | null
    embeddedText?: string | null
    publicationText?: string | null
    hashtags?: PostCreatehashtagsInput | string[]
    cta?: string | null
    generationJobId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contentVersions?: ContentVersionUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutPublicationResultsInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutPublicationResultsInput, PostUncheckedCreateWithoutPublicationResultsInput>
  }

  export type SocialAccountCreateWithoutPublicationsInput = {
    id?: string
    platform: $Enums.SocialPlatform
    accountId: string
    accountName?: string | null
    accessToken: string
    refreshToken?: string | null
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutSocialAccountsInput
  }

  export type SocialAccountUncheckedCreateWithoutPublicationsInput = {
    id?: string
    clientId: string
    platform: $Enums.SocialPlatform
    accountId: string
    accountName?: string | null
    accessToken: string
    refreshToken?: string | null
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SocialAccountCreateOrConnectWithoutPublicationsInput = {
    where: SocialAccountWhereUniqueInput
    create: XOR<SocialAccountCreateWithoutPublicationsInput, SocialAccountUncheckedCreateWithoutPublicationsInput>
  }

  export type PostUpsertWithoutPublicationResultsInput = {
    update: XOR<PostUpdateWithoutPublicationResultsInput, PostUncheckedUpdateWithoutPublicationResultsInput>
    create: XOR<PostCreateWithoutPublicationResultsInput, PostUncheckedCreateWithoutPublicationResultsInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutPublicationResultsInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutPublicationResultsInput, PostUncheckedUpdateWithoutPublicationResultsInput>
  }

  export type PostUpdateWithoutPublicationResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    finalImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    embeddedText?: NullableStringFieldUpdateOperationsInput | string | null
    publicationText?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: PostUpdatehashtagsInput | string[]
    cta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaign?: CampaignUpdateOneRequiredWithoutPostsNestedInput
    generationJob?: ContentGenerationJobUpdateOneWithoutPostNestedInput
    contentVersions?: ContentVersionUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutPublicationResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    campaignId?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    finalImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    embeddedText?: NullableStringFieldUpdateOperationsInput | string | null
    publicationText?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: PostUpdatehashtagsInput | string[]
    cta?: NullableStringFieldUpdateOperationsInput | string | null
    generationJobId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contentVersions?: ContentVersionUncheckedUpdateManyWithoutPostNestedInput
  }

  export type SocialAccountUpsertWithoutPublicationsInput = {
    update: XOR<SocialAccountUpdateWithoutPublicationsInput, SocialAccountUncheckedUpdateWithoutPublicationsInput>
    create: XOR<SocialAccountCreateWithoutPublicationsInput, SocialAccountUncheckedCreateWithoutPublicationsInput>
    where?: SocialAccountWhereInput
  }

  export type SocialAccountUpdateToOneWithWhereWithoutPublicationsInput = {
    where?: SocialAccountWhereInput
    data: XOR<SocialAccountUpdateWithoutPublicationsInput, SocialAccountUncheckedUpdateWithoutPublicationsInput>
  }

  export type SocialAccountUpdateWithoutPublicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: EnumSocialPlatformFieldUpdateOperationsInput | $Enums.SocialPlatform
    accountId?: StringFieldUpdateOperationsInput | string
    accountName?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutSocialAccountsNestedInput
  }

  export type SocialAccountUncheckedUpdateWithoutPublicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    platform?: EnumSocialPlatformFieldUpdateOperationsInput | $Enums.SocialPlatform
    accountId?: StringFieldUpdateOperationsInput | string
    accountName?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgencyCreateWithoutTokenTransactionsInput = {
    id?: string
    name: string
    subscriptionPlan?: $Enums.SubscriptionPlan
    tokenBalance?: number
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutAgencyInput
    clients?: ClientCreateNestedManyWithoutAgencyInput
    userInvitations?: UserInvitationCreateNestedManyWithoutAgencyInput
    auditLogs?: AuditLogCreateNestedManyWithoutAgencyInput
  }

  export type AgencyUncheckedCreateWithoutTokenTransactionsInput = {
    id?: string
    name: string
    subscriptionPlan?: $Enums.SubscriptionPlan
    tokenBalance?: number
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutAgencyInput
    clients?: ClientUncheckedCreateNestedManyWithoutAgencyInput
    userInvitations?: UserInvitationUncheckedCreateNestedManyWithoutAgencyInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutAgencyInput
  }

  export type AgencyCreateOrConnectWithoutTokenTransactionsInput = {
    where: AgencyWhereUniqueInput
    create: XOR<AgencyCreateWithoutTokenTransactionsInput, AgencyUncheckedCreateWithoutTokenTransactionsInput>
  }

  export type UserCreateWithoutTokenTransactionsInput = {
    id?: string
    email: string
    name: string
    password?: string | null
    role: $Enums.UserRole
    emailVerified?: Date | string | null
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutUsersInput
    assignedClients?: ClientCreateNestedManyWithoutAssignedUsersInput
    invitationsSent?: UserInvitationCreateNestedManyWithoutSenderInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTokenTransactionsInput = {
    id?: string
    email: string
    name: string
    password?: string | null
    role: $Enums.UserRole
    emailVerified?: Date | string | null
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    agencyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedClients?: ClientUncheckedCreateNestedManyWithoutAssignedUsersInput
    invitationsSent?: UserInvitationUncheckedCreateNestedManyWithoutSenderInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTokenTransactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTokenTransactionsInput, UserUncheckedCreateWithoutTokenTransactionsInput>
  }

  export type AgencyUpsertWithoutTokenTransactionsInput = {
    update: XOR<AgencyUpdateWithoutTokenTransactionsInput, AgencyUncheckedUpdateWithoutTokenTransactionsInput>
    create: XOR<AgencyCreateWithoutTokenTransactionsInput, AgencyUncheckedCreateWithoutTokenTransactionsInput>
    where?: AgencyWhereInput
  }

  export type AgencyUpdateToOneWithWhereWithoutTokenTransactionsInput = {
    where?: AgencyWhereInput
    data: XOR<AgencyUpdateWithoutTokenTransactionsInput, AgencyUncheckedUpdateWithoutTokenTransactionsInput>
  }

  export type AgencyUpdateWithoutTokenTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    tokenBalance?: IntFieldUpdateOperationsInput | number
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutAgencyNestedInput
    clients?: ClientUpdateManyWithoutAgencyNestedInput
    userInvitations?: UserInvitationUpdateManyWithoutAgencyNestedInput
    auditLogs?: AuditLogUpdateManyWithoutAgencyNestedInput
  }

  export type AgencyUncheckedUpdateWithoutTokenTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    tokenBalance?: IntFieldUpdateOperationsInput | number
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutAgencyNestedInput
    clients?: ClientUncheckedUpdateManyWithoutAgencyNestedInput
    userInvitations?: UserInvitationUncheckedUpdateManyWithoutAgencyNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutAgencyNestedInput
  }

  export type UserUpsertWithoutTokenTransactionsInput = {
    update: XOR<UserUpdateWithoutTokenTransactionsInput, UserUncheckedUpdateWithoutTokenTransactionsInput>
    create: XOR<UserCreateWithoutTokenTransactionsInput, UserUncheckedCreateWithoutTokenTransactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTokenTransactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTokenTransactionsInput, UserUncheckedUpdateWithoutTokenTransactionsInput>
  }

  export type UserUpdateWithoutTokenTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutUsersNestedInput
    assignedClients?: ClientUpdateManyWithoutAssignedUsersNestedInput
    invitationsSent?: UserInvitationUpdateManyWithoutSenderNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTokenTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedClients?: ClientUncheckedUpdateManyWithoutAssignedUsersNestedInput
    invitationsSent?: UserInvitationUncheckedUpdateManyWithoutSenderNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AgencyCreateWithoutAuditLogsInput = {
    id?: string
    name: string
    subscriptionPlan?: $Enums.SubscriptionPlan
    tokenBalance?: number
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutAgencyInput
    clients?: ClientCreateNestedManyWithoutAgencyInput
    userInvitations?: UserInvitationCreateNestedManyWithoutAgencyInput
    tokenTransactions?: TokenTransactionCreateNestedManyWithoutAgencyInput
  }

  export type AgencyUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    name: string
    subscriptionPlan?: $Enums.SubscriptionPlan
    tokenBalance?: number
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutAgencyInput
    clients?: ClientUncheckedCreateNestedManyWithoutAgencyInput
    userInvitations?: UserInvitationUncheckedCreateNestedManyWithoutAgencyInput
    tokenTransactions?: TokenTransactionUncheckedCreateNestedManyWithoutAgencyInput
  }

  export type AgencyCreateOrConnectWithoutAuditLogsInput = {
    where: AgencyWhereUniqueInput
    create: XOR<AgencyCreateWithoutAuditLogsInput, AgencyUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    name: string
    password?: string | null
    role: $Enums.UserRole
    emailVerified?: Date | string | null
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutUsersInput
    assignedClients?: ClientCreateNestedManyWithoutAssignedUsersInput
    invitationsSent?: UserInvitationCreateNestedManyWithoutSenderInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    tokenTransactions?: TokenTransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    name: string
    password?: string | null
    role: $Enums.UserRole
    emailVerified?: Date | string | null
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    agencyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedClients?: ClientUncheckedCreateNestedManyWithoutAssignedUsersInput
    invitationsSent?: UserInvitationUncheckedCreateNestedManyWithoutSenderInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    tokenTransactions?: TokenTransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type AgencyUpsertWithoutAuditLogsInput = {
    update: XOR<AgencyUpdateWithoutAuditLogsInput, AgencyUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<AgencyCreateWithoutAuditLogsInput, AgencyUncheckedCreateWithoutAuditLogsInput>
    where?: AgencyWhereInput
  }

  export type AgencyUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: AgencyWhereInput
    data: XOR<AgencyUpdateWithoutAuditLogsInput, AgencyUncheckedUpdateWithoutAuditLogsInput>
  }

  export type AgencyUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    tokenBalance?: IntFieldUpdateOperationsInput | number
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutAgencyNestedInput
    clients?: ClientUpdateManyWithoutAgencyNestedInput
    userInvitations?: UserInvitationUpdateManyWithoutAgencyNestedInput
    tokenTransactions?: TokenTransactionUpdateManyWithoutAgencyNestedInput
  }

  export type AgencyUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subscriptionPlan?: EnumSubscriptionPlanFieldUpdateOperationsInput | $Enums.SubscriptionPlan
    tokenBalance?: IntFieldUpdateOperationsInput | number
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutAgencyNestedInput
    clients?: ClientUncheckedUpdateManyWithoutAgencyNestedInput
    userInvitations?: UserInvitationUncheckedUpdateManyWithoutAgencyNestedInput
    tokenTransactions?: TokenTransactionUncheckedUpdateManyWithoutAgencyNestedInput
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutUsersNestedInput
    assignedClients?: ClientUpdateManyWithoutAssignedUsersNestedInput
    invitationsSent?: UserInvitationUpdateManyWithoutSenderNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    tokenTransactions?: TokenTransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedClients?: ClientUncheckedUpdateManyWithoutAssignedUsersNestedInput
    invitationsSent?: UserInvitationUncheckedUpdateManyWithoutSenderNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    tokenTransactions?: TokenTransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ClientCreateWithoutApiKeysInput = {
    id?: string
    brandName: string
    brandColors?: ClientCreatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    logoUrl?: string | null
    whatsappNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutClientsInput
    assignedUsers?: UserCreateNestedManyWithoutAssignedClientsInput
    campaigns?: CampaignCreateNestedManyWithoutClientInput
    brandAssets?: BrandAssetCreateNestedManyWithoutClientInput
    socialAccounts?: SocialAccountCreateNestedManyWithoutClientInput
    socialMediaLinks?: SocialMediaLinkCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutApiKeysInput = {
    id?: string
    agencyId: string
    brandName: string
    brandColors?: ClientCreatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    logoUrl?: string | null
    whatsappNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedUsers?: UserUncheckedCreateNestedManyWithoutAssignedClientsInput
    campaigns?: CampaignUncheckedCreateNestedManyWithoutClientInput
    brandAssets?: BrandAssetUncheckedCreateNestedManyWithoutClientInput
    socialAccounts?: SocialAccountUncheckedCreateNestedManyWithoutClientInput
    socialMediaLinks?: SocialMediaLinkUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutApiKeysInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutApiKeysInput, ClientUncheckedCreateWithoutApiKeysInput>
  }

  export type ApiKeyUsageCreateWithoutApiKeyInput = {
    id?: string
    endpoint: string
    method: string
    statusCode: number
    tokensConsumed?: number | null
    ipAddress?: string | null
    userAgent?: string | null
    requestBody?: NullableJsonNullValueInput | InputJsonValue
    responseTime?: number | null
    createdAt?: Date | string
  }

  export type ApiKeyUsageUncheckedCreateWithoutApiKeyInput = {
    id?: string
    endpoint: string
    method: string
    statusCode: number
    tokensConsumed?: number | null
    ipAddress?: string | null
    userAgent?: string | null
    requestBody?: NullableJsonNullValueInput | InputJsonValue
    responseTime?: number | null
    createdAt?: Date | string
  }

  export type ApiKeyUsageCreateOrConnectWithoutApiKeyInput = {
    where: ApiKeyUsageWhereUniqueInput
    create: XOR<ApiKeyUsageCreateWithoutApiKeyInput, ApiKeyUsageUncheckedCreateWithoutApiKeyInput>
  }

  export type ApiKeyUsageCreateManyApiKeyInputEnvelope = {
    data: ApiKeyUsageCreateManyApiKeyInput | ApiKeyUsageCreateManyApiKeyInput[]
    skipDuplicates?: boolean
  }

  export type ClientUpsertWithoutApiKeysInput = {
    update: XOR<ClientUpdateWithoutApiKeysInput, ClientUncheckedUpdateWithoutApiKeysInput>
    create: XOR<ClientCreateWithoutApiKeysInput, ClientUncheckedCreateWithoutApiKeysInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutApiKeysInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutApiKeysInput, ClientUncheckedUpdateWithoutApiKeysInput>
  }

  export type ClientUpdateWithoutApiKeysInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandColors?: ClientUpdatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    whatsappNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutClientsNestedInput
    assignedUsers?: UserUpdateManyWithoutAssignedClientsNestedInput
    campaigns?: CampaignUpdateManyWithoutClientNestedInput
    brandAssets?: BrandAssetUpdateManyWithoutClientNestedInput
    socialAccounts?: SocialAccountUpdateManyWithoutClientNestedInput
    socialMediaLinks?: SocialMediaLinkUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutApiKeysInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandColors?: ClientUpdatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    whatsappNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedUsers?: UserUncheckedUpdateManyWithoutAssignedClientsNestedInput
    campaigns?: CampaignUncheckedUpdateManyWithoutClientNestedInput
    brandAssets?: BrandAssetUncheckedUpdateManyWithoutClientNestedInput
    socialAccounts?: SocialAccountUncheckedUpdateManyWithoutClientNestedInput
    socialMediaLinks?: SocialMediaLinkUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ApiKeyUsageUpsertWithWhereUniqueWithoutApiKeyInput = {
    where: ApiKeyUsageWhereUniqueInput
    update: XOR<ApiKeyUsageUpdateWithoutApiKeyInput, ApiKeyUsageUncheckedUpdateWithoutApiKeyInput>
    create: XOR<ApiKeyUsageCreateWithoutApiKeyInput, ApiKeyUsageUncheckedCreateWithoutApiKeyInput>
  }

  export type ApiKeyUsageUpdateWithWhereUniqueWithoutApiKeyInput = {
    where: ApiKeyUsageWhereUniqueInput
    data: XOR<ApiKeyUsageUpdateWithoutApiKeyInput, ApiKeyUsageUncheckedUpdateWithoutApiKeyInput>
  }

  export type ApiKeyUsageUpdateManyWithWhereWithoutApiKeyInput = {
    where: ApiKeyUsageScalarWhereInput
    data: XOR<ApiKeyUsageUpdateManyMutationInput, ApiKeyUsageUncheckedUpdateManyWithoutApiKeyInput>
  }

  export type ApiKeyUsageScalarWhereInput = {
    AND?: ApiKeyUsageScalarWhereInput | ApiKeyUsageScalarWhereInput[]
    OR?: ApiKeyUsageScalarWhereInput[]
    NOT?: ApiKeyUsageScalarWhereInput | ApiKeyUsageScalarWhereInput[]
    id?: StringFilter<"ApiKeyUsage"> | string
    apiKeyId?: StringFilter<"ApiKeyUsage"> | string
    endpoint?: StringFilter<"ApiKeyUsage"> | string
    method?: StringFilter<"ApiKeyUsage"> | string
    statusCode?: IntFilter<"ApiKeyUsage"> | number
    tokensConsumed?: IntNullableFilter<"ApiKeyUsage"> | number | null
    ipAddress?: StringNullableFilter<"ApiKeyUsage"> | string | null
    userAgent?: StringNullableFilter<"ApiKeyUsage"> | string | null
    requestBody?: JsonNullableFilter<"ApiKeyUsage">
    responseTime?: IntNullableFilter<"ApiKeyUsage"> | number | null
    createdAt?: DateTimeFilter<"ApiKeyUsage"> | Date | string
  }

  export type ApiKeyCreateWithoutUsageInput = {
    id?: string
    name: string
    keyPrefix: string
    hashedKey: string
    permissions?: ApiKeyCreatepermissionsInput | string[]
    isActive?: boolean
    lastUsedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutApiKeysInput
  }

  export type ApiKeyUncheckedCreateWithoutUsageInput = {
    id?: string
    name: string
    keyPrefix: string
    hashedKey: string
    clientId: string
    permissions?: ApiKeyCreatepermissionsInput | string[]
    isActive?: boolean
    lastUsedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApiKeyCreateOrConnectWithoutUsageInput = {
    where: ApiKeyWhereUniqueInput
    create: XOR<ApiKeyCreateWithoutUsageInput, ApiKeyUncheckedCreateWithoutUsageInput>
  }

  export type ApiKeyUpsertWithoutUsageInput = {
    update: XOR<ApiKeyUpdateWithoutUsageInput, ApiKeyUncheckedUpdateWithoutUsageInput>
    create: XOR<ApiKeyCreateWithoutUsageInput, ApiKeyUncheckedCreateWithoutUsageInput>
    where?: ApiKeyWhereInput
  }

  export type ApiKeyUpdateToOneWithWhereWithoutUsageInput = {
    where?: ApiKeyWhereInput
    data: XOR<ApiKeyUpdateWithoutUsageInput, ApiKeyUncheckedUpdateWithoutUsageInput>
  }

  export type ApiKeyUpdateWithoutUsageInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    keyPrefix?: StringFieldUpdateOperationsInput | string
    hashedKey?: StringFieldUpdateOperationsInput | string
    permissions?: ApiKeyUpdatepermissionsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutApiKeysNestedInput
  }

  export type ApiKeyUncheckedUpdateWithoutUsageInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    keyPrefix?: StringFieldUpdateOperationsInput | string
    hashedKey?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    permissions?: ApiKeyUpdatepermissionsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    email: string
    name: string
    password?: string | null
    role: $Enums.UserRole
    emailVerified?: Date | string | null
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutUsersInput
    assignedClients?: ClientCreateNestedManyWithoutAssignedUsersInput
    invitationsSent?: UserInvitationCreateNestedManyWithoutSenderInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    tokenTransactions?: TokenTransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    email: string
    name: string
    password?: string | null
    role: $Enums.UserRole
    emailVerified?: Date | string | null
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    agencyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedClients?: ClientUncheckedCreateNestedManyWithoutAssignedUsersInput
    invitationsSent?: UserInvitationUncheckedCreateNestedManyWithoutSenderInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    tokenTransactions?: TokenTransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutUsersNestedInput
    assignedClients?: ClientUpdateManyWithoutAssignedUsersNestedInput
    invitationsSent?: UserInvitationUpdateManyWithoutSenderNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    tokenTransactions?: TokenTransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedClients?: ClientUncheckedUpdateManyWithoutAssignedUsersNestedInput
    invitationsSent?: UserInvitationUncheckedUpdateManyWithoutSenderNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    tokenTransactions?: TokenTransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    email: string
    name: string
    password?: string | null
    role: $Enums.UserRole
    emailVerified?: Date | string | null
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agency: AgencyCreateNestedOneWithoutUsersInput
    assignedClients?: ClientCreateNestedManyWithoutAssignedUsersInput
    invitationsSent?: UserInvitationCreateNestedManyWithoutSenderInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    tokenTransactions?: TokenTransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    email: string
    name: string
    password?: string | null
    role: $Enums.UserRole
    emailVerified?: Date | string | null
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    agencyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    assignedClients?: ClientUncheckedCreateNestedManyWithoutAssignedUsersInput
    invitationsSent?: UserInvitationUncheckedCreateNestedManyWithoutSenderInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    tokenTransactions?: TokenTransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutUsersNestedInput
    assignedClients?: ClientUpdateManyWithoutAssignedUsersNestedInput
    invitationsSent?: UserInvitationUpdateManyWithoutSenderNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    tokenTransactions?: TokenTransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedClients?: ClientUncheckedUpdateManyWithoutAssignedUsersNestedInput
    invitationsSent?: UserInvitationUncheckedUpdateManyWithoutSenderNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    tokenTransactions?: TokenTransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyAgencyInput = {
    id?: string
    email: string
    name: string
    password?: string | null
    role: $Enums.UserRole
    emailVerified?: Date | string | null
    emailVerificationToken?: string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClientCreateManyAgencyInput = {
    id?: string
    brandName: string
    brandColors?: ClientCreatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    logoUrl?: string | null
    whatsappNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserInvitationCreateManyAgencyInput = {
    id?: string
    email: string
    role: $Enums.UserRole
    token: string
    expiresAt: Date | string
    usedAt?: Date | string | null
    senderId: string
    clientIds?: UserInvitationCreateclientIdsInput | string[]
    createdAt?: Date | string
  }

  export type TokenTransactionCreateManyAgencyInput = {
    id?: string
    userId?: string | null
    amount: number
    type?: $Enums.TokenTransactionType
    description: string
    reference?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AuditLogCreateManyAgencyInput = {
    id?: string
    userId?: string | null
    action: string
    resource: string
    resourceId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type UserUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedClients?: ClientUpdateManyWithoutAssignedUsersNestedInput
    invitationsSent?: UserInvitationUpdateManyWithoutSenderNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    tokenTransactions?: TokenTransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedClients?: ClientUncheckedUpdateManyWithoutAssignedUsersNestedInput
    invitationsSent?: UserInvitationUncheckedUpdateManyWithoutSenderNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    tokenTransactions?: TokenTransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandColors?: ClientUpdatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    whatsappNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedUsers?: UserUpdateManyWithoutAssignedClientsNestedInput
    campaigns?: CampaignUpdateManyWithoutClientNestedInput
    brandAssets?: BrandAssetUpdateManyWithoutClientNestedInput
    socialAccounts?: SocialAccountUpdateManyWithoutClientNestedInput
    socialMediaLinks?: SocialMediaLinkUpdateManyWithoutClientNestedInput
    apiKeys?: ApiKeyUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandColors?: ClientUpdatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    whatsappNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedUsers?: UserUncheckedUpdateManyWithoutAssignedClientsNestedInput
    campaigns?: CampaignUncheckedUpdateManyWithoutClientNestedInput
    brandAssets?: BrandAssetUncheckedUpdateManyWithoutClientNestedInput
    socialAccounts?: SocialAccountUncheckedUpdateManyWithoutClientNestedInput
    socialMediaLinks?: SocialMediaLinkUncheckedUpdateManyWithoutClientNestedInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateManyWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandColors?: ClientUpdatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    whatsappNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserInvitationUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientIds?: UserInvitationUpdateclientIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutInvitationsSentNestedInput
  }

  export type UserInvitationUncheckedUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    senderId?: StringFieldUpdateOperationsInput | string
    clientIds?: UserInvitationUpdateclientIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserInvitationUncheckedUpdateManyWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    senderId?: StringFieldUpdateOperationsInput | string
    clientIds?: UserInvitationUpdateclientIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenTransactionUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    type?: EnumTokenTransactionTypeFieldUpdateOperationsInput | $Enums.TokenTransactionType
    description?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutTokenTransactionsNestedInput
  }

  export type TokenTransactionUncheckedUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    type?: EnumTokenTransactionTypeFieldUpdateOperationsInput | $Enums.TokenTransactionType
    description?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenTransactionUncheckedUpdateManyWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: IntFieldUpdateOperationsInput | number
    type?: EnumTokenTransactionTypeFieldUpdateOperationsInput | $Enums.TokenTransactionType
    description?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutAgencyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserInvitationCreateManySenderInput = {
    id?: string
    email: string
    role: $Enums.UserRole
    token: string
    expiresAt: Date | string
    usedAt?: Date | string | null
    agencyId: string
    clientIds?: UserInvitationCreateclientIdsInput | string[]
    createdAt?: Date | string
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type SessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type AuditLogCreateManyUserInput = {
    id?: string
    agencyId: string
    action: string
    resource: string
    resourceId?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type TokenTransactionCreateManyUserInput = {
    id?: string
    agencyId: string
    amount: number
    type?: $Enums.TokenTransactionType
    description: string
    reference?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ClientUpdateWithoutAssignedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandColors?: ClientUpdatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    whatsappNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutClientsNestedInput
    campaigns?: CampaignUpdateManyWithoutClientNestedInput
    brandAssets?: BrandAssetUpdateManyWithoutClientNestedInput
    socialAccounts?: SocialAccountUpdateManyWithoutClientNestedInput
    socialMediaLinks?: SocialMediaLinkUpdateManyWithoutClientNestedInput
    apiKeys?: ApiKeyUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutAssignedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandColors?: ClientUpdatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    whatsappNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    campaigns?: CampaignUncheckedUpdateManyWithoutClientNestedInput
    brandAssets?: BrandAssetUncheckedUpdateManyWithoutClientNestedInput
    socialAccounts?: SocialAccountUncheckedUpdateManyWithoutClientNestedInput
    socialMediaLinks?: SocialMediaLinkUncheckedUpdateManyWithoutClientNestedInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateManyWithoutAssignedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    brandName?: StringFieldUpdateOperationsInput | string
    brandColors?: ClientUpdatebrandColorsInput | string[]
    typography?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    whatsappNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserInvitationUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientIds?: UserInvitationUpdateclientIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutUserInvitationsNestedInput
  }

  export type UserInvitationUncheckedUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    clientIds?: UserInvitationUpdateclientIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserInvitationUncheckedUpdateManyWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    clientIds?: UserInvitationUpdateclientIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenTransactionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    type?: EnumTokenTransactionTypeFieldUpdateOperationsInput | $Enums.TokenTransactionType
    description?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutTokenTransactionsNestedInput
  }

  export type TokenTransactionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    type?: EnumTokenTransactionTypeFieldUpdateOperationsInput | $Enums.TokenTransactionType
    description?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenTransactionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    agencyId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    type?: EnumTokenTransactionTypeFieldUpdateOperationsInput | $Enums.TokenTransactionType
    description?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignCreateManyClientInput = {
    id?: string
    name: string
    objective: string
    startDate: Date | string
    endDate: Date | string
    brandTone: string
    publicationFrequency: JsonNullValueInput | InputJsonValue
    templateIds?: CampaignCreatetemplateIdsInput | string[]
    status?: $Enums.CampaignStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BrandAssetCreateManyClientInput = {
    id?: string
    type: $Enums.AssetType
    name: string
    url: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type SocialAccountCreateManyClientInput = {
    id?: string
    platform: $Enums.SocialPlatform
    accountId: string
    accountName?: string | null
    accessToken: string
    refreshToken?: string | null
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SocialMediaLinkCreateManyClientInput = {
    id?: string
    platform: string
    url: string
    username?: string | null
  }

  export type ApiKeyCreateManyClientInput = {
    id?: string
    name: string
    keyPrefix: string
    hashedKey: string
    permissions?: ApiKeyCreatepermissionsInput | string[]
    isActive?: boolean
    lastUsedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutAssignedClientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agency?: AgencyUpdateOneRequiredWithoutUsersNestedInput
    invitationsSent?: UserInvitationUpdateManyWithoutSenderNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    tokenTransactions?: TokenTransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedClientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitationsSent?: UserInvitationUncheckedUpdateManyWithoutSenderNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    tokenTransactions?: TokenTransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutAssignedClientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agencyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CampaignUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    objective?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    brandTone?: StringFieldUpdateOperationsInput | string
    publicationFrequency?: JsonNullValueInput | InputJsonValue
    templateIds?: CampaignUpdatetemplateIdsInput | string[]
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    objective?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    brandTone?: StringFieldUpdateOperationsInput | string
    publicationFrequency?: JsonNullValueInput | InputJsonValue
    templateIds?: CampaignUpdatetemplateIdsInput | string[]
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: PostUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateManyWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    objective?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    brandTone?: StringFieldUpdateOperationsInput | string
    publicationFrequency?: JsonNullValueInput | InputJsonValue
    templateIds?: CampaignUpdatetemplateIdsInput | string[]
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandAssetUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandAssetUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandAssetUncheckedUpdateManyWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumAssetTypeFieldUpdateOperationsInput | $Enums.AssetType
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SocialAccountUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: EnumSocialPlatformFieldUpdateOperationsInput | $Enums.SocialPlatform
    accountId?: StringFieldUpdateOperationsInput | string
    accountName?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publications?: PublicationResultUpdateManyWithoutSocialAccountNestedInput
  }

  export type SocialAccountUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: EnumSocialPlatformFieldUpdateOperationsInput | $Enums.SocialPlatform
    accountId?: StringFieldUpdateOperationsInput | string
    accountName?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publications?: PublicationResultUncheckedUpdateManyWithoutSocialAccountNestedInput
  }

  export type SocialAccountUncheckedUpdateManyWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: EnumSocialPlatformFieldUpdateOperationsInput | $Enums.SocialPlatform
    accountId?: StringFieldUpdateOperationsInput | string
    accountName?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SocialMediaLinkUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SocialMediaLinkUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SocialMediaLinkUncheckedUpdateManyWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApiKeyUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    keyPrefix?: StringFieldUpdateOperationsInput | string
    hashedKey?: StringFieldUpdateOperationsInput | string
    permissions?: ApiKeyUpdatepermissionsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usage?: ApiKeyUsageUpdateManyWithoutApiKeyNestedInput
  }

  export type ApiKeyUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    keyPrefix?: StringFieldUpdateOperationsInput | string
    hashedKey?: StringFieldUpdateOperationsInput | string
    permissions?: ApiKeyUpdatepermissionsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usage?: ApiKeyUsageUncheckedUpdateManyWithoutApiKeyNestedInput
  }

  export type ApiKeyUncheckedUpdateManyWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    keyPrefix?: StringFieldUpdateOperationsInput | string
    hashedKey?: StringFieldUpdateOperationsInput | string
    permissions?: ApiKeyUpdatepermissionsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostCreateManyCampaignInput = {
    id?: string
    scheduledDate: Date | string
    status?: $Enums.PostStatus
    finalImageUrl?: string | null
    embeddedText?: string | null
    publicationText?: string | null
    hashtags?: PostCreatehashtagsInput | string[]
    cta?: string | null
    generationJobId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostUpdateWithoutCampaignInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    finalImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    embeddedText?: NullableStringFieldUpdateOperationsInput | string | null
    publicationText?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: PostUpdatehashtagsInput | string[]
    cta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    generationJob?: ContentGenerationJobUpdateOneWithoutPostNestedInput
    publicationResults?: PublicationResultUpdateManyWithoutPostNestedInput
    contentVersions?: ContentVersionUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutCampaignInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    finalImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    embeddedText?: NullableStringFieldUpdateOperationsInput | string | null
    publicationText?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: PostUpdatehashtagsInput | string[]
    cta?: NullableStringFieldUpdateOperationsInput | string | null
    generationJobId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    publicationResults?: PublicationResultUncheckedUpdateManyWithoutPostNestedInput
    contentVersions?: ContentVersionUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutCampaignInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    finalImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    embeddedText?: NullableStringFieldUpdateOperationsInput | string | null
    publicationText?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: PostUpdatehashtagsInput | string[]
    cta?: NullableStringFieldUpdateOperationsInput | string | null
    generationJobId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublicationResultCreateManyPostInput = {
    id?: string
    socialAccountId: string
    platformPostId?: string | null
    status?: $Enums.PublicationStatus
    publishedAt?: Date | string | null
    error?: string | null
    createdAt?: Date | string
  }

  export type ContentVersionCreateManyPostInput = {
    id?: string
    versionNumber: number
    finalImageUrl?: string | null
    embeddedText?: string | null
    publicationText?: string | null
    hashtags?: ContentVersionCreatehashtagsInput | string[]
    cta?: string | null
    createdAt?: Date | string
  }

  export type PublicationResultUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    platformPostId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPublicationStatusFieldUpdateOperationsInput | $Enums.PublicationStatus
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    socialAccount?: SocialAccountUpdateOneRequiredWithoutPublicationsNestedInput
  }

  export type PublicationResultUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    socialAccountId?: StringFieldUpdateOperationsInput | string
    platformPostId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPublicationStatusFieldUpdateOperationsInput | $Enums.PublicationStatus
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublicationResultUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    socialAccountId?: StringFieldUpdateOperationsInput | string
    platformPostId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPublicationStatusFieldUpdateOperationsInput | $Enums.PublicationStatus
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContentVersionUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    versionNumber?: IntFieldUpdateOperationsInput | number
    finalImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    embeddedText?: NullableStringFieldUpdateOperationsInput | string | null
    publicationText?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: ContentVersionUpdatehashtagsInput | string[]
    cta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContentVersionUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    versionNumber?: IntFieldUpdateOperationsInput | number
    finalImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    embeddedText?: NullableStringFieldUpdateOperationsInput | string | null
    publicationText?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: ContentVersionUpdatehashtagsInput | string[]
    cta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContentVersionUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    versionNumber?: IntFieldUpdateOperationsInput | number
    finalImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    embeddedText?: NullableStringFieldUpdateOperationsInput | string | null
    publicationText?: NullableStringFieldUpdateOperationsInput | string | null
    hashtags?: ContentVersionUpdatehashtagsInput | string[]
    cta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GenerationStepResultCreateManyJobInput = {
    id?: string
    step: $Enums.GenerationStep
    status?: $Enums.StepStatus
    input?: NullableJsonNullValueInput | InputJsonValue
    output?: NullableJsonNullValueInput | InputJsonValue
    tokensUsed?: number
    executedAt?: Date | string
    error?: string | null
  }

  export type GenerationStepResultUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    step?: EnumGenerationStepFieldUpdateOperationsInput | $Enums.GenerationStep
    status?: EnumStepStatusFieldUpdateOperationsInput | $Enums.StepStatus
    input?: NullableJsonNullValueInput | InputJsonValue
    output?: NullableJsonNullValueInput | InputJsonValue
    tokensUsed?: IntFieldUpdateOperationsInput | number
    executedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    error?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GenerationStepResultUncheckedUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    step?: EnumGenerationStepFieldUpdateOperationsInput | $Enums.GenerationStep
    status?: EnumStepStatusFieldUpdateOperationsInput | $Enums.StepStatus
    input?: NullableJsonNullValueInput | InputJsonValue
    output?: NullableJsonNullValueInput | InputJsonValue
    tokensUsed?: IntFieldUpdateOperationsInput | number
    executedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    error?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GenerationStepResultUncheckedUpdateManyWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    step?: EnumGenerationStepFieldUpdateOperationsInput | $Enums.GenerationStep
    status?: EnumStepStatusFieldUpdateOperationsInput | $Enums.StepStatus
    input?: NullableJsonNullValueInput | InputJsonValue
    output?: NullableJsonNullValueInput | InputJsonValue
    tokensUsed?: IntFieldUpdateOperationsInput | number
    executedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    error?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PublicationResultCreateManySocialAccountInput = {
    id?: string
    postId: string
    platformPostId?: string | null
    status?: $Enums.PublicationStatus
    publishedAt?: Date | string | null
    error?: string | null
    createdAt?: Date | string
  }

  export type PublicationResultUpdateWithoutSocialAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    platformPostId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPublicationStatusFieldUpdateOperationsInput | $Enums.PublicationStatus
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostUpdateOneRequiredWithoutPublicationResultsNestedInput
  }

  export type PublicationResultUncheckedUpdateWithoutSocialAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    platformPostId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPublicationStatusFieldUpdateOperationsInput | $Enums.PublicationStatus
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PublicationResultUncheckedUpdateManyWithoutSocialAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    platformPostId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPublicationStatusFieldUpdateOperationsInput | $Enums.PublicationStatus
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiKeyUsageCreateManyApiKeyInput = {
    id?: string
    endpoint: string
    method: string
    statusCode: number
    tokensConsumed?: number | null
    ipAddress?: string | null
    userAgent?: string | null
    requestBody?: NullableJsonNullValueInput | InputJsonValue
    responseTime?: number | null
    createdAt?: Date | string
  }

  export type ApiKeyUsageUpdateWithoutApiKeyInput = {
    id?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    statusCode?: IntFieldUpdateOperationsInput | number
    tokensConsumed?: NullableIntFieldUpdateOperationsInput | number | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    requestBody?: NullableJsonNullValueInput | InputJsonValue
    responseTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiKeyUsageUncheckedUpdateWithoutApiKeyInput = {
    id?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    statusCode?: IntFieldUpdateOperationsInput | number
    tokensConsumed?: NullableIntFieldUpdateOperationsInput | number | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    requestBody?: NullableJsonNullValueInput | InputJsonValue
    responseTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiKeyUsageUncheckedUpdateManyWithoutApiKeyInput = {
    id?: StringFieldUpdateOperationsInput | string
    endpoint?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    statusCode?: IntFieldUpdateOperationsInput | number
    tokensConsumed?: NullableIntFieldUpdateOperationsInput | number | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    requestBody?: NullableJsonNullValueInput | InputJsonValue
    responseTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AgencyCountOutputTypeDefaultArgs instead
     */
    export type AgencyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AgencyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClientCountOutputTypeDefaultArgs instead
     */
    export type ClientCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClientCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CampaignCountOutputTypeDefaultArgs instead
     */
    export type CampaignCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CampaignCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PostCountOutputTypeDefaultArgs instead
     */
    export type PostCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PostCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContentGenerationJobCountOutputTypeDefaultArgs instead
     */
    export type ContentGenerationJobCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContentGenerationJobCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SocialAccountCountOutputTypeDefaultArgs instead
     */
    export type SocialAccountCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SocialAccountCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ApiKeyCountOutputTypeDefaultArgs instead
     */
    export type ApiKeyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ApiKeyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AgencyDefaultArgs instead
     */
    export type AgencyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AgencyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserInvitationDefaultArgs instead
     */
    export type UserInvitationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserInvitationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClientDefaultArgs instead
     */
    export type ClientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClientDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SocialMediaLinkDefaultArgs instead
     */
    export type SocialMediaLinkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SocialMediaLinkDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BrandAssetDefaultArgs instead
     */
    export type BrandAssetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BrandAssetDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CampaignDefaultArgs instead
     */
    export type CampaignArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CampaignDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PostDefaultArgs instead
     */
    export type PostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PostDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContentGenerationJobDefaultArgs instead
     */
    export type ContentGenerationJobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContentGenerationJobDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GenerationStepResultDefaultArgs instead
     */
    export type GenerationStepResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GenerationStepResultDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContentVersionDefaultArgs instead
     */
    export type ContentVersionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContentVersionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SocialAccountDefaultArgs instead
     */
    export type SocialAccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SocialAccountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PublicationResultDefaultArgs instead
     */
    export type PublicationResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PublicationResultDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TokenTransactionDefaultArgs instead
     */
    export type TokenTransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TokenTransactionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuditLogDefaultArgs instead
     */
    export type AuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuditLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ApiKeyDefaultArgs instead
     */
    export type ApiKeyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ApiKeyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ApiKeyUsageDefaultArgs instead
     */
    export type ApiKeyUsageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ApiKeyUsageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SystemLogDefaultArgs instead
     */
    export type SystemLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SystemLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountDefaultArgs instead
     */
    export type AccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionDefaultArgs instead
     */
    export type SessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VerificationTokenDefaultArgs instead
     */
    export type VerificationTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VerificationTokenDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}