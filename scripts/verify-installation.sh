#!/bin/bash
# Post-installation verification script for Postia SaaS

echo ""
echo "========================================"
echo "üîç Postia SaaS - Installation Verification"
echo "========================================"
echo ""
echo "üìã This script verifies that your Postia SaaS installation"
echo "   is complete and all services are working correctly."
echo ""

# Progress tracking
STEP=1
TOTAL_STEPS=8
ISSUES_FOUND=0

echo "[$STEP/$TOTAL_STEPS] üîç Checking system requirements..."
((STEP++))

# Check Node.js
echo "   ‚Ä¢ Node.js version..."
if command -v node >/dev/null 2>&1; then
    NODE_VERSION=$(node --version)
    echo "   ‚úÖ Node.js: $NODE_VERSION"
else
    echo "   ‚ùå Node.js not found"
    ((ISSUES_FOUND++))
fi

# Check npm
echo "   ‚Ä¢ npm version..."
if command -v npm >/dev/null 2>&1; then
    NPM_VERSION=$(npm --version)
    echo "   ‚úÖ npm: v$NPM_VERSION"
else
    echo "   ‚ùå npm not found"
    ((ISSUES_FOUND++))
fi

# Check Docker
echo "   ‚Ä¢ Docker installation..."
if command -v docker >/dev/null 2>&1; then
    DOCKER_VERSION=$(docker --version)
    echo "   ‚úÖ Docker: $DOCKER_VERSION"
    
    # Check if Docker is running
    echo "   ‚Ä¢ Docker daemon status..."
    if docker info >/dev/null 2>&1; then
        echo "   ‚úÖ Docker daemon is running"
    else
        echo "   ‚ùå Docker is not running"
        ((ISSUES_FOUND++))
    fi
else
    echo "   ‚ùå Docker not found"
    ((ISSUES_FOUND++))
fi

echo ""
echo "[$STEP/$TOTAL_STEPS] üìÅ Checking project structure..."
((STEP++))

# Check critical files
echo "   ‚Ä¢ package.json..."
if [ -f "package.json" ]; then
    echo "   ‚úÖ package.json found"
else
    echo "   ‚ùå package.json missing"
    ((ISSUES_FOUND++))
fi

echo "   ‚Ä¢ .env file..."
if [ -f ".env" ]; then
    echo "   ‚úÖ .env file found"
else
    echo "   ‚ùå .env file missing"
    ((ISSUES_FOUND++))
fi

echo "   ‚Ä¢ docker-compose.yml..."
if [ -f "docker-compose.yml" ]; then
    echo "   ‚úÖ docker-compose.yml found"
else
    echo "   ‚ùå docker-compose.yml missing"
    ((ISSUES_FOUND++))
fi

echo "   ‚Ä¢ node_modules directory..."
if [ -d "node_modules" ]; then
    echo "   ‚úÖ Dependencies installed"
else
    echo "   ‚ùå Dependencies not installed"
    echo "   üîß Run: npm install"
    ((ISSUES_FOUND++))
fi

echo ""
echo "[$STEP/$TOTAL_STEPS] ‚öôÔ∏è Checking environment variables..."
((STEP++))

# Check required environment variables
echo "   ‚Ä¢ DATABASE_URL..."
if grep -q "DATABASE_URL=" .env 2>/dev/null; then
    echo "   ‚úÖ DATABASE_URL configured"
else
    echo "   ‚ùå DATABASE_URL not configured"
    ((ISSUES_FOUND++))
fi

echo "   ‚Ä¢ NEXTAUTH_SECRET..."
if grep -q "NEXTAUTH_SECRET=" .env 2>/dev/null; then
    echo "   ‚úÖ NEXTAUTH_SECRET configured"
else
    echo "   ‚ùå NEXTAUTH_SECRET not configured"
    ((ISSUES_FOUND++))
fi

echo "   ‚Ä¢ OPENAI_API_KEY..."
if grep -q "OPENAI_API_KEY=" .env 2>/dev/null; then
    echo "   ‚úÖ OPENAI_API_KEY configured"
else
    echo "   ‚ö†Ô∏è  OPENAI_API_KEY not configured (required for AI features)"
fi

echo "   ‚Ä¢ GEMINI_API_KEY..."
if grep -q "GEMINI_API_KEY=" .env 2>/dev/null; then
    echo "   ‚úÖ GEMINI_API_KEY configured"
else
    echo "   ‚ö†Ô∏è  GEMINI_API_KEY not configured (required for AI features)"
fi

echo ""
echo "[$STEP/$TOTAL_STEPS] üê≥ Checking Docker services..."
((STEP++))

if [ $ISSUES_FOUND -gt 0 ]; then
    echo "   ‚ö†Ô∏è  Skipping Docker checks due to previous issues"
else
    # Check PostgreSQL container
    echo "   ‚Ä¢ PostgreSQL container..."
    if docker ps --filter "name=postia-postgres" --format "{{.Status}}" | grep -q "Up"; then
        echo "   ‚úÖ PostgreSQL container is running"
        
        # Check PostgreSQL health
        echo "   ‚Ä¢ PostgreSQL connectivity..."
        if docker exec postia-postgres pg_isready -U postgres >/dev/null 2>&1; then
            echo "   ‚úÖ PostgreSQL is accepting connections"
        else
            echo "   ‚ùå PostgreSQL is not ready"
            ((ISSUES_FOUND++))
        fi
    else
        echo "   ‚ùå PostgreSQL container is not running"
        echo "   üîß Run: docker-compose up postgres -d"
        ((ISSUES_FOUND++))
    fi

    # Check Redis container
    echo "   ‚Ä¢ Redis container..."
    if docker ps --filter "name=postia-redis" --format "{{.Status}}" | grep -q "Up"; then
        echo "   ‚úÖ Redis container is running"
        
        # Check Redis health
        echo "   ‚Ä¢ Redis connectivity..."
        if docker exec postia-redis redis-cli ping >/dev/null 2>&1; then
            echo "   ‚úÖ Redis is responding"
        else
            echo "   ‚ùå Redis is not responding"
            ((ISSUES_FOUND++))
        fi
    else
        echo "   ‚ùå Redis container is not running"
        echo "   üîß Run: docker-compose up redis -d"
        ((ISSUES_FOUND++))
    fi
fi

echo ""
echo "[$STEP/$TOTAL_STEPS] üîß Checking Prisma setup..."
((STEP++))

if [ $ISSUES_FOUND -gt 0 ]; then
    echo "   ‚ö†Ô∏è  Skipping Prisma checks due to previous issues"
else
    echo "   ‚Ä¢ Prisma client generation..."
    if npx prisma --version >/dev/null 2>&1; then
        echo "   ‚úÖ Prisma CLI is available"
    else
        echo "   ‚ùå Prisma CLI not found"
        ((ISSUES_FOUND++))
    fi

    echo "   ‚Ä¢ Database schema status..."
    if npx prisma db push --accept-data-loss --skip-generate >/dev/null 2>&1; then
        echo "   ‚úÖ Database schema is up to date"
    else
        echo "   ‚ùå Database schema needs update"
        echo "   üîß Run: npx prisma db push"
        ((ISSUES_FOUND++))
    fi
fi

echo ""
echo "[$STEP/$TOTAL_STEPS] üåê Checking application health..."
((STEP++))

if [ $ISSUES_FOUND -gt 0 ]; then
    echo "   ‚ö†Ô∏è  Skipping application checks due to previous issues"
else
    echo "   ‚Ä¢ Running comprehensive health check..."
    if npm run health-check >/dev/null 2>&1; then
        echo "   ‚úÖ All services are healthy"
    else
        echo "   ‚ö†Ô∏è  Some services may have issues"
        echo "   üîß Run: npm run health-check (for detailed output)"
    fi
fi

echo ""
echo "[$STEP/$TOTAL_STEPS] üìã Checking available scripts..."
((STEP++))

echo "   ‚Ä¢ Development server script..."
if npm run dev --dry-run >/dev/null 2>&1; then
    echo "   ‚úÖ 'npm run dev' is available"
else
    echo "   ‚ùå 'npm run dev' script not found"
    ((ISSUES_FOUND++))
fi

echo "   ‚Ä¢ Database studio script..."
if npm run db:studio --dry-run >/dev/null 2>&1; then
    echo "   ‚úÖ 'npm run db:studio' is available"
else
    echo "   ‚ö†Ô∏è  'npm run db:studio' script not found"
fi

echo "   ‚Ä¢ Test script..."
if npm test --dry-run >/dev/null 2>&1; then
    echo "   ‚úÖ 'npm test' is available"
else
    echo "   ‚ö†Ô∏è  'npm test' script not found"
fi

echo ""
echo "[$STEP/$TOTAL_STEPS] üìä Verification Summary"
((STEP++))

echo ""
echo "========================================"
echo "üìä Installation Verification Results"
echo "========================================"

if [ $ISSUES_FOUND -eq 0 ]; then
    echo ""
    echo "üéâ SUCCESS: Installation verification passed!"
    echo ""
    echo "‚úÖ All critical components are working correctly"
    echo "‚úÖ Your Postia SaaS installation is ready for development"
    echo ""
    echo "üöÄ Next Steps:"
    echo "   1. Start development server: npm run dev"
    echo "   2. Open browser: http://localhost:3000"
    echo "   3. Open database viewer: npm run db:studio"
    echo ""
    echo "üë§ Demo Credentials:"
    echo "   ‚Ä¢ owner@demo-agency.com / password123"
    echo "   ‚Ä¢ manager@demo-agency.com / password123"
    echo ""
else
    echo ""
    echo "‚ùå ISSUES FOUND: $ISSUES_FOUND problems detected"
    echo ""
    echo "üîß Recommended Actions:"
    echo "   1. Review the issues listed above"
    echo "   2. Run the main setup script: scripts/setup.sh"
    echo "   3. Check the installation guide: REQUISITOS-INSTALACION-LOCAL.md"
    echo "   4. Run this verification again: scripts/verify-installation.sh"
    echo ""
    echo "üÜò Common Solutions:"
    echo "   ‚Ä¢ Missing dependencies: npm install"
    echo "   ‚Ä¢ Docker not running: Start Docker Desktop"
    echo "   ‚Ä¢ Database issues: docker-compose up -d"
    echo "   ‚Ä¢ Environment config: cp .env.example .env"
    echo ""
fi

echo "üìö Additional Resources:"
echo "   ‚Ä¢ Health check: npm run health-check"
echo "   ‚Ä¢ Installation guide: REQUISITOS-INSTALACION-LOCAL.md"
echo "   ‚Ä¢ Troubleshooting: Check Docker logs"
echo ""

if [ $ISSUES_FOUND -gt 0 ]; then
    exit 1
else
    exit 0
fi